{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2016, Google Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nrequire(\"core-js/modules/web.immediate.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst events_1 = require(\"events\");\nconst grpc_1 = require(\"grpc\");\nconst apiCallable_1 = require(\"./apiCallable\");\nconst gax_1 = require(\"./gax\");\nconst GoogleError_1 = require(\"./GoogleError\");\nclass LongrunningDescriptor {\n  /**\n   * Describes the structure of a page-streaming call.\n   *\n   * @property {OperationsClient} operationsClient\n   * @property {anyDecoder} responseDecoder\n   * @property {anyDecoder} metadataDecoder\n   *\n   * @param {OperationsClient} operationsClient - The client used to poll or\n   *   cancel an operation.\n   * @param {anyDecoder=} responseDecoder - The decoder to unpack\n   *   the response message.\n   * @param {anyDecoder=} metadataDecoder - The decoder to unpack\n   *   the metadata message.\n   *\n   * @constructor\n   */\n  constructor(operationsClient, responseDecoder, metadataDecoder) {\n    this.operationsClient = operationsClient;\n    this.responseDecoder = responseDecoder;\n    this.metadataDecoder = metadataDecoder;\n  }\n  apiCaller() {\n    return new LongrunningApiCaller(this);\n  }\n}\nexports.LongrunningDescriptor = LongrunningDescriptor;\nclass LongrunningApiCaller extends apiCallable_1.NormalApiCaller {\n  /**\n   * Creates an API caller that performs polling on a long running operation.\n   *\n   * @private\n   * @constructor\n   * @param {LongrunningDescriptor} longrunningDescriptor - Holds the\n   * decoders used for unpacking responses and the operationsClient\n   * used for polling the operation.\n   */\n  constructor(longrunningDescriptor) {\n    super();\n    this.longrunningDescriptor = longrunningDescriptor;\n  }\n  call(apiCall, argument, settings, canceller) {\n    canceller.call((argument, callback) => {\n      return this._wrapOperation(apiCall, settings, argument, callback);\n    }, argument);\n  }\n  _wrapOperation(apiCall, settings, argument, callback) {\n    // TODO: this code defies all logic, and just can't be accurate.\n    // tslint:disable-next-line no-any\n    let backoffSettings = settings.longrunning;\n    if (!backoffSettings) {\n      backoffSettings = gax_1.createBackoffSettings(100, 1.3, 60000, null, null, null, null);\n    }\n    const longrunningDescriptor = this.longrunningDescriptor;\n    return apiCall(argument, (err, rawResponse) => {\n      if (err) {\n        callback(err, null, rawResponse);\n        return;\n      }\n      const operation = new Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);\n      callback(null, operation, rawResponse);\n    });\n  }\n}\nexports.LongrunningApiCaller = LongrunningApiCaller;\nclass Operation extends events_1.EventEmitter {\n  /**\n   * Wrapper for a google.longrunnung.Operation.\n   *\n   * @constructor\n   *\n   * @param {google.longrunning.Operation} grpcOp - The operation to be wrapped.\n   * @param {LongrunningDescriptor} longrunningDescriptor - This defines the\n   * operations service client and unpacking mechanisms for the operation.\n   * @param {BackoffSettings} backoffSettings - The backoff settings used in\n   * in polling the operation.\n   * @param {CallOptions=} callOptions - CallOptions used in making get operation\n   * requests.\n   */\n  constructor(grpcOp, longrunningDescriptor, backoffSettings, callOptions) {\n    super();\n    this.completeListeners = 0;\n    this.hasActiveListeners = false;\n    this.latestResponse = grpcOp;\n    this.longrunningDescriptor = longrunningDescriptor;\n    this.result = null;\n    this.metadata = null;\n    this.backoffSettings = backoffSettings;\n    this._unpackResponse(grpcOp);\n    this._listenForEvents();\n    this._callOptions = callOptions;\n  }\n  /**\n   * Begin listening for events on the operation. This method keeps track of how\n   * many \"complete\" listeners are registered and removed, making sure polling\n   * is handled automatically.\n   *\n   * As long as there is one active \"complete\" listener, the connection is open.\n   * When there are no more listeners, the polling stops.\n   *\n   * @private\n   */\n  _listenForEvents() {\n    this.on('newListener', event => {\n      if (event === 'complete') {\n        this.completeListeners++;\n        if (!this.hasActiveListeners) {\n          this.hasActiveListeners = true;\n          this.startPolling_();\n        }\n      }\n    });\n    this.on('removeListener', event => {\n      if (event === 'complete' && --this.completeListeners === 0) {\n        this.hasActiveListeners = false;\n      }\n    });\n  }\n  /**\n   * Cancels current polling api call and cancels the operation.\n   *\n   * @return {Promise} the promise of the OperationsClient#cancelOperation api\n   * request.\n   */\n  cancel() {\n    if (this.currentCallPromise_) {\n      this.currentCallPromise_.cancel();\n    }\n    const operationsClient = this.longrunningDescriptor.operationsClient;\n    return operationsClient.cancelOperation({\n      name: this.latestResponse.name\n    });\n  }\n  getOperation(callback) {\n    const self = this;\n    const operationsClient = this.longrunningDescriptor.operationsClient;\n    function promisifyResponse() {\n      if (!callback) {\n        // tslint:disable-next-line variable-name\n        const PromiseCtor = self._callOptions.promise;\n        return new PromiseCtor((resolve, reject) => {\n          if (self.latestResponse.error) {\n            const error = new GoogleError_1.GoogleError(self.latestResponse.error.message);\n            error.code = self.latestResponse.error.code;\n            reject(error);\n          } else {\n            resolve([self.result, self.metadata, self.latestResponse]);\n          }\n        });\n      }\n      return;\n    }\n    if (this.latestResponse.done) {\n      this._unpackResponse(this.latestResponse, callback);\n      return promisifyResponse();\n    }\n    this.currentCallPromise_ = operationsClient.getOperation({\n      name: this.latestResponse.name\n    }, this._callOptions);\n    const noCallbackPromise = this.currentCallPromise_.then(responses => {\n      self.latestResponse = responses[0];\n      self._unpackResponse(responses[0], callback);\n      return promisifyResponse();\n    });\n    if (!callback) {\n      return noCallbackPromise;\n    }\n  }\n  _unpackResponse(op, callback) {\n    const responseDecoder = this.longrunningDescriptor.responseDecoder;\n    const metadataDecoder = this.longrunningDescriptor.metadataDecoder;\n    let response;\n    let metadata;\n    if (op.done) {\n      if (op.result === 'error') {\n        const error = new GoogleError_1.GoogleError(op.error.message);\n        error.code = op.error.code;\n        if (callback) {\n          callback(error);\n        }\n        return;\n      }\n      if (responseDecoder && op.response) {\n        response = responseDecoder(op.response.value);\n        this.result = response;\n      }\n    }\n    if (metadataDecoder && op.metadata) {\n      metadata = metadataDecoder(op.metadata.value);\n      this.metadata = metadata;\n    }\n    if (callback) {\n      callback(null, response, metadata, op);\n    }\n  }\n  /**\n   * Poll `getOperation` to check the operation's status. This runs a loop to\n   * ping using the backoff strategy specified at initialization.\n   *\n   * Note: This method is automatically called once a \"complete\" event handler\n   * is registered on the operation.\n   *\n   * @private\n   */\n  startPolling_() {\n    const self = this;\n    let now = new Date();\n    const delayMult = this.backoffSettings.retryDelayMultiplier;\n    const maxDelay = this.backoffSettings.maxRetryDelayMillis;\n    let delay = this.backoffSettings.initialRetryDelayMillis;\n    let deadline = Infinity;\n    if (this.backoffSettings.totalTimeoutMillis) {\n      deadline = now.getTime() + this.backoffSettings.totalTimeoutMillis;\n    }\n    let previousMetadataBytes;\n    if (this.latestResponse.metadata) {\n      previousMetadataBytes = this.latestResponse.metadata.value;\n    }\n    // tslint:disable-next-line no-any\n    function emit(event, ...args) {\n      self.emit(event, ...args);\n    }\n    function retry() {\n      if (!self.hasActiveListeners) {\n        return;\n      }\n      if (now.getTime() >= deadline) {\n        const error = new GoogleError_1.GoogleError('Total timeout exceeded before any response was received');\n        error.code = grpc_1.status.DEADLINE_EXCEEDED;\n        setImmediate(emit, 'error', error);\n        return;\n      }\n      self.getOperation((err, result, metadata, rawResponse) => {\n        if (err) {\n          setImmediate(emit, 'error', err);\n          return;\n        }\n        if (!result) {\n          if (rawResponse.metadata && (!previousMetadataBytes || !rawResponse.metadata.value.equals(previousMetadataBytes))) {\n            setImmediate(emit, 'progress', metadata, rawResponse);\n            previousMetadataBytes = rawResponse.metadata.value;\n          }\n          // special case: some APIs fail to set either result or error\n          // but set done = true (e.g. speech with silent file).\n          // Don't hang forever in this case.\n          if (rawResponse.done) {\n            const error = new GoogleError_1.GoogleError('Long running operation has finished but there was no result');\n            error.code = grpc_1.status.UNKNOWN;\n            setImmediate(emit, 'error', error);\n            return;\n          }\n          setTimeout(() => {\n            now = new Date();\n            delay = Math.min(delay * delayMult, maxDelay);\n            retry();\n          }, delay);\n          return;\n        }\n        setImmediate(emit, 'complete', result, metadata, rawResponse);\n      });\n    }\n    retry();\n  }\n  /**\n   * Wraps the `complete` and `error` events in a Promise.\n   *\n   * @return {promise} - Promise that resolves on operation completion and rejects\n   * on operation error.\n   */\n  promise() {\n    // tslint:disable-next-line variable-name\n    const PromiseCtor = this._callOptions.promise;\n    return new PromiseCtor((resolve, reject) => {\n      this.on('error', reject).on('complete', (result, metadata, rawResponse) => {\n        resolve([result, metadata, rawResponse]);\n      });\n    });\n  }\n}\nexports.Operation = Operation;\n/**\n * Method used to create Operation objects.\n *\n * @constructor\n *\n * @param {google.longrunning.Operation} op - The operation to be wrapped.\n * @param {LongrunningDescriptor} longrunningDescriptor - This defines the\n * operations service client and unpacking mechanisms for the operation.\n * @param {BackoffSettings} backoffSettings - The backoff settings used in\n * in polling the operation.\n * @param {CallOptions=} callOptions - CallOptions used in making get operation\n * requests.\n */\nfunction operation(op, longrunningDescriptor, backoffSettings, callOptions) {\n  return new Operation(op, longrunningDescriptor, backoffSettings, callOptions);\n}\nexports.operation = operation;","map":{"version":3,"names":["require","events_1","grpc_1","apiCallable_1","gax_1","GoogleError_1","LongrunningDescriptor","constructor","operationsClient","responseDecoder","metadataDecoder","apiCaller","LongrunningApiCaller","exports","NormalApiCaller","longrunningDescriptor","call","apiCall","argument","settings","canceller","callback","_wrapOperation","backoffSettings","longrunning","createBackoffSettings","err","rawResponse","operation","Operation","EventEmitter","grpcOp","callOptions","completeListeners","hasActiveListeners","latestResponse","result","metadata","_unpackResponse","_listenForEvents","_callOptions","on","event","startPolling_","cancel","currentCallPromise_","cancelOperation","name","getOperation","self","promisifyResponse","PromiseCtor","promise","resolve","reject","error","GoogleError","message","code","done","noCallbackPromise","then","responses","op","response","value","now","Date","delayMult","retryDelayMultiplier","maxDelay","maxRetryDelayMillis","delay","initialRetryDelayMillis","deadline","Infinity","totalTimeoutMillis","getTime","previousMetadataBytes","emit","args","retry","status","DEADLINE_EXCEEDED","setImmediate","equals","UNKNOWN","setTimeout","Math","min"],"sources":["../../src/longrunning.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}