{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2016, Google Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst warnings_1 = require(\"./warnings\");\nconst duplexify = require('duplexify');\nconst retryRequest = require('retry-request');\n/**\n * The type of gRPC streaming.\n * @enum {number}\n */\nvar StreamType;\n(function (StreamType) {\n  /** Client sends a single request, server streams responses. */\n  StreamType[StreamType[\"SERVER_STREAMING\"] = 1] = \"SERVER_STREAMING\";\n  /** Client streams requests, server returns a single response. */\n  StreamType[StreamType[\"CLIENT_STREAMING\"] = 2] = \"CLIENT_STREAMING\";\n  /** Both client and server stream objects. */\n  StreamType[StreamType[\"BIDI_STREAMING\"] = 3] = \"BIDI_STREAMING\";\n})(StreamType = exports.StreamType || (exports.StreamType = {}));\nclass StreamProxy extends duplexify {\n  /**\n   * StreamProxy is a proxy to gRPC-streaming method.\n   *\n   * @private\n   * @constructor\n   * @param {StreamType} type - the type of gRPC stream.\n   * @param {ApiCallback} callback - the callback for further API call.\n   */\n  constructor(type, callback) {\n    super(undefined, undefined, {\n      objectMode: true,\n      readable: type !== StreamType.CLIENT_STREAMING,\n      writable: type !== StreamType.SERVER_STREAMING\n    });\n    this.type = type;\n    this._callback = callback;\n    this._isCancelCalled = false;\n  }\n  cancel() {\n    if (this.stream) {\n      this.stream.cancel();\n    } else {\n      this._isCancelCalled = true;\n    }\n  }\n  /**\n   * Forward events from an API request stream to the user's stream.\n   * @param {Stream} stream - The API request stream.\n   */\n  forwardEvents(stream) {\n    const eventsToForward = ['metadata', 'response', 'status'];\n    eventsToForward.forEach(event => {\n      stream.on(event, this.emit.bind(this, event));\n    });\n    // We also want to supply the status data as 'response' event to support\n    // the behavior of google-cloud-node expects.\n    // see:\n    // https://github.com/GoogleCloudPlatform/google-cloud-node/pull/1775#issuecomment-259141029\n    // https://github.com/GoogleCloudPlatform/google-cloud-node/blob/116436fa789d8b0f7fc5100b19b424e3ec63e6bf/packages/common/src/grpc-service.js#L355\n    stream.on('metadata', metadata => {\n      // Create a response object with succeeds.\n      // TODO: unify this logic with the decoration of gRPC response when it's\n      // added. see: https://github.com/googleapis/gax-nodejs/issues/65\n      stream.emit('response', {\n        code: 200,\n        details: '',\n        message: 'OK',\n        metadata\n      });\n    });\n  }\n  /**\n   * Specifies the target stream.\n   * @param {ApiCall} apiCall - the API function to be called.\n   * @param {Object} argument - the argument to be passed to the apiCall.\n   */\n  setStream(apiCall, argument) {\n    if (this.type === StreamType.SERVER_STREAMING) {\n      const retryStream = retryRequest(null, {\n        objectMode: true,\n        request: () => {\n          if (this._isCancelCalled) {\n            if (this.stream) {\n              this.stream.cancel();\n            }\n            return;\n          }\n          const stream = apiCall(argument, this._callback);\n          this.stream = stream;\n          this.forwardEvents(stream);\n          return stream;\n        }\n      });\n      this.setReadable(retryStream);\n      return;\n    }\n    const stream = apiCall(argument, this._callback);\n    this.stream = stream;\n    this.forwardEvents(stream);\n    if (this.type === StreamType.CLIENT_STREAMING) {\n      this.setWritable(stream);\n    }\n    if (this.type === StreamType.BIDI_STREAMING) {\n      this.setReadable(stream);\n      this.setWritable(stream);\n    }\n    if (this._isCancelCalled && this.stream) {\n      this.stream.cancel();\n    }\n  }\n}\nexports.StreamProxy = StreamProxy;\nclass GrpcStreamable {\n  /**\n   * An API caller for methods of gRPC streaming.\n   * @private\n   * @constructor\n   * @param {StreamDescriptor} descriptor - the descriptor of the method structure.\n   */\n  constructor(descriptor) {\n    this.descriptor = descriptor;\n  }\n  init(settings, callback) {\n    return new StreamProxy(this.descriptor.type, callback);\n  }\n  wrap(func) {\n    switch (this.descriptor.type) {\n      case StreamType.SERVER_STREAMING:\n        return (argument, metadata, options) => {\n          return func(argument, metadata, options);\n        };\n      case StreamType.CLIENT_STREAMING:\n        return (argument, metadata, options, callback) => {\n          return func(metadata, options, callback);\n        };\n      case StreamType.BIDI_STREAMING:\n        return (argument, metadata, options) => {\n          return func(metadata, options);\n        };\n      default:\n        warnings_1.warn('streaming_wrap_unknown_stream_type', `Unknown stream type: ${this.descriptor.type}`);\n    }\n    return func;\n  }\n  call(apiCall, argument, settings, stream) {\n    stream.setStream(apiCall, argument);\n  }\n  fail(stream, err) {\n    stream.emit('error', err);\n  }\n  result(stream) {\n    return stream;\n  }\n}\nexports.GrpcStreamable = GrpcStreamable;\nclass StreamDescriptor {\n  /**\n   * Describes the structure of gRPC streaming call.\n   * @constructor\n   * @param {StreamType} streamType - the type of streaming.\n   */\n  constructor(streamType) {\n    this.type = streamType;\n  }\n  apiCaller(settings) {\n    // Right now retrying does not work with gRPC-streaming, because retryable\n    // assumes an API call returns an event emitter while gRPC-streaming methods\n    // return Stream.\n    // TODO: support retrying.\n    settings.retry = null;\n    return new GrpcStreamable(this);\n  }\n}\nexports.StreamDescriptor = StreamDescriptor;","map":{"version":3,"names":["warnings_1","require","duplexify","retryRequest","StreamType","exports","StreamProxy","constructor","type","callback","undefined","objectMode","readable","CLIENT_STREAMING","writable","SERVER_STREAMING","_callback","_isCancelCalled","cancel","stream","forwardEvents","eventsToForward","forEach","event","on","emit","bind","metadata","code","details","message","setStream","apiCall","argument","retryStream","request","setReadable","setWritable","BIDI_STREAMING","GrpcStreamable","descriptor","init","settings","wrap","func","options","warn","call","fail","err","result","StreamDescriptor","streamType","apiCaller","retry"],"sources":["../../src/streaming.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}