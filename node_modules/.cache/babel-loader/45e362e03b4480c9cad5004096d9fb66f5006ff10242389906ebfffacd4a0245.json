{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst channel_1 = require(\"./channel\");\nconst constants_1 = require(\"./constants\");\nconst filter_1 = require(\"./filter\");\nconst units = [['m', 1], ['S', 1000], ['M', 60 * 1000], ['H', 60 * 60 * 1000]];\nfunction getDeadline(deadline) {\n  const now = new Date().getTime();\n  const timeoutMs = Math.max(deadline - now, 0);\n  for (const [unit, factor] of units) {\n    const amount = timeoutMs / factor;\n    if (amount < 1e8) {\n      return String(Math.ceil(amount)) + unit;\n    }\n  }\n  throw new Error('Deadline is too far in the future');\n}\nclass DeadlineFilter extends filter_1.BaseFilter {\n  constructor(channel, callStream) {\n    super();\n    this.channel = channel;\n    this.callStream = callStream;\n    this.timer = null;\n    const callDeadline = callStream.getDeadline();\n    if (callDeadline instanceof Date) {\n      this.deadline = callDeadline.getTime();\n    } else {\n      this.deadline = callDeadline;\n    }\n    const now = new Date().getTime();\n    let timeout = this.deadline - now;\n    if (timeout < 0) {\n      timeout = 0;\n    }\n    if (this.deadline !== Infinity) {\n      this.timer = setTimeout(() => {\n        callStream.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, 'Deadline exceeded');\n      }, timeout);\n      callStream.on('status', () => clearTimeout(this.timer));\n    }\n  }\n  sendMetadata(metadata) {\n    if (this.deadline === Infinity) {\n      return metadata;\n    }\n    return new Promise((resolve, reject) => {\n      if (this.channel.getConnectivityState(false) === channel_1.ConnectivityState.READY) {\n        resolve(metadata);\n      } else {\n        const handleStateChange = newState => {\n          if (newState === channel_1.ConnectivityState.READY) {\n            resolve(metadata);\n            this.channel.removeListener('connectivityStateChanged', handleStateChange);\n            this.callStream.removeListener('status', handleStatus);\n          }\n        };\n        const handleStatus = () => {\n          reject(new Error('Call ended'));\n          this.channel.removeListener('connectivityStateChanged', handleStateChange);\n        };\n        this.channel.on('connectivityStateChanged', handleStateChange);\n        this.callStream.once('status', handleStatus);\n      }\n    }).then(finalMetadata => {\n      const timeoutString = getDeadline(this.deadline);\n      finalMetadata.set('grpc-timeout', timeoutString);\n      return finalMetadata;\n    });\n  }\n}\nexports.DeadlineFilter = DeadlineFilter;\nclass DeadlineFilterFactory {\n  constructor(channel) {\n    this.channel = channel;\n  }\n  createFilter(callStream) {\n    return new DeadlineFilter(this.channel, callStream);\n  }\n}\nexports.DeadlineFilterFactory = DeadlineFilterFactory;","map":{"version":3,"names":["Object","defineProperty","exports","value","channel_1","require","constants_1","filter_1","units","getDeadline","deadline","now","Date","getTime","timeoutMs","Math","max","unit","factor","amount","String","ceil","Error","DeadlineFilter","BaseFilter","constructor","channel","callStream","timer","callDeadline","timeout","Infinity","setTimeout","cancelWithStatus","Status","DEADLINE_EXCEEDED","on","clearTimeout","sendMetadata","metadata","Promise","resolve","reject","getConnectivityState","ConnectivityState","READY","handleStateChange","newState","removeListener","handleStatus","once","then","finalMetadata","timeoutString","set","DeadlineFilterFactory","createFilter"],"sources":["/var/www/html/project/Dash_Vuexy-master/node_modules/@grpc/grpc-js/build/src/deadline-filter.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst channel_1 = require(\"./channel\");\nconst constants_1 = require(\"./constants\");\nconst filter_1 = require(\"./filter\");\nconst units = [['m', 1], ['S', 1000], ['M', 60 * 1000], ['H', 60 * 60 * 1000]];\nfunction getDeadline(deadline) {\n    const now = (new Date()).getTime();\n    const timeoutMs = Math.max(deadline - now, 0);\n    for (const [unit, factor] of units) {\n        const amount = timeoutMs / factor;\n        if (amount < 1e8) {\n            return String(Math.ceil(amount)) + unit;\n        }\n    }\n    throw new Error('Deadline is too far in the future');\n}\nclass DeadlineFilter extends filter_1.BaseFilter {\n    constructor(channel, callStream) {\n        super();\n        this.channel = channel;\n        this.callStream = callStream;\n        this.timer = null;\n        const callDeadline = callStream.getDeadline();\n        if (callDeadline instanceof Date) {\n            this.deadline = callDeadline.getTime();\n        }\n        else {\n            this.deadline = callDeadline;\n        }\n        const now = (new Date()).getTime();\n        let timeout = this.deadline - now;\n        if (timeout < 0) {\n            timeout = 0;\n        }\n        if (this.deadline !== Infinity) {\n            this.timer = setTimeout(() => {\n                callStream.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, 'Deadline exceeded');\n            }, timeout);\n            callStream.on('status', () => clearTimeout(this.timer));\n        }\n    }\n    sendMetadata(metadata) {\n        if (this.deadline === Infinity) {\n            return metadata;\n        }\n        return new Promise((resolve, reject) => {\n            if (this.channel.getConnectivityState(false) ===\n                channel_1.ConnectivityState.READY) {\n                resolve(metadata);\n            }\n            else {\n                const handleStateChange = (newState) => {\n                    if (newState === channel_1.ConnectivityState.READY) {\n                        resolve(metadata);\n                        this.channel.removeListener('connectivityStateChanged', handleStateChange);\n                        this.callStream.removeListener('status', handleStatus);\n                    }\n                };\n                const handleStatus = () => {\n                    reject(new Error('Call ended'));\n                    this.channel.removeListener('connectivityStateChanged', handleStateChange);\n                };\n                this.channel.on('connectivityStateChanged', handleStateChange);\n                this.callStream.once('status', handleStatus);\n            }\n        })\n            .then((finalMetadata) => {\n            const timeoutString = getDeadline(this.deadline);\n            finalMetadata.set('grpc-timeout', timeoutString);\n            return finalMetadata;\n        });\n    }\n}\nexports.DeadlineFilter = DeadlineFilter;\nclass DeadlineFilterFactory {\n    constructor(channel) {\n        this.channel = channel;\n    }\n    createFilter(callStream) {\n        return new DeadlineFilter(this.channel, callStream);\n    }\n}\nexports.DeadlineFilterFactory = DeadlineFilterFactory;\n//# sourceMappingURL=deadline-filter.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}