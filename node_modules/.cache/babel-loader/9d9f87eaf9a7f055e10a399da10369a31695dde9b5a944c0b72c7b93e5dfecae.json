{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Wraps a callback style function to conditionally return a promise.\n *\n * @param {function} originalMethod - The method to promisify.\n * @param {object=} options - Promise options.\n * @param {boolean} options.singular - Resolve the promise with single arg instead of an array.\n * @return {function} wrapped\n */\nfunction promisify(originalMethod, options) {\n  if (originalMethod.promisified_) {\n    return originalMethod;\n  }\n  options = options || {};\n  const slice = Array.prototype.slice;\n  // tslint:disable-next-line:no-any\n  const wrapper = function () {\n    const context = this;\n    let last;\n    for (last = arguments.length - 1; last >= 0; last--) {\n      const arg = arguments[last];\n      if (typeof arg === 'undefined') {\n        continue; // skip trailing undefined.\n      }\n\n      if (typeof arg !== 'function') {\n        break; // non-callback last argument found.\n      }\n\n      return originalMethod.apply(context, arguments);\n    }\n    // peel trailing undefined.\n    const args = slice.call(arguments, 0, last + 1);\n    // tslint:disable-next-line:variable-name\n    let PromiseCtor = Promise;\n    // Because dedupe will likely create a single install of\n    // @google-cloud/common to be shared amongst all modules, we need to\n    // localize it at the Service level.\n    if (context && context.Promise) {\n      PromiseCtor = context.Promise;\n    }\n    return new PromiseCtor((resolve, reject) => {\n      // tslint:disable-next-line:no-any\n      args.push((...args) => {\n        const callbackArgs = slice.call(args);\n        const err = callbackArgs.shift();\n        if (err) {\n          return reject(err);\n        }\n        if (options.singular && callbackArgs.length === 1) {\n          resolve(callbackArgs[0]);\n        } else {\n          resolve(callbackArgs);\n        }\n      });\n      originalMethod.apply(context, args);\n    });\n  };\n  wrapper.promisified_ = true;\n  return wrapper;\n}\nexports.promisify = promisify;\n/**\n * Promisifies certain Class methods. This will not promisify private or\n * streaming methods.\n *\n * @param {module:common/service} Class - Service class.\n * @param {object=} options - Configuration object.\n */\n// tslint:disable-next-line:variable-name\nfunction promisifyAll(Class, options) {\n  const exclude = options && options.exclude || [];\n  const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);\n  const methods = ownPropertyNames.filter(methodName => {\n    // clang-format off\n    return typeof Class.prototype[methodName] === 'function' &&\n    // is it a function?\n    !/(^_|(Stream|_)|promise$)|^constructor$/.test(methodName) &&\n    // is it promisable?\n    exclude.indexOf(methodName) === -1; // is it blacklisted?\n    // clang-format on\n  });\n\n  methods.forEach(methodName => {\n    const originalMethod = Class.prototype[methodName];\n    if (!originalMethod.promisified_) {\n      Class.prototype[methodName] = exports.promisify(originalMethod, options);\n    }\n  });\n}\nexports.promisifyAll = promisifyAll;\n/**\n * Wraps a promisy type function to conditionally call a callback function.\n *\n * @param {function} originalMethod - The method to callbackify.\n * @param {object=} options - Callback options.\n * @param {boolean} options.singular - Pass to the callback a single arg instead of an array.\n * @return {function} wrapped\n */\nfunction callbackify(originalMethod) {\n  if (originalMethod.callbackified_) {\n    return originalMethod;\n  }\n  // tslint:disable-next-line:no-any\n  const wrapper = function () {\n    const context = this;\n    if (typeof arguments[arguments.length - 1] !== 'function') {\n      return originalMethod.apply(context, arguments);\n    }\n    const cb = Array.prototype.pop.call(arguments);\n    originalMethod.apply(context, arguments)\n    // tslint:disable-next-line:no-any\n    .then(res => {\n      res = Array.isArray(res) ? res : [res];\n      cb(null, ...res);\n    }, err => cb(err));\n  };\n  wrapper.callbackified_ = true;\n  return wrapper;\n}\nexports.callbackify = callbackify;\n/**\n * Callbackifies certain Class methods. This will not callbackify private or\n * streaming methods.\n *\n * @param {module:common/service} Class - Service class.\n * @param {object=} options - Configuration object.\n */\nfunction callbackifyAll(\n// tslint:disable-next-line:variable-name\nClass, options) {\n  const exclude = options && options.exclude || [];\n  const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);\n  const methods = ownPropertyNames.filter(methodName => {\n    // clang-format off\n    return typeof Class.prototype[methodName] === 'function' &&\n    // is it a function?\n    !/^_|(Stream|_)|^constructor$/.test(methodName) &&\n    // is it callbackifyable?\n    exclude.indexOf(methodName) === -1; // is it blacklisted?\n    // clang-format on\n  });\n\n  methods.forEach(methodName => {\n    const originalMethod = Class.prototype[methodName];\n    if (!originalMethod.callbackified_) {\n      Class.prototype[methodName] = exports.callbackify(originalMethod);\n    }\n  });\n}\nexports.callbackifyAll = callbackifyAll;","map":{"version":3,"names":["require","Object","defineProperty","exports","value","promisify","originalMethod","options","promisified_","slice","Array","prototype","wrapper","context","last","arguments","length","arg","apply","args","call","PromiseCtor","Promise","resolve","reject","push","callbackArgs","err","shift","singular","promisifyAll","Class","exclude","ownPropertyNames","getOwnPropertyNames","methods","filter","methodName","test","indexOf","forEach","callbackify","callbackified_","cb","pop","then","res","isArray","callbackifyAll"],"sources":["/var/www/html/project/Dash_Vuexy-master/node_modules/@google-cloud/promisify/build/src/index.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Wraps a callback style function to conditionally return a promise.\n *\n * @param {function} originalMethod - The method to promisify.\n * @param {object=} options - Promise options.\n * @param {boolean} options.singular - Resolve the promise with single arg instead of an array.\n * @return {function} wrapped\n */\nfunction promisify(originalMethod, options) {\n    if (originalMethod.promisified_) {\n        return originalMethod;\n    }\n    options = options || {};\n    const slice = Array.prototype.slice;\n    // tslint:disable-next-line:no-any\n    const wrapper = function () {\n        const context = this;\n        let last;\n        for (last = arguments.length - 1; last >= 0; last--) {\n            const arg = arguments[last];\n            if (typeof arg === 'undefined') {\n                continue; // skip trailing undefined.\n            }\n            if (typeof arg !== 'function') {\n                break; // non-callback last argument found.\n            }\n            return originalMethod.apply(context, arguments);\n        }\n        // peel trailing undefined.\n        const args = slice.call(arguments, 0, last + 1);\n        // tslint:disable-next-line:variable-name\n        let PromiseCtor = Promise;\n        // Because dedupe will likely create a single install of\n        // @google-cloud/common to be shared amongst all modules, we need to\n        // localize it at the Service level.\n        if (context && context.Promise) {\n            PromiseCtor = context.Promise;\n        }\n        return new PromiseCtor((resolve, reject) => {\n            // tslint:disable-next-line:no-any\n            args.push((...args) => {\n                const callbackArgs = slice.call(args);\n                const err = callbackArgs.shift();\n                if (err) {\n                    return reject(err);\n                }\n                if (options.singular && callbackArgs.length === 1) {\n                    resolve(callbackArgs[0]);\n                }\n                else {\n                    resolve(callbackArgs);\n                }\n            });\n            originalMethod.apply(context, args);\n        });\n    };\n    wrapper.promisified_ = true;\n    return wrapper;\n}\nexports.promisify = promisify;\n/**\n * Promisifies certain Class methods. This will not promisify private or\n * streaming methods.\n *\n * @param {module:common/service} Class - Service class.\n * @param {object=} options - Configuration object.\n */\n// tslint:disable-next-line:variable-name\nfunction promisifyAll(Class, options) {\n    const exclude = (options && options.exclude) || [];\n    const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);\n    const methods = ownPropertyNames.filter((methodName) => {\n        // clang-format off\n        return (typeof Class.prototype[methodName] === 'function' && // is it a function?\n            !/(^_|(Stream|_)|promise$)|^constructor$/.test(methodName) && // is it promisable?\n            exclude.indexOf(methodName) === -1); // is it blacklisted?\n        // clang-format on\n    });\n    methods.forEach((methodName) => {\n        const originalMethod = Class.prototype[methodName];\n        if (!originalMethod.promisified_) {\n            Class.prototype[methodName] = exports.promisify(originalMethod, options);\n        }\n    });\n}\nexports.promisifyAll = promisifyAll;\n/**\n * Wraps a promisy type function to conditionally call a callback function.\n *\n * @param {function} originalMethod - The method to callbackify.\n * @param {object=} options - Callback options.\n * @param {boolean} options.singular - Pass to the callback a single arg instead of an array.\n * @return {function} wrapped\n */\nfunction callbackify(originalMethod) {\n    if (originalMethod.callbackified_) {\n        return originalMethod;\n    }\n    // tslint:disable-next-line:no-any\n    const wrapper = function () {\n        const context = this;\n        if (typeof arguments[arguments.length - 1] !== 'function') {\n            return originalMethod.apply(context, arguments);\n        }\n        const cb = Array.prototype.pop.call(arguments);\n        originalMethod\n            .apply(context, arguments)\n            // tslint:disable-next-line:no-any\n            .then((res) => {\n            res = Array.isArray(res) ? res : [res];\n            cb(null, ...res);\n        }, (err) => cb(err));\n    };\n    wrapper.callbackified_ = true;\n    return wrapper;\n}\nexports.callbackify = callbackify;\n/**\n * Callbackifies certain Class methods. This will not callbackify private or\n * streaming methods.\n *\n * @param {module:common/service} Class - Service class.\n * @param {object=} options - Configuration object.\n */\nfunction callbackifyAll(\n// tslint:disable-next-line:variable-name\nClass, options) {\n    const exclude = (options && options.exclude) || [];\n    const ownPropertyNames = Object.getOwnPropertyNames(Class.prototype);\n    const methods = ownPropertyNames.filter((methodName) => {\n        // clang-format off\n        return (typeof Class.prototype[methodName] === 'function' && // is it a function?\n            !/^_|(Stream|_)|^constructor$/.test(methodName) && // is it callbackifyable?\n            exclude.indexOf(methodName) === -1); // is it blacklisted?\n        // clang-format on\n    });\n    methods.forEach((methodName) => {\n        const originalMethod = Class.prototype[methodName];\n        if (!originalMethod.callbackified_) {\n            Class.prototype[methodName] = exports.callbackify(originalMethod);\n        }\n    });\n}\nexports.callbackifyAll = callbackifyAll;\n//# sourceMappingURL=index.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}