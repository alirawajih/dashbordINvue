{"ast":null,"code":"/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n$root.grpc = function () {\n  /**\n   * Namespace grpc.\n   * @exports grpc\n   * @namespace\n   */\n  var grpc = {};\n  grpc.gcp = function () {\n    /**\n     * Namespace gcp.\n     * @memberof grpc\n     * @namespace\n     */\n    var gcp = {};\n    gcp.ApiConfig = function () {\n      /**\n       * Properties of an ApiConfig.\n       * @memberof grpc.gcp\n       * @interface IApiConfig\n       * @property {grpc.gcp.IChannelPoolConfig|null} [channelPool] ApiConfig channelPool\n       * @property {Array.<grpc.gcp.IMethodConfig>|null} [method] ApiConfig method\n       */\n\n      /**\n       * Constructs a new ApiConfig.\n       * @memberof grpc.gcp\n       * @classdesc Represents an ApiConfig.\n       * @implements IApiConfig\n       * @constructor\n       * @param {grpc.gcp.IApiConfig=} [properties] Properties to set\n       */\n      function ApiConfig(properties) {\n        this.method = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * ApiConfig channelPool.\n       * @member {grpc.gcp.IChannelPoolConfig|null|undefined} channelPool\n       * @memberof grpc.gcp.ApiConfig\n       * @instance\n       */\n      ApiConfig.prototype.channelPool = null;\n\n      /**\n       * ApiConfig method.\n       * @member {Array.<grpc.gcp.IMethodConfig>} method\n       * @memberof grpc.gcp.ApiConfig\n       * @instance\n       */\n      ApiConfig.prototype.method = $util.emptyArray;\n\n      /**\n       * Creates a new ApiConfig instance using the specified properties.\n       * @function create\n       * @memberof grpc.gcp.ApiConfig\n       * @static\n       * @param {grpc.gcp.IApiConfig=} [properties] Properties to set\n       * @returns {grpc.gcp.ApiConfig} ApiConfig instance\n       */\n      ApiConfig.create = function create(properties) {\n        return new ApiConfig(properties);\n      };\n\n      /**\n       * Encodes the specified ApiConfig message. Does not implicitly {@link grpc.gcp.ApiConfig.verify|verify} messages.\n       * @function encode\n       * @memberof grpc.gcp.ApiConfig\n       * @static\n       * @param {grpc.gcp.IApiConfig} message ApiConfig message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      ApiConfig.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.channelPool != null && message.hasOwnProperty(\"channelPool\")) $root.grpc.gcp.ChannelPoolConfig.encode(message.channelPool, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.method != null && message.method.length) for (var i = 0; i < message.method.length; ++i) $root.grpc.gcp.MethodConfig.encode(message.method[i], writer.uint32( /* id 1001, wireType 2 =*/8010).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified ApiConfig message, length delimited. Does not implicitly {@link grpc.gcp.ApiConfig.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof grpc.gcp.ApiConfig\n       * @static\n       * @param {grpc.gcp.IApiConfig} message ApiConfig message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      ApiConfig.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes an ApiConfig message from the specified reader or buffer.\n       * @function decode\n       * @memberof grpc.gcp.ApiConfig\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {grpc.gcp.ApiConfig} ApiConfig\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      ApiConfig.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.grpc.gcp.ApiConfig();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 2:\n              message.channelPool = $root.grpc.gcp.ChannelPoolConfig.decode(reader, reader.uint32());\n              break;\n            case 1001:\n              if (!(message.method && message.method.length)) message.method = [];\n              message.method.push($root.grpc.gcp.MethodConfig.decode(reader, reader.uint32()));\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes an ApiConfig message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof grpc.gcp.ApiConfig\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {grpc.gcp.ApiConfig} ApiConfig\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      ApiConfig.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies an ApiConfig message.\n       * @function verify\n       * @memberof grpc.gcp.ApiConfig\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      ApiConfig.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.channelPool != null && message.hasOwnProperty(\"channelPool\")) {\n          var error = $root.grpc.gcp.ChannelPoolConfig.verify(message.channelPool);\n          if (error) return \"channelPool.\" + error;\n        }\n        if (message.method != null && message.hasOwnProperty(\"method\")) {\n          if (!Array.isArray(message.method)) return \"method: array expected\";\n          for (var i = 0; i < message.method.length; ++i) {\n            var error = $root.grpc.gcp.MethodConfig.verify(message.method[i]);\n            if (error) return \"method.\" + error;\n          }\n        }\n        return null;\n      };\n\n      /**\n       * Creates an ApiConfig message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof grpc.gcp.ApiConfig\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {grpc.gcp.ApiConfig} ApiConfig\n       */\n      ApiConfig.fromObject = function fromObject(object) {\n        if (object instanceof $root.grpc.gcp.ApiConfig) return object;\n        var message = new $root.grpc.gcp.ApiConfig();\n        if (object.channelPool != null) {\n          if (typeof object.channelPool !== \"object\") throw TypeError(\".grpc.gcp.ApiConfig.channelPool: object expected\");\n          message.channelPool = $root.grpc.gcp.ChannelPoolConfig.fromObject(object.channelPool);\n        }\n        if (object.method) {\n          if (!Array.isArray(object.method)) throw TypeError(\".grpc.gcp.ApiConfig.method: array expected\");\n          message.method = [];\n          for (var i = 0; i < object.method.length; ++i) {\n            if (typeof object.method[i] !== \"object\") throw TypeError(\".grpc.gcp.ApiConfig.method: object expected\");\n            message.method[i] = $root.grpc.gcp.MethodConfig.fromObject(object.method[i]);\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from an ApiConfig message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof grpc.gcp.ApiConfig\n       * @static\n       * @param {grpc.gcp.ApiConfig} message ApiConfig\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      ApiConfig.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) object.method = [];\n        if (options.defaults) object.channelPool = null;\n        if (message.channelPool != null && message.hasOwnProperty(\"channelPool\")) object.channelPool = $root.grpc.gcp.ChannelPoolConfig.toObject(message.channelPool, options);\n        if (message.method && message.method.length) {\n          object.method = [];\n          for (var j = 0; j < message.method.length; ++j) object.method[j] = $root.grpc.gcp.MethodConfig.toObject(message.method[j], options);\n        }\n        return object;\n      };\n\n      /**\n       * Converts this ApiConfig to JSON.\n       * @function toJSON\n       * @memberof grpc.gcp.ApiConfig\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      ApiConfig.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return ApiConfig;\n    }();\n    gcp.ChannelPoolConfig = function () {\n      /**\n       * Properties of a ChannelPoolConfig.\n       * @memberof grpc.gcp\n       * @interface IChannelPoolConfig\n       * @property {number|null} [maxSize] ChannelPoolConfig maxSize\n       * @property {number|Long|null} [idleTimeout] ChannelPoolConfig idleTimeout\n       * @property {number|null} [maxConcurrentStreamsLowWatermark] ChannelPoolConfig maxConcurrentStreamsLowWatermark\n       */\n\n      /**\n       * Constructs a new ChannelPoolConfig.\n       * @memberof grpc.gcp\n       * @classdesc Represents a ChannelPoolConfig.\n       * @implements IChannelPoolConfig\n       * @constructor\n       * @param {grpc.gcp.IChannelPoolConfig=} [properties] Properties to set\n       */\n      function ChannelPoolConfig(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * ChannelPoolConfig maxSize.\n       * @member {number} maxSize\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @instance\n       */\n      ChannelPoolConfig.prototype.maxSize = 0;\n\n      /**\n       * ChannelPoolConfig idleTimeout.\n       * @member {number|Long} idleTimeout\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @instance\n       */\n      ChannelPoolConfig.prototype.idleTimeout = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n      /**\n       * ChannelPoolConfig maxConcurrentStreamsLowWatermark.\n       * @member {number} maxConcurrentStreamsLowWatermark\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @instance\n       */\n      ChannelPoolConfig.prototype.maxConcurrentStreamsLowWatermark = 0;\n\n      /**\n       * Creates a new ChannelPoolConfig instance using the specified properties.\n       * @function create\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @static\n       * @param {grpc.gcp.IChannelPoolConfig=} [properties] Properties to set\n       * @returns {grpc.gcp.ChannelPoolConfig} ChannelPoolConfig instance\n       */\n      ChannelPoolConfig.create = function create(properties) {\n        return new ChannelPoolConfig(properties);\n      };\n\n      /**\n       * Encodes the specified ChannelPoolConfig message. Does not implicitly {@link grpc.gcp.ChannelPoolConfig.verify|verify} messages.\n       * @function encode\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @static\n       * @param {grpc.gcp.IChannelPoolConfig} message ChannelPoolConfig message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      ChannelPoolConfig.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.maxSize != null && message.hasOwnProperty(\"maxSize\")) writer.uint32( /* id 1, wireType 0 =*/8).uint32(message.maxSize);\n        if (message.idleTimeout != null && message.hasOwnProperty(\"idleTimeout\")) writer.uint32( /* id 2, wireType 0 =*/16).uint64(message.idleTimeout);\n        if (message.maxConcurrentStreamsLowWatermark != null && message.hasOwnProperty(\"maxConcurrentStreamsLowWatermark\")) writer.uint32( /* id 3, wireType 0 =*/24).uint32(message.maxConcurrentStreamsLowWatermark);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified ChannelPoolConfig message, length delimited. Does not implicitly {@link grpc.gcp.ChannelPoolConfig.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @static\n       * @param {grpc.gcp.IChannelPoolConfig} message ChannelPoolConfig message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      ChannelPoolConfig.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a ChannelPoolConfig message from the specified reader or buffer.\n       * @function decode\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {grpc.gcp.ChannelPoolConfig} ChannelPoolConfig\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      ChannelPoolConfig.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.grpc.gcp.ChannelPoolConfig();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              message.maxSize = reader.uint32();\n              break;\n            case 2:\n              message.idleTimeout = reader.uint64();\n              break;\n            case 3:\n              message.maxConcurrentStreamsLowWatermark = reader.uint32();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a ChannelPoolConfig message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {grpc.gcp.ChannelPoolConfig} ChannelPoolConfig\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      ChannelPoolConfig.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a ChannelPoolConfig message.\n       * @function verify\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      ChannelPoolConfig.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.maxSize != null && message.hasOwnProperty(\"maxSize\")) if (!$util.isInteger(message.maxSize)) return \"maxSize: integer expected\";\n        if (message.idleTimeout != null && message.hasOwnProperty(\"idleTimeout\")) if (!$util.isInteger(message.idleTimeout) && !(message.idleTimeout && $util.isInteger(message.idleTimeout.low) && $util.isInteger(message.idleTimeout.high))) return \"idleTimeout: integer|Long expected\";\n        if (message.maxConcurrentStreamsLowWatermark != null && message.hasOwnProperty(\"maxConcurrentStreamsLowWatermark\")) if (!$util.isInteger(message.maxConcurrentStreamsLowWatermark)) return \"maxConcurrentStreamsLowWatermark: integer expected\";\n        return null;\n      };\n\n      /**\n       * Creates a ChannelPoolConfig message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {grpc.gcp.ChannelPoolConfig} ChannelPoolConfig\n       */\n      ChannelPoolConfig.fromObject = function fromObject(object) {\n        if (object instanceof $root.grpc.gcp.ChannelPoolConfig) return object;\n        var message = new $root.grpc.gcp.ChannelPoolConfig();\n        if (object.maxSize != null) message.maxSize = object.maxSize >>> 0;\n        if (object.idleTimeout != null) if ($util.Long) (message.idleTimeout = $util.Long.fromValue(object.idleTimeout)).unsigned = true;else if (typeof object.idleTimeout === \"string\") message.idleTimeout = parseInt(object.idleTimeout, 10);else if (typeof object.idleTimeout === \"number\") message.idleTimeout = object.idleTimeout;else if (typeof object.idleTimeout === \"object\") message.idleTimeout = new $util.LongBits(object.idleTimeout.low >>> 0, object.idleTimeout.high >>> 0).toNumber(true);\n        if (object.maxConcurrentStreamsLowWatermark != null) message.maxConcurrentStreamsLowWatermark = object.maxConcurrentStreamsLowWatermark >>> 0;\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a ChannelPoolConfig message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @static\n       * @param {grpc.gcp.ChannelPoolConfig} message ChannelPoolConfig\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      ChannelPoolConfig.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.maxSize = 0;\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, true);\n            object.idleTimeout = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.idleTimeout = options.longs === String ? \"0\" : 0;\n          object.maxConcurrentStreamsLowWatermark = 0;\n        }\n        if (message.maxSize != null && message.hasOwnProperty(\"maxSize\")) object.maxSize = message.maxSize;\n        if (message.idleTimeout != null && message.hasOwnProperty(\"idleTimeout\")) if (typeof message.idleTimeout === \"number\") object.idleTimeout = options.longs === String ? String(message.idleTimeout) : message.idleTimeout;else object.idleTimeout = options.longs === String ? $util.Long.prototype.toString.call(message.idleTimeout) : options.longs === Number ? new $util.LongBits(message.idleTimeout.low >>> 0, message.idleTimeout.high >>> 0).toNumber(true) : message.idleTimeout;\n        if (message.maxConcurrentStreamsLowWatermark != null && message.hasOwnProperty(\"maxConcurrentStreamsLowWatermark\")) object.maxConcurrentStreamsLowWatermark = message.maxConcurrentStreamsLowWatermark;\n        return object;\n      };\n\n      /**\n       * Converts this ChannelPoolConfig to JSON.\n       * @function toJSON\n       * @memberof grpc.gcp.ChannelPoolConfig\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      ChannelPoolConfig.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return ChannelPoolConfig;\n    }();\n    gcp.MethodConfig = function () {\n      /**\n       * Properties of a MethodConfig.\n       * @memberof grpc.gcp\n       * @interface IMethodConfig\n       * @property {Array.<string>|null} [name] MethodConfig name\n       * @property {grpc.gcp.IAffinityConfig|null} [affinity] MethodConfig affinity\n       */\n\n      /**\n       * Constructs a new MethodConfig.\n       * @memberof grpc.gcp\n       * @classdesc Represents a MethodConfig.\n       * @implements IMethodConfig\n       * @constructor\n       * @param {grpc.gcp.IMethodConfig=} [properties] Properties to set\n       */\n      function MethodConfig(properties) {\n        this.name = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * MethodConfig name.\n       * @member {Array.<string>} name\n       * @memberof grpc.gcp.MethodConfig\n       * @instance\n       */\n      MethodConfig.prototype.name = $util.emptyArray;\n\n      /**\n       * MethodConfig affinity.\n       * @member {grpc.gcp.IAffinityConfig|null|undefined} affinity\n       * @memberof grpc.gcp.MethodConfig\n       * @instance\n       */\n      MethodConfig.prototype.affinity = null;\n\n      /**\n       * Creates a new MethodConfig instance using the specified properties.\n       * @function create\n       * @memberof grpc.gcp.MethodConfig\n       * @static\n       * @param {grpc.gcp.IMethodConfig=} [properties] Properties to set\n       * @returns {grpc.gcp.MethodConfig} MethodConfig instance\n       */\n      MethodConfig.create = function create(properties) {\n        return new MethodConfig(properties);\n      };\n\n      /**\n       * Encodes the specified MethodConfig message. Does not implicitly {@link grpc.gcp.MethodConfig.verify|verify} messages.\n       * @function encode\n       * @memberof grpc.gcp.MethodConfig\n       * @static\n       * @param {grpc.gcp.IMethodConfig} message MethodConfig message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      MethodConfig.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.name != null && message.name.length) for (var i = 0; i < message.name.length; ++i) writer.uint32( /* id 1, wireType 2 =*/10).string(message.name[i]);\n        if (message.affinity != null && message.hasOwnProperty(\"affinity\")) $root.grpc.gcp.AffinityConfig.encode(message.affinity, writer.uint32( /* id 1001, wireType 2 =*/8010).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Encodes the specified MethodConfig message, length delimited. Does not implicitly {@link grpc.gcp.MethodConfig.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof grpc.gcp.MethodConfig\n       * @static\n       * @param {grpc.gcp.IMethodConfig} message MethodConfig message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      MethodConfig.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes a MethodConfig message from the specified reader or buffer.\n       * @function decode\n       * @memberof grpc.gcp.MethodConfig\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {grpc.gcp.MethodConfig} MethodConfig\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      MethodConfig.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.grpc.gcp.MethodConfig();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.name && message.name.length)) message.name = [];\n              message.name.push(reader.string());\n              break;\n            case 1001:\n              message.affinity = $root.grpc.gcp.AffinityConfig.decode(reader, reader.uint32());\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes a MethodConfig message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof grpc.gcp.MethodConfig\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {grpc.gcp.MethodConfig} MethodConfig\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      MethodConfig.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies a MethodConfig message.\n       * @function verify\n       * @memberof grpc.gcp.MethodConfig\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      MethodConfig.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\")) {\n          if (!Array.isArray(message.name)) return \"name: array expected\";\n          for (var i = 0; i < message.name.length; ++i) if (!$util.isString(message.name[i])) return \"name: string[] expected\";\n        }\n        if (message.affinity != null && message.hasOwnProperty(\"affinity\")) {\n          var error = $root.grpc.gcp.AffinityConfig.verify(message.affinity);\n          if (error) return \"affinity.\" + error;\n        }\n        return null;\n      };\n\n      /**\n       * Creates a MethodConfig message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof grpc.gcp.MethodConfig\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {grpc.gcp.MethodConfig} MethodConfig\n       */\n      MethodConfig.fromObject = function fromObject(object) {\n        if (object instanceof $root.grpc.gcp.MethodConfig) return object;\n        var message = new $root.grpc.gcp.MethodConfig();\n        if (object.name) {\n          if (!Array.isArray(object.name)) throw TypeError(\".grpc.gcp.MethodConfig.name: array expected\");\n          message.name = [];\n          for (var i = 0; i < object.name.length; ++i) message.name[i] = String(object.name[i]);\n        }\n        if (object.affinity != null) {\n          if (typeof object.affinity !== \"object\") throw TypeError(\".grpc.gcp.MethodConfig.affinity: object expected\");\n          message.affinity = $root.grpc.gcp.AffinityConfig.fromObject(object.affinity);\n        }\n        return message;\n      };\n\n      /**\n       * Creates a plain object from a MethodConfig message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof grpc.gcp.MethodConfig\n       * @static\n       * @param {grpc.gcp.MethodConfig} message MethodConfig\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      MethodConfig.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) object.name = [];\n        if (options.defaults) object.affinity = null;\n        if (message.name && message.name.length) {\n          object.name = [];\n          for (var j = 0; j < message.name.length; ++j) object.name[j] = message.name[j];\n        }\n        if (message.affinity != null && message.hasOwnProperty(\"affinity\")) object.affinity = $root.grpc.gcp.AffinityConfig.toObject(message.affinity, options);\n        return object;\n      };\n\n      /**\n       * Converts this MethodConfig to JSON.\n       * @function toJSON\n       * @memberof grpc.gcp.MethodConfig\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      MethodConfig.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return MethodConfig;\n    }();\n    gcp.AffinityConfig = function () {\n      /**\n       * Properties of an AffinityConfig.\n       * @memberof grpc.gcp\n       * @interface IAffinityConfig\n       * @property {grpc.gcp.AffinityConfig.Command|null} [command] AffinityConfig command\n       * @property {string|null} [affinityKey] AffinityConfig affinityKey\n       */\n\n      /**\n       * Constructs a new AffinityConfig.\n       * @memberof grpc.gcp\n       * @classdesc Represents an AffinityConfig.\n       * @implements IAffinityConfig\n       * @constructor\n       * @param {grpc.gcp.IAffinityConfig=} [properties] Properties to set\n       */\n      function AffinityConfig(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * AffinityConfig command.\n       * @member {grpc.gcp.AffinityConfig.Command} command\n       * @memberof grpc.gcp.AffinityConfig\n       * @instance\n       */\n      AffinityConfig.prototype.command = 0;\n\n      /**\n       * AffinityConfig affinityKey.\n       * @member {string} affinityKey\n       * @memberof grpc.gcp.AffinityConfig\n       * @instance\n       */\n      AffinityConfig.prototype.affinityKey = \"\";\n\n      /**\n       * Creates a new AffinityConfig instance using the specified properties.\n       * @function create\n       * @memberof grpc.gcp.AffinityConfig\n       * @static\n       * @param {grpc.gcp.IAffinityConfig=} [properties] Properties to set\n       * @returns {grpc.gcp.AffinityConfig} AffinityConfig instance\n       */\n      AffinityConfig.create = function create(properties) {\n        return new AffinityConfig(properties);\n      };\n\n      /**\n       * Encodes the specified AffinityConfig message. Does not implicitly {@link grpc.gcp.AffinityConfig.verify|verify} messages.\n       * @function encode\n       * @memberof grpc.gcp.AffinityConfig\n       * @static\n       * @param {grpc.gcp.IAffinityConfig} message AffinityConfig message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      AffinityConfig.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.command != null && message.hasOwnProperty(\"command\")) writer.uint32( /* id 2, wireType 0 =*/16).int32(message.command);\n        if (message.affinityKey != null && message.hasOwnProperty(\"affinityKey\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.affinityKey);\n        return writer;\n      };\n\n      /**\n       * Encodes the specified AffinityConfig message, length delimited. Does not implicitly {@link grpc.gcp.AffinityConfig.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof grpc.gcp.AffinityConfig\n       * @static\n       * @param {grpc.gcp.IAffinityConfig} message AffinityConfig message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      AffinityConfig.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n\n      /**\n       * Decodes an AffinityConfig message from the specified reader or buffer.\n       * @function decode\n       * @memberof grpc.gcp.AffinityConfig\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {grpc.gcp.AffinityConfig} AffinityConfig\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      AffinityConfig.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.grpc.gcp.AffinityConfig();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 2:\n              message.command = reader.int32();\n              break;\n            case 3:\n              message.affinityKey = reader.string();\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n\n      /**\n       * Decodes an AffinityConfig message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof grpc.gcp.AffinityConfig\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {grpc.gcp.AffinityConfig} AffinityConfig\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      AffinityConfig.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n\n      /**\n       * Verifies an AffinityConfig message.\n       * @function verify\n       * @memberof grpc.gcp.AffinityConfig\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n      AffinityConfig.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.command != null && message.hasOwnProperty(\"command\")) switch (message.command) {\n          default:\n            return \"command: enum value expected\";\n          case 0:\n          case 1:\n          case 2:\n            break;\n        }\n        if (message.affinityKey != null && message.hasOwnProperty(\"affinityKey\")) if (!$util.isString(message.affinityKey)) return \"affinityKey: string expected\";\n        return null;\n      };\n\n      /**\n       * Creates an AffinityConfig message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof grpc.gcp.AffinityConfig\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {grpc.gcp.AffinityConfig} AffinityConfig\n       */\n      AffinityConfig.fromObject = function fromObject(object) {\n        if (object instanceof $root.grpc.gcp.AffinityConfig) return object;\n        var message = new $root.grpc.gcp.AffinityConfig();\n        switch (object.command) {\n          case \"BOUND\":\n          case 0:\n            message.command = 0;\n            break;\n          case \"BIND\":\n          case 1:\n            message.command = 1;\n            break;\n          case \"UNBIND\":\n          case 2:\n            message.command = 2;\n            break;\n        }\n        if (object.affinityKey != null) message.affinityKey = String(object.affinityKey);\n        return message;\n      };\n\n      /**\n       * Creates a plain object from an AffinityConfig message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof grpc.gcp.AffinityConfig\n       * @static\n       * @param {grpc.gcp.AffinityConfig} message AffinityConfig\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      AffinityConfig.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.defaults) {\n          object.command = options.enums === String ? \"BOUND\" : 0;\n          object.affinityKey = \"\";\n        }\n        if (message.command != null && message.hasOwnProperty(\"command\")) object.command = options.enums === String ? $root.grpc.gcp.AffinityConfig.Command[message.command] : message.command;\n        if (message.affinityKey != null && message.hasOwnProperty(\"affinityKey\")) object.affinityKey = message.affinityKey;\n        return object;\n      };\n\n      /**\n       * Converts this AffinityConfig to JSON.\n       * @function toJSON\n       * @memberof grpc.gcp.AffinityConfig\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      AffinityConfig.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      /**\n       * Command enum.\n       * @name grpc.gcp.AffinityConfig.Command\n       * @enum {string}\n       * @property {number} BOUND=0 BOUND value\n       * @property {number} BIND=1 BIND value\n       * @property {number} UNBIND=2 UNBIND value\n       */\n      AffinityConfig.Command = function () {\n        var valuesById = {},\n          values = Object.create(valuesById);\n        values[valuesById[0] = \"BOUND\"] = 0;\n        values[valuesById[1] = \"BIND\"] = 1;\n        values[valuesById[2] = \"UNBIND\"] = 2;\n        return values;\n      }();\n      return AffinityConfig;\n    }();\n    return gcp;\n  }();\n  return grpc;\n}();\nmodule.exports = $root;","map":{"version":3,"names":["require","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","grpc","gcp","ApiConfig","properties","method","keys","Object","i","length","prototype","channelPool","emptyArray","create","encode","message","writer","hasOwnProperty","ChannelPoolConfig","uint32","fork","ldelim","MethodConfig","encodeDelimited","decode","reader","end","undefined","len","pos","tag","push","skipType","decodeDelimited","verify","error","Array","isArray","fromObject","object","TypeError","toObject","options","arrays","defaults","j","toJSON","constructor","toJSONOptions","maxSize","idleTimeout","Long","fromBits","maxConcurrentStreamsLowWatermark","uint64","isInteger","low","high","fromValue","unsigned","parseInt","LongBits","toNumber","long","longs","String","toString","Number","call","name","affinity","string","AffinityConfig","isString","command","affinityKey","int32","enums","Command","valuesById","values","module","exports"],"sources":["/var/www/html/project/Dash_Vuexy-master/node_modules/grpc-gcp/build/src/generated/grpc_gcp.js"],"sourcesContent":["/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.grpc = (function() {\n\n    /**\n     * Namespace grpc.\n     * @exports grpc\n     * @namespace\n     */\n    var grpc = {};\n\n    grpc.gcp = (function() {\n\n        /**\n         * Namespace gcp.\n         * @memberof grpc\n         * @namespace\n         */\n        var gcp = {};\n\n        gcp.ApiConfig = (function() {\n\n            /**\n             * Properties of an ApiConfig.\n             * @memberof grpc.gcp\n             * @interface IApiConfig\n             * @property {grpc.gcp.IChannelPoolConfig|null} [channelPool] ApiConfig channelPool\n             * @property {Array.<grpc.gcp.IMethodConfig>|null} [method] ApiConfig method\n             */\n\n            /**\n             * Constructs a new ApiConfig.\n             * @memberof grpc.gcp\n             * @classdesc Represents an ApiConfig.\n             * @implements IApiConfig\n             * @constructor\n             * @param {grpc.gcp.IApiConfig=} [properties] Properties to set\n             */\n            function ApiConfig(properties) {\n                this.method = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ApiConfig channelPool.\n             * @member {grpc.gcp.IChannelPoolConfig|null|undefined} channelPool\n             * @memberof grpc.gcp.ApiConfig\n             * @instance\n             */\n            ApiConfig.prototype.channelPool = null;\n\n            /**\n             * ApiConfig method.\n             * @member {Array.<grpc.gcp.IMethodConfig>} method\n             * @memberof grpc.gcp.ApiConfig\n             * @instance\n             */\n            ApiConfig.prototype.method = $util.emptyArray;\n\n            /**\n             * Creates a new ApiConfig instance using the specified properties.\n             * @function create\n             * @memberof grpc.gcp.ApiConfig\n             * @static\n             * @param {grpc.gcp.IApiConfig=} [properties] Properties to set\n             * @returns {grpc.gcp.ApiConfig} ApiConfig instance\n             */\n            ApiConfig.create = function create(properties) {\n                return new ApiConfig(properties);\n            };\n\n            /**\n             * Encodes the specified ApiConfig message. Does not implicitly {@link grpc.gcp.ApiConfig.verify|verify} messages.\n             * @function encode\n             * @memberof grpc.gcp.ApiConfig\n             * @static\n             * @param {grpc.gcp.IApiConfig} message ApiConfig message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ApiConfig.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.channelPool != null && message.hasOwnProperty(\"channelPool\"))\n                    $root.grpc.gcp.ChannelPoolConfig.encode(message.channelPool, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                if (message.method != null && message.method.length)\n                    for (var i = 0; i < message.method.length; ++i)\n                        $root.grpc.gcp.MethodConfig.encode(message.method[i], writer.uint32(/* id 1001, wireType 2 =*/8010).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ApiConfig message, length delimited. Does not implicitly {@link grpc.gcp.ApiConfig.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof grpc.gcp.ApiConfig\n             * @static\n             * @param {grpc.gcp.IApiConfig} message ApiConfig message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ApiConfig.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an ApiConfig message from the specified reader or buffer.\n             * @function decode\n             * @memberof grpc.gcp.ApiConfig\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {grpc.gcp.ApiConfig} ApiConfig\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ApiConfig.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grpc.gcp.ApiConfig();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 2:\n                        message.channelPool = $root.grpc.gcp.ChannelPoolConfig.decode(reader, reader.uint32());\n                        break;\n                    case 1001:\n                        if (!(message.method && message.method.length))\n                            message.method = [];\n                        message.method.push($root.grpc.gcp.MethodConfig.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an ApiConfig message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof grpc.gcp.ApiConfig\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {grpc.gcp.ApiConfig} ApiConfig\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ApiConfig.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an ApiConfig message.\n             * @function verify\n             * @memberof grpc.gcp.ApiConfig\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ApiConfig.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.channelPool != null && message.hasOwnProperty(\"channelPool\")) {\n                    var error = $root.grpc.gcp.ChannelPoolConfig.verify(message.channelPool);\n                    if (error)\n                        return \"channelPool.\" + error;\n                }\n                if (message.method != null && message.hasOwnProperty(\"method\")) {\n                    if (!Array.isArray(message.method))\n                        return \"method: array expected\";\n                    for (var i = 0; i < message.method.length; ++i) {\n                        var error = $root.grpc.gcp.MethodConfig.verify(message.method[i]);\n                        if (error)\n                            return \"method.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates an ApiConfig message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof grpc.gcp.ApiConfig\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {grpc.gcp.ApiConfig} ApiConfig\n             */\n            ApiConfig.fromObject = function fromObject(object) {\n                if (object instanceof $root.grpc.gcp.ApiConfig)\n                    return object;\n                var message = new $root.grpc.gcp.ApiConfig();\n                if (object.channelPool != null) {\n                    if (typeof object.channelPool !== \"object\")\n                        throw TypeError(\".grpc.gcp.ApiConfig.channelPool: object expected\");\n                    message.channelPool = $root.grpc.gcp.ChannelPoolConfig.fromObject(object.channelPool);\n                }\n                if (object.method) {\n                    if (!Array.isArray(object.method))\n                        throw TypeError(\".grpc.gcp.ApiConfig.method: array expected\");\n                    message.method = [];\n                    for (var i = 0; i < object.method.length; ++i) {\n                        if (typeof object.method[i] !== \"object\")\n                            throw TypeError(\".grpc.gcp.ApiConfig.method: object expected\");\n                        message.method[i] = $root.grpc.gcp.MethodConfig.fromObject(object.method[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an ApiConfig message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof grpc.gcp.ApiConfig\n             * @static\n             * @param {grpc.gcp.ApiConfig} message ApiConfig\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ApiConfig.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.method = [];\n                if (options.defaults)\n                    object.channelPool = null;\n                if (message.channelPool != null && message.hasOwnProperty(\"channelPool\"))\n                    object.channelPool = $root.grpc.gcp.ChannelPoolConfig.toObject(message.channelPool, options);\n                if (message.method && message.method.length) {\n                    object.method = [];\n                    for (var j = 0; j < message.method.length; ++j)\n                        object.method[j] = $root.grpc.gcp.MethodConfig.toObject(message.method[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ApiConfig to JSON.\n             * @function toJSON\n             * @memberof grpc.gcp.ApiConfig\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ApiConfig.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ApiConfig;\n        })();\n\n        gcp.ChannelPoolConfig = (function() {\n\n            /**\n             * Properties of a ChannelPoolConfig.\n             * @memberof grpc.gcp\n             * @interface IChannelPoolConfig\n             * @property {number|null} [maxSize] ChannelPoolConfig maxSize\n             * @property {number|Long|null} [idleTimeout] ChannelPoolConfig idleTimeout\n             * @property {number|null} [maxConcurrentStreamsLowWatermark] ChannelPoolConfig maxConcurrentStreamsLowWatermark\n             */\n\n            /**\n             * Constructs a new ChannelPoolConfig.\n             * @memberof grpc.gcp\n             * @classdesc Represents a ChannelPoolConfig.\n             * @implements IChannelPoolConfig\n             * @constructor\n             * @param {grpc.gcp.IChannelPoolConfig=} [properties] Properties to set\n             */\n            function ChannelPoolConfig(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ChannelPoolConfig maxSize.\n             * @member {number} maxSize\n             * @memberof grpc.gcp.ChannelPoolConfig\n             * @instance\n             */\n            ChannelPoolConfig.prototype.maxSize = 0;\n\n            /**\n             * ChannelPoolConfig idleTimeout.\n             * @member {number|Long} idleTimeout\n             * @memberof grpc.gcp.ChannelPoolConfig\n             * @instance\n             */\n            ChannelPoolConfig.prototype.idleTimeout = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * ChannelPoolConfig maxConcurrentStreamsLowWatermark.\n             * @member {number} maxConcurrentStreamsLowWatermark\n             * @memberof grpc.gcp.ChannelPoolConfig\n             * @instance\n             */\n            ChannelPoolConfig.prototype.maxConcurrentStreamsLowWatermark = 0;\n\n            /**\n             * Creates a new ChannelPoolConfig instance using the specified properties.\n             * @function create\n             * @memberof grpc.gcp.ChannelPoolConfig\n             * @static\n             * @param {grpc.gcp.IChannelPoolConfig=} [properties] Properties to set\n             * @returns {grpc.gcp.ChannelPoolConfig} ChannelPoolConfig instance\n             */\n            ChannelPoolConfig.create = function create(properties) {\n                return new ChannelPoolConfig(properties);\n            };\n\n            /**\n             * Encodes the specified ChannelPoolConfig message. Does not implicitly {@link grpc.gcp.ChannelPoolConfig.verify|verify} messages.\n             * @function encode\n             * @memberof grpc.gcp.ChannelPoolConfig\n             * @static\n             * @param {grpc.gcp.IChannelPoolConfig} message ChannelPoolConfig message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ChannelPoolConfig.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.maxSize != null && message.hasOwnProperty(\"maxSize\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.maxSize);\n                if (message.idleTimeout != null && message.hasOwnProperty(\"idleTimeout\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.idleTimeout);\n                if (message.maxConcurrentStreamsLowWatermark != null && message.hasOwnProperty(\"maxConcurrentStreamsLowWatermark\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.maxConcurrentStreamsLowWatermark);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ChannelPoolConfig message, length delimited. Does not implicitly {@link grpc.gcp.ChannelPoolConfig.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof grpc.gcp.ChannelPoolConfig\n             * @static\n             * @param {grpc.gcp.IChannelPoolConfig} message ChannelPoolConfig message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ChannelPoolConfig.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ChannelPoolConfig message from the specified reader or buffer.\n             * @function decode\n             * @memberof grpc.gcp.ChannelPoolConfig\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {grpc.gcp.ChannelPoolConfig} ChannelPoolConfig\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ChannelPoolConfig.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grpc.gcp.ChannelPoolConfig();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.maxSize = reader.uint32();\n                        break;\n                    case 2:\n                        message.idleTimeout = reader.uint64();\n                        break;\n                    case 3:\n                        message.maxConcurrentStreamsLowWatermark = reader.uint32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ChannelPoolConfig message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof grpc.gcp.ChannelPoolConfig\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {grpc.gcp.ChannelPoolConfig} ChannelPoolConfig\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ChannelPoolConfig.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ChannelPoolConfig message.\n             * @function verify\n             * @memberof grpc.gcp.ChannelPoolConfig\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ChannelPoolConfig.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.maxSize != null && message.hasOwnProperty(\"maxSize\"))\n                    if (!$util.isInteger(message.maxSize))\n                        return \"maxSize: integer expected\";\n                if (message.idleTimeout != null && message.hasOwnProperty(\"idleTimeout\"))\n                    if (!$util.isInteger(message.idleTimeout) && !(message.idleTimeout && $util.isInteger(message.idleTimeout.low) && $util.isInteger(message.idleTimeout.high)))\n                        return \"idleTimeout: integer|Long expected\";\n                if (message.maxConcurrentStreamsLowWatermark != null && message.hasOwnProperty(\"maxConcurrentStreamsLowWatermark\"))\n                    if (!$util.isInteger(message.maxConcurrentStreamsLowWatermark))\n                        return \"maxConcurrentStreamsLowWatermark: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a ChannelPoolConfig message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof grpc.gcp.ChannelPoolConfig\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {grpc.gcp.ChannelPoolConfig} ChannelPoolConfig\n             */\n            ChannelPoolConfig.fromObject = function fromObject(object) {\n                if (object instanceof $root.grpc.gcp.ChannelPoolConfig)\n                    return object;\n                var message = new $root.grpc.gcp.ChannelPoolConfig();\n                if (object.maxSize != null)\n                    message.maxSize = object.maxSize >>> 0;\n                if (object.idleTimeout != null)\n                    if ($util.Long)\n                        (message.idleTimeout = $util.Long.fromValue(object.idleTimeout)).unsigned = true;\n                    else if (typeof object.idleTimeout === \"string\")\n                        message.idleTimeout = parseInt(object.idleTimeout, 10);\n                    else if (typeof object.idleTimeout === \"number\")\n                        message.idleTimeout = object.idleTimeout;\n                    else if (typeof object.idleTimeout === \"object\")\n                        message.idleTimeout = new $util.LongBits(object.idleTimeout.low >>> 0, object.idleTimeout.high >>> 0).toNumber(true);\n                if (object.maxConcurrentStreamsLowWatermark != null)\n                    message.maxConcurrentStreamsLowWatermark = object.maxConcurrentStreamsLowWatermark >>> 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a ChannelPoolConfig message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof grpc.gcp.ChannelPoolConfig\n             * @static\n             * @param {grpc.gcp.ChannelPoolConfig} message ChannelPoolConfig\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ChannelPoolConfig.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.maxSize = 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, true);\n                        object.idleTimeout = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.idleTimeout = options.longs === String ? \"0\" : 0;\n                    object.maxConcurrentStreamsLowWatermark = 0;\n                }\n                if (message.maxSize != null && message.hasOwnProperty(\"maxSize\"))\n                    object.maxSize = message.maxSize;\n                if (message.idleTimeout != null && message.hasOwnProperty(\"idleTimeout\"))\n                    if (typeof message.idleTimeout === \"number\")\n                        object.idleTimeout = options.longs === String ? String(message.idleTimeout) : message.idleTimeout;\n                    else\n                        object.idleTimeout = options.longs === String ? $util.Long.prototype.toString.call(message.idleTimeout) : options.longs === Number ? new $util.LongBits(message.idleTimeout.low >>> 0, message.idleTimeout.high >>> 0).toNumber(true) : message.idleTimeout;\n                if (message.maxConcurrentStreamsLowWatermark != null && message.hasOwnProperty(\"maxConcurrentStreamsLowWatermark\"))\n                    object.maxConcurrentStreamsLowWatermark = message.maxConcurrentStreamsLowWatermark;\n                return object;\n            };\n\n            /**\n             * Converts this ChannelPoolConfig to JSON.\n             * @function toJSON\n             * @memberof grpc.gcp.ChannelPoolConfig\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ChannelPoolConfig.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ChannelPoolConfig;\n        })();\n\n        gcp.MethodConfig = (function() {\n\n            /**\n             * Properties of a MethodConfig.\n             * @memberof grpc.gcp\n             * @interface IMethodConfig\n             * @property {Array.<string>|null} [name] MethodConfig name\n             * @property {grpc.gcp.IAffinityConfig|null} [affinity] MethodConfig affinity\n             */\n\n            /**\n             * Constructs a new MethodConfig.\n             * @memberof grpc.gcp\n             * @classdesc Represents a MethodConfig.\n             * @implements IMethodConfig\n             * @constructor\n             * @param {grpc.gcp.IMethodConfig=} [properties] Properties to set\n             */\n            function MethodConfig(properties) {\n                this.name = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * MethodConfig name.\n             * @member {Array.<string>} name\n             * @memberof grpc.gcp.MethodConfig\n             * @instance\n             */\n            MethodConfig.prototype.name = $util.emptyArray;\n\n            /**\n             * MethodConfig affinity.\n             * @member {grpc.gcp.IAffinityConfig|null|undefined} affinity\n             * @memberof grpc.gcp.MethodConfig\n             * @instance\n             */\n            MethodConfig.prototype.affinity = null;\n\n            /**\n             * Creates a new MethodConfig instance using the specified properties.\n             * @function create\n             * @memberof grpc.gcp.MethodConfig\n             * @static\n             * @param {grpc.gcp.IMethodConfig=} [properties] Properties to set\n             * @returns {grpc.gcp.MethodConfig} MethodConfig instance\n             */\n            MethodConfig.create = function create(properties) {\n                return new MethodConfig(properties);\n            };\n\n            /**\n             * Encodes the specified MethodConfig message. Does not implicitly {@link grpc.gcp.MethodConfig.verify|verify} messages.\n             * @function encode\n             * @memberof grpc.gcp.MethodConfig\n             * @static\n             * @param {grpc.gcp.IMethodConfig} message MethodConfig message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            MethodConfig.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.name != null && message.name.length)\n                    for (var i = 0; i < message.name.length; ++i)\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name[i]);\n                if (message.affinity != null && message.hasOwnProperty(\"affinity\"))\n                    $root.grpc.gcp.AffinityConfig.encode(message.affinity, writer.uint32(/* id 1001, wireType 2 =*/8010).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified MethodConfig message, length delimited. Does not implicitly {@link grpc.gcp.MethodConfig.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof grpc.gcp.MethodConfig\n             * @static\n             * @param {grpc.gcp.IMethodConfig} message MethodConfig message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            MethodConfig.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a MethodConfig message from the specified reader or buffer.\n             * @function decode\n             * @memberof grpc.gcp.MethodConfig\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {grpc.gcp.MethodConfig} MethodConfig\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            MethodConfig.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grpc.gcp.MethodConfig();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.name && message.name.length))\n                            message.name = [];\n                        message.name.push(reader.string());\n                        break;\n                    case 1001:\n                        message.affinity = $root.grpc.gcp.AffinityConfig.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a MethodConfig message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof grpc.gcp.MethodConfig\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {grpc.gcp.MethodConfig} MethodConfig\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            MethodConfig.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a MethodConfig message.\n             * @function verify\n             * @memberof grpc.gcp.MethodConfig\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            MethodConfig.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.name != null && message.hasOwnProperty(\"name\")) {\n                    if (!Array.isArray(message.name))\n                        return \"name: array expected\";\n                    for (var i = 0; i < message.name.length; ++i)\n                        if (!$util.isString(message.name[i]))\n                            return \"name: string[] expected\";\n                }\n                if (message.affinity != null && message.hasOwnProperty(\"affinity\")) {\n                    var error = $root.grpc.gcp.AffinityConfig.verify(message.affinity);\n                    if (error)\n                        return \"affinity.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a MethodConfig message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof grpc.gcp.MethodConfig\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {grpc.gcp.MethodConfig} MethodConfig\n             */\n            MethodConfig.fromObject = function fromObject(object) {\n                if (object instanceof $root.grpc.gcp.MethodConfig)\n                    return object;\n                var message = new $root.grpc.gcp.MethodConfig();\n                if (object.name) {\n                    if (!Array.isArray(object.name))\n                        throw TypeError(\".grpc.gcp.MethodConfig.name: array expected\");\n                    message.name = [];\n                    for (var i = 0; i < object.name.length; ++i)\n                        message.name[i] = String(object.name[i]);\n                }\n                if (object.affinity != null) {\n                    if (typeof object.affinity !== \"object\")\n                        throw TypeError(\".grpc.gcp.MethodConfig.affinity: object expected\");\n                    message.affinity = $root.grpc.gcp.AffinityConfig.fromObject(object.affinity);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a MethodConfig message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof grpc.gcp.MethodConfig\n             * @static\n             * @param {grpc.gcp.MethodConfig} message MethodConfig\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            MethodConfig.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.name = [];\n                if (options.defaults)\n                    object.affinity = null;\n                if (message.name && message.name.length) {\n                    object.name = [];\n                    for (var j = 0; j < message.name.length; ++j)\n                        object.name[j] = message.name[j];\n                }\n                if (message.affinity != null && message.hasOwnProperty(\"affinity\"))\n                    object.affinity = $root.grpc.gcp.AffinityConfig.toObject(message.affinity, options);\n                return object;\n            };\n\n            /**\n             * Converts this MethodConfig to JSON.\n             * @function toJSON\n             * @memberof grpc.gcp.MethodConfig\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            MethodConfig.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return MethodConfig;\n        })();\n\n        gcp.AffinityConfig = (function() {\n\n            /**\n             * Properties of an AffinityConfig.\n             * @memberof grpc.gcp\n             * @interface IAffinityConfig\n             * @property {grpc.gcp.AffinityConfig.Command|null} [command] AffinityConfig command\n             * @property {string|null} [affinityKey] AffinityConfig affinityKey\n             */\n\n            /**\n             * Constructs a new AffinityConfig.\n             * @memberof grpc.gcp\n             * @classdesc Represents an AffinityConfig.\n             * @implements IAffinityConfig\n             * @constructor\n             * @param {grpc.gcp.IAffinityConfig=} [properties] Properties to set\n             */\n            function AffinityConfig(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * AffinityConfig command.\n             * @member {grpc.gcp.AffinityConfig.Command} command\n             * @memberof grpc.gcp.AffinityConfig\n             * @instance\n             */\n            AffinityConfig.prototype.command = 0;\n\n            /**\n             * AffinityConfig affinityKey.\n             * @member {string} affinityKey\n             * @memberof grpc.gcp.AffinityConfig\n             * @instance\n             */\n            AffinityConfig.prototype.affinityKey = \"\";\n\n            /**\n             * Creates a new AffinityConfig instance using the specified properties.\n             * @function create\n             * @memberof grpc.gcp.AffinityConfig\n             * @static\n             * @param {grpc.gcp.IAffinityConfig=} [properties] Properties to set\n             * @returns {grpc.gcp.AffinityConfig} AffinityConfig instance\n             */\n            AffinityConfig.create = function create(properties) {\n                return new AffinityConfig(properties);\n            };\n\n            /**\n             * Encodes the specified AffinityConfig message. Does not implicitly {@link grpc.gcp.AffinityConfig.verify|verify} messages.\n             * @function encode\n             * @memberof grpc.gcp.AffinityConfig\n             * @static\n             * @param {grpc.gcp.IAffinityConfig} message AffinityConfig message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            AffinityConfig.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.command != null && message.hasOwnProperty(\"command\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.command);\n                if (message.affinityKey != null && message.hasOwnProperty(\"affinityKey\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.affinityKey);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified AffinityConfig message, length delimited. Does not implicitly {@link grpc.gcp.AffinityConfig.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof grpc.gcp.AffinityConfig\n             * @static\n             * @param {grpc.gcp.IAffinityConfig} message AffinityConfig message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            AffinityConfig.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an AffinityConfig message from the specified reader or buffer.\n             * @function decode\n             * @memberof grpc.gcp.AffinityConfig\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {grpc.gcp.AffinityConfig} AffinityConfig\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            AffinityConfig.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.grpc.gcp.AffinityConfig();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 2:\n                        message.command = reader.int32();\n                        break;\n                    case 3:\n                        message.affinityKey = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an AffinityConfig message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof grpc.gcp.AffinityConfig\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {grpc.gcp.AffinityConfig} AffinityConfig\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            AffinityConfig.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an AffinityConfig message.\n             * @function verify\n             * @memberof grpc.gcp.AffinityConfig\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            AffinityConfig.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.command != null && message.hasOwnProperty(\"command\"))\n                    switch (message.command) {\n                    default:\n                        return \"command: enum value expected\";\n                    case 0:\n                    case 1:\n                    case 2:\n                        break;\n                    }\n                if (message.affinityKey != null && message.hasOwnProperty(\"affinityKey\"))\n                    if (!$util.isString(message.affinityKey))\n                        return \"affinityKey: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates an AffinityConfig message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof grpc.gcp.AffinityConfig\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {grpc.gcp.AffinityConfig} AffinityConfig\n             */\n            AffinityConfig.fromObject = function fromObject(object) {\n                if (object instanceof $root.grpc.gcp.AffinityConfig)\n                    return object;\n                var message = new $root.grpc.gcp.AffinityConfig();\n                switch (object.command) {\n                case \"BOUND\":\n                case 0:\n                    message.command = 0;\n                    break;\n                case \"BIND\":\n                case 1:\n                    message.command = 1;\n                    break;\n                case \"UNBIND\":\n                case 2:\n                    message.command = 2;\n                    break;\n                }\n                if (object.affinityKey != null)\n                    message.affinityKey = String(object.affinityKey);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an AffinityConfig message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof grpc.gcp.AffinityConfig\n             * @static\n             * @param {grpc.gcp.AffinityConfig} message AffinityConfig\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            AffinityConfig.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.command = options.enums === String ? \"BOUND\" : 0;\n                    object.affinityKey = \"\";\n                }\n                if (message.command != null && message.hasOwnProperty(\"command\"))\n                    object.command = options.enums === String ? $root.grpc.gcp.AffinityConfig.Command[message.command] : message.command;\n                if (message.affinityKey != null && message.hasOwnProperty(\"affinityKey\"))\n                    object.affinityKey = message.affinityKey;\n                return object;\n            };\n\n            /**\n             * Converts this AffinityConfig to JSON.\n             * @function toJSON\n             * @memberof grpc.gcp.AffinityConfig\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            AffinityConfig.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Command enum.\n             * @name grpc.gcp.AffinityConfig.Command\n             * @enum {string}\n             * @property {number} BOUND=0 BOUND value\n             * @property {number} BIND=1 BIND value\n             * @property {number} UNBIND=2 UNBIND value\n             */\n            AffinityConfig.Command = (function() {\n                var valuesById = {}, values = Object.create(valuesById);\n                values[valuesById[0] = \"BOUND\"] = 0;\n                values[valuesById[1] = \"BIND\"] = 1;\n                values[valuesById[2] = \"UNBIND\"] = 2;\n                return values;\n            })();\n\n            return AffinityConfig;\n        })();\n\n        return gcp;\n    })();\n\n    return grpc;\n})();\n\nmodule.exports = $root;\n"],"mappings":"AAAA;AACA,YAAY;;AAACA,OAAA;AAEb,IAAIC,SAAS,GAAGD,OAAO,CAAC,oBAAoB,CAAC;;AAE7C;AACA,IAAIE,OAAO,GAAGD,SAAS,CAACE,MAAM;EAAEC,OAAO,GAAGH,SAAS,CAACI,MAAM;EAAEC,KAAK,GAAGL,SAAS,CAACM,IAAI;;AAElF;AACA,IAAIC,KAAK,GAAGP,SAAS,CAACQ,KAAK,CAAC,SAAS,CAAC,KAAKR,SAAS,CAACQ,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;AAE3ED,KAAK,CAACE,IAAI,GAAI,YAAW;EAErB;AACJ;AACA;AACA;AACA;EACI,IAAIA,IAAI,GAAG,CAAC,CAAC;EAEbA,IAAI,CAACC,GAAG,GAAI,YAAW;IAEnB;AACR;AACA;AACA;AACA;IACQ,IAAIA,GAAG,GAAG,CAAC,CAAC;IAEZA,GAAG,CAACC,SAAS,GAAI,YAAW;MAExB;AACZ;AACA;AACA;AACA;AACA;AACA;;MAEY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY,SAASA,SAASA,CAACC,UAAU,EAAE;QAC3B,IAAI,CAACC,MAAM,GAAG,EAAE;QAChB,IAAID,UAAU,EACV,KAAK,IAAIE,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACF,UAAU,CAAC,EAAEI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIJ,UAAU,CAACE,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGJ,UAAU,CAACE,IAAI,CAACE,CAAC,CAAC,CAAC;MACnD;;MAEA;AACZ;AACA;AACA;AACA;AACA;MACYL,SAAS,CAACO,SAAS,CAACC,WAAW,GAAG,IAAI;;MAEtC;AACZ;AACA;AACA;AACA;AACA;MACYR,SAAS,CAACO,SAAS,CAACL,MAAM,GAAGR,KAAK,CAACe,UAAU;;MAE7C;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYT,SAAS,CAACU,MAAM,GAAG,SAASA,MAAMA,CAACT,UAAU,EAAE;QAC3C,OAAO,IAAID,SAAS,CAACC,UAAU,CAAC;MACpC,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYD,SAAS,CAACW,MAAM,GAAG,SAASA,MAAMA,CAACC,OAAO,EAAEC,MAAM,EAAE;QAChD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrB,OAAO,CAACkB,MAAM,EAAE;QAC7B,IAAIE,OAAO,CAACJ,WAAW,IAAI,IAAI,IAAII,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpElB,KAAK,CAACE,IAAI,CAACC,GAAG,CAACgB,iBAAiB,CAACJ,MAAM,CAACC,OAAO,CAACJ,WAAW,EAAEK,MAAM,CAACG,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;QAC1H,IAAIN,OAAO,CAACV,MAAM,IAAI,IAAI,IAAIU,OAAO,CAACV,MAAM,CAACI,MAAM,EAC/C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,OAAO,CAACV,MAAM,CAACI,MAAM,EAAE,EAAED,CAAC,EAC1CT,KAAK,CAACE,IAAI,CAACC,GAAG,CAACoB,YAAY,CAACR,MAAM,CAACC,OAAO,CAACV,MAAM,CAACG,CAAC,CAAC,EAAEQ,MAAM,CAACG,MAAM,EAAC,0BAA0B,IAAI,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;QAC5H,OAAOL,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYb,SAAS,CAACoB,eAAe,GAAG,SAASA,eAAeA,CAACR,OAAO,EAAEC,MAAM,EAAE;QAClE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACK,MAAM,EAAE;MAChD,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYlB,SAAS,CAACqB,MAAM,GAAG,SAASA,MAAMA,CAACC,MAAM,EAAEhB,MAAM,EAAE;QAC/C,IAAI,EAAEgB,MAAM,YAAYhC,OAAO,CAAC,EAC5BgC,MAAM,GAAGhC,OAAO,CAACoB,MAAM,CAACY,MAAM,CAAC;QACnC,IAAIC,GAAG,GAAGjB,MAAM,KAAKkB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGpB,MAAM;UAAEM,OAAO,GAAG,IAAIhB,KAAK,CAACE,IAAI,CAACC,GAAG,CAACC,SAAS,EAAE;QAC3G,OAAOsB,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;UACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;UACzB,QAAQW,GAAG,KAAK,CAAC;YACjB,KAAK,CAAC;cACFf,OAAO,CAACJ,WAAW,GAAGZ,KAAK,CAACE,IAAI,CAACC,GAAG,CAACgB,iBAAiB,CAACM,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;cACtF;YACJ,KAAK,IAAI;cACL,IAAI,EAAEJ,OAAO,CAACV,MAAM,IAAIU,OAAO,CAACV,MAAM,CAACI,MAAM,CAAC,EAC1CM,OAAO,CAACV,MAAM,GAAG,EAAE;cACvBU,OAAO,CAACV,MAAM,CAAC0B,IAAI,CAAChC,KAAK,CAACE,IAAI,CAACC,GAAG,CAACoB,YAAY,CAACE,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC,CAAC;cAChF;YACJ;cACIM,MAAM,CAACO,QAAQ,CAACF,GAAG,GAAG,CAAC,CAAC;cACxB;UAAM;QAEd;QACA,OAAOf,OAAO;MAClB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYZ,SAAS,CAAC8B,eAAe,GAAG,SAASA,eAAeA,CAACR,MAAM,EAAE;QACzD,IAAI,EAAEA,MAAM,YAAYhC,OAAO,CAAC,EAC5BgC,MAAM,GAAG,IAAIhC,OAAO,CAACgC,MAAM,CAAC;QAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;MAC/C,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYhB,SAAS,CAAC+B,MAAM,GAAG,SAASA,MAAMA,CAACnB,OAAO,EAAE;QACxC,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;QAC5B,IAAIA,OAAO,CAACJ,WAAW,IAAI,IAAI,IAAII,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EAAE;UACtE,IAAIkB,KAAK,GAAGpC,KAAK,CAACE,IAAI,CAACC,GAAG,CAACgB,iBAAiB,CAACgB,MAAM,CAACnB,OAAO,CAACJ,WAAW,CAAC;UACxE,IAAIwB,KAAK,EACL,OAAO,cAAc,GAAGA,KAAK;QACrC;QACA,IAAIpB,OAAO,CAACV,MAAM,IAAI,IAAI,IAAIU,OAAO,CAACE,cAAc,CAAC,QAAQ,CAAC,EAAE;UAC5D,IAAI,CAACmB,KAAK,CAACC,OAAO,CAACtB,OAAO,CAACV,MAAM,CAAC,EAC9B,OAAO,wBAAwB;UACnC,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,OAAO,CAACV,MAAM,CAACI,MAAM,EAAE,EAAED,CAAC,EAAE;YAC5C,IAAI2B,KAAK,GAAGpC,KAAK,CAACE,IAAI,CAACC,GAAG,CAACoB,YAAY,CAACY,MAAM,CAACnB,OAAO,CAACV,MAAM,CAACG,CAAC,CAAC,CAAC;YACjE,IAAI2B,KAAK,EACL,OAAO,SAAS,GAAGA,KAAK;UAChC;QACJ;QACA,OAAO,IAAI;MACf,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYhC,SAAS,CAACmC,UAAU,GAAG,SAASA,UAAUA,CAACC,MAAM,EAAE;QAC/C,IAAIA,MAAM,YAAYxC,KAAK,CAACE,IAAI,CAACC,GAAG,CAACC,SAAS,EAC1C,OAAOoC,MAAM;QACjB,IAAIxB,OAAO,GAAG,IAAIhB,KAAK,CAACE,IAAI,CAACC,GAAG,CAACC,SAAS,EAAE;QAC5C,IAAIoC,MAAM,CAAC5B,WAAW,IAAI,IAAI,EAAE;UAC5B,IAAI,OAAO4B,MAAM,CAAC5B,WAAW,KAAK,QAAQ,EACtC,MAAM6B,SAAS,CAAC,kDAAkD,CAAC;UACvEzB,OAAO,CAACJ,WAAW,GAAGZ,KAAK,CAACE,IAAI,CAACC,GAAG,CAACgB,iBAAiB,CAACoB,UAAU,CAACC,MAAM,CAAC5B,WAAW,CAAC;QACzF;QACA,IAAI4B,MAAM,CAAClC,MAAM,EAAE;UACf,IAAI,CAAC+B,KAAK,CAACC,OAAO,CAACE,MAAM,CAAClC,MAAM,CAAC,EAC7B,MAAMmC,SAAS,CAAC,4CAA4C,CAAC;UACjEzB,OAAO,CAACV,MAAM,GAAG,EAAE;UACnB,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAClC,MAAM,CAACI,MAAM,EAAE,EAAED,CAAC,EAAE;YAC3C,IAAI,OAAO+B,MAAM,CAAClC,MAAM,CAACG,CAAC,CAAC,KAAK,QAAQ,EACpC,MAAMgC,SAAS,CAAC,6CAA6C,CAAC;YAClEzB,OAAO,CAACV,MAAM,CAACG,CAAC,CAAC,GAAGT,KAAK,CAACE,IAAI,CAACC,GAAG,CAACoB,YAAY,CAACgB,UAAU,CAACC,MAAM,CAAClC,MAAM,CAACG,CAAC,CAAC,CAAC;UAChF;QACJ;QACA,OAAOO,OAAO;MAClB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYZ,SAAS,CAACsC,QAAQ,GAAG,SAASA,QAAQA,CAAC1B,OAAO,EAAE2B,OAAO,EAAE;QACrD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;QAChB,IAAIH,MAAM,GAAG,CAAC,CAAC;QACf,IAAIG,OAAO,CAACC,MAAM,IAAID,OAAO,CAACE,QAAQ,EAClCL,MAAM,CAAClC,MAAM,GAAG,EAAE;QACtB,IAAIqC,OAAO,CAACE,QAAQ,EAChBL,MAAM,CAAC5B,WAAW,GAAG,IAAI;QAC7B,IAAII,OAAO,CAACJ,WAAW,IAAI,IAAI,IAAII,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEsB,MAAM,CAAC5B,WAAW,GAAGZ,KAAK,CAACE,IAAI,CAACC,GAAG,CAACgB,iBAAiB,CAACuB,QAAQ,CAAC1B,OAAO,CAACJ,WAAW,EAAE+B,OAAO,CAAC;QAChG,IAAI3B,OAAO,CAACV,MAAM,IAAIU,OAAO,CAACV,MAAM,CAACI,MAAM,EAAE;UACzC8B,MAAM,CAAClC,MAAM,GAAG,EAAE;UAClB,KAAK,IAAIwC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG9B,OAAO,CAACV,MAAM,CAACI,MAAM,EAAE,EAAEoC,CAAC,EAC1CN,MAAM,CAAClC,MAAM,CAACwC,CAAC,CAAC,GAAG9C,KAAK,CAACE,IAAI,CAACC,GAAG,CAACoB,YAAY,CAACmB,QAAQ,CAAC1B,OAAO,CAACV,MAAM,CAACwC,CAAC,CAAC,EAAEH,OAAO,CAAC;QAC3F;QACA,OAAOH,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;MACYpC,SAAS,CAACO,SAAS,CAACoC,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;QAC3C,OAAO,IAAI,CAACC,WAAW,CAACN,QAAQ,CAAC,IAAI,EAAEjD,SAAS,CAACM,IAAI,CAACkD,aAAa,CAAC;MACxE,CAAC;MAED,OAAO7C,SAAS;IACpB,CAAC,EAAG;IAEJD,GAAG,CAACgB,iBAAiB,GAAI,YAAW;MAEhC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;MAEY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY,SAASA,iBAAiBA,CAACd,UAAU,EAAE;QACnC,IAAIA,UAAU,EACV,KAAK,IAAIE,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACF,UAAU,CAAC,EAAEI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIJ,UAAU,CAACE,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGJ,UAAU,CAACE,IAAI,CAACE,CAAC,CAAC,CAAC;MACnD;;MAEA;AACZ;AACA;AACA;AACA;AACA;MACYU,iBAAiB,CAACR,SAAS,CAACuC,OAAO,GAAG,CAAC;;MAEvC;AACZ;AACA;AACA;AACA;AACA;MACY/B,iBAAiB,CAACR,SAAS,CAACwC,WAAW,GAAGrD,KAAK,CAACsD,IAAI,GAAGtD,KAAK,CAACsD,IAAI,CAACC,QAAQ,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC;;MAExF;AACZ;AACA;AACA;AACA;AACA;MACYlC,iBAAiB,CAACR,SAAS,CAAC2C,gCAAgC,GAAG,CAAC;;MAEhE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYnC,iBAAiB,CAACL,MAAM,GAAG,SAASA,MAAMA,CAACT,UAAU,EAAE;QACnD,OAAO,IAAIc,iBAAiB,CAACd,UAAU,CAAC;MAC5C,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYc,iBAAiB,CAACJ,MAAM,GAAG,SAASA,MAAMA,CAACC,OAAO,EAAEC,MAAM,EAAE;QACxD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrB,OAAO,CAACkB,MAAM,EAAE;QAC7B,IAAIE,OAAO,CAACkC,OAAO,IAAI,IAAI,IAAIlC,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACG,MAAM,EAAC,uBAAuB,CAAC,CAAC,CAACA,MAAM,CAACJ,OAAO,CAACkC,OAAO,CAAC;QACnE,IAAIlC,OAAO,CAACmC,WAAW,IAAI,IAAI,IAAInC,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpED,MAAM,CAACG,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACmC,MAAM,CAACvC,OAAO,CAACmC,WAAW,CAAC;QACxE,IAAInC,OAAO,CAACsC,gCAAgC,IAAI,IAAI,IAAItC,OAAO,CAACE,cAAc,CAAC,kCAAkC,CAAC,EAC9GD,MAAM,CAACG,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACA,MAAM,CAACJ,OAAO,CAACsC,gCAAgC,CAAC;QAC7F,OAAOrC,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYE,iBAAiB,CAACK,eAAe,GAAG,SAASA,eAAeA,CAACR,OAAO,EAAEC,MAAM,EAAE;QAC1E,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACK,MAAM,EAAE;MAChD,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYH,iBAAiB,CAACM,MAAM,GAAG,SAASA,MAAMA,CAACC,MAAM,EAAEhB,MAAM,EAAE;QACvD,IAAI,EAAEgB,MAAM,YAAYhC,OAAO,CAAC,EAC5BgC,MAAM,GAAGhC,OAAO,CAACoB,MAAM,CAACY,MAAM,CAAC;QACnC,IAAIC,GAAG,GAAGjB,MAAM,KAAKkB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGpB,MAAM;UAAEM,OAAO,GAAG,IAAIhB,KAAK,CAACE,IAAI,CAACC,GAAG,CAACgB,iBAAiB,EAAE;QACnH,OAAOO,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;UACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;UACzB,QAAQW,GAAG,KAAK,CAAC;YACjB,KAAK,CAAC;cACFf,OAAO,CAACkC,OAAO,GAAGxB,MAAM,CAACN,MAAM,EAAE;cACjC;YACJ,KAAK,CAAC;cACFJ,OAAO,CAACmC,WAAW,GAAGzB,MAAM,CAAC6B,MAAM,EAAE;cACrC;YACJ,KAAK,CAAC;cACFvC,OAAO,CAACsC,gCAAgC,GAAG5B,MAAM,CAACN,MAAM,EAAE;cAC1D;YACJ;cACIM,MAAM,CAACO,QAAQ,CAACF,GAAG,GAAG,CAAC,CAAC;cACxB;UAAM;QAEd;QACA,OAAOf,OAAO;MAClB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYG,iBAAiB,CAACe,eAAe,GAAG,SAASA,eAAeA,CAACR,MAAM,EAAE;QACjE,IAAI,EAAEA,MAAM,YAAYhC,OAAO,CAAC,EAC5BgC,MAAM,GAAG,IAAIhC,OAAO,CAACgC,MAAM,CAAC;QAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;MAC/C,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYD,iBAAiB,CAACgB,MAAM,GAAG,SAASA,MAAMA,CAACnB,OAAO,EAAE;QAChD,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;QAC5B,IAAIA,OAAO,CAACkC,OAAO,IAAI,IAAI,IAAIlC,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,IAAI,CAACpB,KAAK,CAAC0D,SAAS,CAACxC,OAAO,CAACkC,OAAO,CAAC,EACjC,OAAO,2BAA2B;QAC1C,IAAIlC,OAAO,CAACmC,WAAW,IAAI,IAAI,IAAInC,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,CAACpB,KAAK,CAAC0D,SAAS,CAACxC,OAAO,CAACmC,WAAW,CAAC,IAAI,EAAEnC,OAAO,CAACmC,WAAW,IAAIrD,KAAK,CAAC0D,SAAS,CAACxC,OAAO,CAACmC,WAAW,CAACM,GAAG,CAAC,IAAI3D,KAAK,CAAC0D,SAAS,CAACxC,OAAO,CAACmC,WAAW,CAACO,IAAI,CAAC,CAAC,EACxJ,OAAO,oCAAoC;QACnD,IAAI1C,OAAO,CAACsC,gCAAgC,IAAI,IAAI,IAAItC,OAAO,CAACE,cAAc,CAAC,kCAAkC,CAAC,EAC9G,IAAI,CAACpB,KAAK,CAAC0D,SAAS,CAACxC,OAAO,CAACsC,gCAAgC,CAAC,EAC1D,OAAO,oDAAoD;QACnE,OAAO,IAAI;MACf,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYnC,iBAAiB,CAACoB,UAAU,GAAG,SAASA,UAAUA,CAACC,MAAM,EAAE;QACvD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,IAAI,CAACC,GAAG,CAACgB,iBAAiB,EAClD,OAAOqB,MAAM;QACjB,IAAIxB,OAAO,GAAG,IAAIhB,KAAK,CAACE,IAAI,CAACC,GAAG,CAACgB,iBAAiB,EAAE;QACpD,IAAIqB,MAAM,CAACU,OAAO,IAAI,IAAI,EACtBlC,OAAO,CAACkC,OAAO,GAAGV,MAAM,CAACU,OAAO,KAAK,CAAC;QAC1C,IAAIV,MAAM,CAACW,WAAW,IAAI,IAAI,EAC1B,IAAIrD,KAAK,CAACsD,IAAI,EACV,CAACpC,OAAO,CAACmC,WAAW,GAAGrD,KAAK,CAACsD,IAAI,CAACO,SAAS,CAACnB,MAAM,CAACW,WAAW,CAAC,EAAES,QAAQ,GAAG,IAAI,CAAC,KAChF,IAAI,OAAOpB,MAAM,CAACW,WAAW,KAAK,QAAQ,EAC3CnC,OAAO,CAACmC,WAAW,GAAGU,QAAQ,CAACrB,MAAM,CAACW,WAAW,EAAE,EAAE,CAAC,CAAC,KACtD,IAAI,OAAOX,MAAM,CAACW,WAAW,KAAK,QAAQ,EAC3CnC,OAAO,CAACmC,WAAW,GAAGX,MAAM,CAACW,WAAW,CAAC,KACxC,IAAI,OAAOX,MAAM,CAACW,WAAW,KAAK,QAAQ,EAC3CnC,OAAO,CAACmC,WAAW,GAAG,IAAIrD,KAAK,CAACgE,QAAQ,CAACtB,MAAM,CAACW,WAAW,CAACM,GAAG,KAAK,CAAC,EAAEjB,MAAM,CAACW,WAAW,CAACO,IAAI,KAAK,CAAC,CAAC,CAACK,QAAQ,CAAC,IAAI,CAAC;QAC5H,IAAIvB,MAAM,CAACc,gCAAgC,IAAI,IAAI,EAC/CtC,OAAO,CAACsC,gCAAgC,GAAGd,MAAM,CAACc,gCAAgC,KAAK,CAAC;QAC5F,OAAOtC,OAAO;MAClB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYG,iBAAiB,CAACuB,QAAQ,GAAG,SAASA,QAAQA,CAAC1B,OAAO,EAAE2B,OAAO,EAAE;QAC7D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;QAChB,IAAIH,MAAM,GAAG,CAAC,CAAC;QACf,IAAIG,OAAO,CAACE,QAAQ,EAAE;UAClBL,MAAM,CAACU,OAAO,GAAG,CAAC;UAClB,IAAIpD,KAAK,CAACsD,IAAI,EAAE;YACZ,IAAIY,IAAI,GAAG,IAAIlE,KAAK,CAACsD,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;YACrCZ,MAAM,CAACW,WAAW,GAAGR,OAAO,CAACsB,KAAK,KAAKC,MAAM,GAAGF,IAAI,CAACG,QAAQ,EAAE,GAAGxB,OAAO,CAACsB,KAAK,KAAKG,MAAM,GAAGJ,IAAI,CAACD,QAAQ,EAAE,GAAGC,IAAI;UACvH,CAAC,MACGxB,MAAM,CAACW,WAAW,GAAGR,OAAO,CAACsB,KAAK,KAAKC,MAAM,GAAG,GAAG,GAAG,CAAC;UAC3D1B,MAAM,CAACc,gCAAgC,GAAG,CAAC;QAC/C;QACA,IAAItC,OAAO,CAACkC,OAAO,IAAI,IAAI,IAAIlC,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DsB,MAAM,CAACU,OAAO,GAAGlC,OAAO,CAACkC,OAAO;QACpC,IAAIlC,OAAO,CAACmC,WAAW,IAAI,IAAI,IAAInC,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,OAAOF,OAAO,CAACmC,WAAW,KAAK,QAAQ,EACvCX,MAAM,CAACW,WAAW,GAAGR,OAAO,CAACsB,KAAK,KAAKC,MAAM,GAAGA,MAAM,CAAClD,OAAO,CAACmC,WAAW,CAAC,GAAGnC,OAAO,CAACmC,WAAW,CAAC,KAElGX,MAAM,CAACW,WAAW,GAAGR,OAAO,CAACsB,KAAK,KAAKC,MAAM,GAAGpE,KAAK,CAACsD,IAAI,CAACzC,SAAS,CAACwD,QAAQ,CAACE,IAAI,CAACrD,OAAO,CAACmC,WAAW,CAAC,GAAGR,OAAO,CAACsB,KAAK,KAAKG,MAAM,GAAG,IAAItE,KAAK,CAACgE,QAAQ,CAAC9C,OAAO,CAACmC,WAAW,CAACM,GAAG,KAAK,CAAC,EAAEzC,OAAO,CAACmC,WAAW,CAACO,IAAI,KAAK,CAAC,CAAC,CAACK,QAAQ,CAAC,IAAI,CAAC,GAAG/C,OAAO,CAACmC,WAAW;QACnQ,IAAInC,OAAO,CAACsC,gCAAgC,IAAI,IAAI,IAAItC,OAAO,CAACE,cAAc,CAAC,kCAAkC,CAAC,EAC9GsB,MAAM,CAACc,gCAAgC,GAAGtC,OAAO,CAACsC,gCAAgC;QACtF,OAAOd,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;MACYrB,iBAAiB,CAACR,SAAS,CAACoC,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;QACnD,OAAO,IAAI,CAACC,WAAW,CAACN,QAAQ,CAAC,IAAI,EAAEjD,SAAS,CAACM,IAAI,CAACkD,aAAa,CAAC;MACxE,CAAC;MAED,OAAO9B,iBAAiB;IAC5B,CAAC,EAAG;IAEJhB,GAAG,CAACoB,YAAY,GAAI,YAAW;MAE3B;AACZ;AACA;AACA;AACA;AACA;AACA;;MAEY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY,SAASA,YAAYA,CAAClB,UAAU,EAAE;QAC9B,IAAI,CAACiE,IAAI,GAAG,EAAE;QACd,IAAIjE,UAAU,EACV,KAAK,IAAIE,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACF,UAAU,CAAC,EAAEI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIJ,UAAU,CAACE,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGJ,UAAU,CAACE,IAAI,CAACE,CAAC,CAAC,CAAC;MACnD;;MAEA;AACZ;AACA;AACA;AACA;AACA;MACYc,YAAY,CAACZ,SAAS,CAAC2D,IAAI,GAAGxE,KAAK,CAACe,UAAU;;MAE9C;AACZ;AACA;AACA;AACA;AACA;MACYU,YAAY,CAACZ,SAAS,CAAC4D,QAAQ,GAAG,IAAI;;MAEtC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYhD,YAAY,CAACT,MAAM,GAAG,SAASA,MAAMA,CAACT,UAAU,EAAE;QAC9C,OAAO,IAAIkB,YAAY,CAAClB,UAAU,CAAC;MACvC,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYkB,YAAY,CAACR,MAAM,GAAG,SAASA,MAAMA,CAACC,OAAO,EAAEC,MAAM,EAAE;QACnD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrB,OAAO,CAACkB,MAAM,EAAE;QAC7B,IAAIE,OAAO,CAACsD,IAAI,IAAI,IAAI,IAAItD,OAAO,CAACsD,IAAI,CAAC5D,MAAM,EAC3C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,OAAO,CAACsD,IAAI,CAAC5D,MAAM,EAAE,EAAED,CAAC,EACxCQ,MAAM,CAACG,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACoD,MAAM,CAACxD,OAAO,CAACsD,IAAI,CAAC7D,CAAC,CAAC,CAAC;QACxE,IAAIO,OAAO,CAACuD,QAAQ,IAAI,IAAI,IAAIvD,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DlB,KAAK,CAACE,IAAI,CAACC,GAAG,CAACsE,cAAc,CAAC1D,MAAM,CAACC,OAAO,CAACuD,QAAQ,EAAEtD,MAAM,CAACG,MAAM,EAAC,0BAA0B,IAAI,CAAC,CAACC,IAAI,EAAE,CAAC,CAACC,MAAM,EAAE;QACzH,OAAOL,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYM,YAAY,CAACC,eAAe,GAAG,SAASA,eAAeA,CAACR,OAAO,EAAEC,MAAM,EAAE;QACrE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACK,MAAM,EAAE;MAChD,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,YAAY,CAACE,MAAM,GAAG,SAASA,MAAMA,CAACC,MAAM,EAAEhB,MAAM,EAAE;QAClD,IAAI,EAAEgB,MAAM,YAAYhC,OAAO,CAAC,EAC5BgC,MAAM,GAAGhC,OAAO,CAACoB,MAAM,CAACY,MAAM,CAAC;QACnC,IAAIC,GAAG,GAAGjB,MAAM,KAAKkB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGpB,MAAM;UAAEM,OAAO,GAAG,IAAIhB,KAAK,CAACE,IAAI,CAACC,GAAG,CAACoB,YAAY,EAAE;QAC9G,OAAOG,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;UACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;UACzB,QAAQW,GAAG,KAAK,CAAC;YACjB,KAAK,CAAC;cACF,IAAI,EAAEf,OAAO,CAACsD,IAAI,IAAItD,OAAO,CAACsD,IAAI,CAAC5D,MAAM,CAAC,EACtCM,OAAO,CAACsD,IAAI,GAAG,EAAE;cACrBtD,OAAO,CAACsD,IAAI,CAACtC,IAAI,CAACN,MAAM,CAAC8C,MAAM,EAAE,CAAC;cAClC;YACJ,KAAK,IAAI;cACLxD,OAAO,CAACuD,QAAQ,GAAGvE,KAAK,CAACE,IAAI,CAACC,GAAG,CAACsE,cAAc,CAAChD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;cAChF;YACJ;cACIM,MAAM,CAACO,QAAQ,CAACF,GAAG,GAAG,CAAC,CAAC;cACxB;UAAM;QAEd;QACA,OAAOf,OAAO;MAClB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYO,YAAY,CAACW,eAAe,GAAG,SAASA,eAAeA,CAACR,MAAM,EAAE;QAC5D,IAAI,EAAEA,MAAM,YAAYhC,OAAO,CAAC,EAC5BgC,MAAM,GAAG,IAAIhC,OAAO,CAACgC,MAAM,CAAC;QAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;MAC/C,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYG,YAAY,CAACY,MAAM,GAAG,SAASA,MAAMA,CAACnB,OAAO,EAAE;QAC3C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;QAC5B,IAAIA,OAAO,CAACsD,IAAI,IAAI,IAAI,IAAItD,OAAO,CAACE,cAAc,CAAC,MAAM,CAAC,EAAE;UACxD,IAAI,CAACmB,KAAK,CAACC,OAAO,CAACtB,OAAO,CAACsD,IAAI,CAAC,EAC5B,OAAO,sBAAsB;UACjC,KAAK,IAAI7D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,OAAO,CAACsD,IAAI,CAAC5D,MAAM,EAAE,EAAED,CAAC,EACxC,IAAI,CAACX,KAAK,CAAC4E,QAAQ,CAAC1D,OAAO,CAACsD,IAAI,CAAC7D,CAAC,CAAC,CAAC,EAChC,OAAO,yBAAyB;QAC5C;QACA,IAAIO,OAAO,CAACuD,QAAQ,IAAI,IAAI,IAAIvD,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;UAChE,IAAIkB,KAAK,GAAGpC,KAAK,CAACE,IAAI,CAACC,GAAG,CAACsE,cAAc,CAACtC,MAAM,CAACnB,OAAO,CAACuD,QAAQ,CAAC;UAClE,IAAInC,KAAK,EACL,OAAO,WAAW,GAAGA,KAAK;QAClC;QACA,OAAO,IAAI;MACf,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYb,YAAY,CAACgB,UAAU,GAAG,SAASA,UAAUA,CAACC,MAAM,EAAE;QAClD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,IAAI,CAACC,GAAG,CAACoB,YAAY,EAC7C,OAAOiB,MAAM;QACjB,IAAIxB,OAAO,GAAG,IAAIhB,KAAK,CAACE,IAAI,CAACC,GAAG,CAACoB,YAAY,EAAE;QAC/C,IAAIiB,MAAM,CAAC8B,IAAI,EAAE;UACb,IAAI,CAACjC,KAAK,CAACC,OAAO,CAACE,MAAM,CAAC8B,IAAI,CAAC,EAC3B,MAAM7B,SAAS,CAAC,6CAA6C,CAAC;UAClEzB,OAAO,CAACsD,IAAI,GAAG,EAAE;UACjB,KAAK,IAAI7D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+B,MAAM,CAAC8B,IAAI,CAAC5D,MAAM,EAAE,EAAED,CAAC,EACvCO,OAAO,CAACsD,IAAI,CAAC7D,CAAC,CAAC,GAAGyD,MAAM,CAAC1B,MAAM,CAAC8B,IAAI,CAAC7D,CAAC,CAAC,CAAC;QAChD;QACA,IAAI+B,MAAM,CAAC+B,QAAQ,IAAI,IAAI,EAAE;UACzB,IAAI,OAAO/B,MAAM,CAAC+B,QAAQ,KAAK,QAAQ,EACnC,MAAM9B,SAAS,CAAC,kDAAkD,CAAC;UACvEzB,OAAO,CAACuD,QAAQ,GAAGvE,KAAK,CAACE,IAAI,CAACC,GAAG,CAACsE,cAAc,CAAClC,UAAU,CAACC,MAAM,CAAC+B,QAAQ,CAAC;QAChF;QACA,OAAOvD,OAAO;MAClB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYO,YAAY,CAACmB,QAAQ,GAAG,SAASA,QAAQA,CAAC1B,OAAO,EAAE2B,OAAO,EAAE;QACxD,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;QAChB,IAAIH,MAAM,GAAG,CAAC,CAAC;QACf,IAAIG,OAAO,CAACC,MAAM,IAAID,OAAO,CAACE,QAAQ,EAClCL,MAAM,CAAC8B,IAAI,GAAG,EAAE;QACpB,IAAI3B,OAAO,CAACE,QAAQ,EAChBL,MAAM,CAAC+B,QAAQ,GAAG,IAAI;QAC1B,IAAIvD,OAAO,CAACsD,IAAI,IAAItD,OAAO,CAACsD,IAAI,CAAC5D,MAAM,EAAE;UACrC8B,MAAM,CAAC8B,IAAI,GAAG,EAAE;UAChB,KAAK,IAAIxB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG9B,OAAO,CAACsD,IAAI,CAAC5D,MAAM,EAAE,EAAEoC,CAAC,EACxCN,MAAM,CAAC8B,IAAI,CAACxB,CAAC,CAAC,GAAG9B,OAAO,CAACsD,IAAI,CAACxB,CAAC,CAAC;QACxC;QACA,IAAI9B,OAAO,CAACuD,QAAQ,IAAI,IAAI,IAAIvD,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAC9DsB,MAAM,CAAC+B,QAAQ,GAAGvE,KAAK,CAACE,IAAI,CAACC,GAAG,CAACsE,cAAc,CAAC/B,QAAQ,CAAC1B,OAAO,CAACuD,QAAQ,EAAE5B,OAAO,CAAC;QACvF,OAAOH,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;MACYjB,YAAY,CAACZ,SAAS,CAACoC,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;QAC9C,OAAO,IAAI,CAACC,WAAW,CAACN,QAAQ,CAAC,IAAI,EAAEjD,SAAS,CAACM,IAAI,CAACkD,aAAa,CAAC;MACxE,CAAC;MAED,OAAO1B,YAAY;IACvB,CAAC,EAAG;IAEJpB,GAAG,CAACsE,cAAc,GAAI,YAAW;MAE7B;AACZ;AACA;AACA;AACA;AACA;AACA;;MAEY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY,SAASA,cAAcA,CAACpE,UAAU,EAAE;QAChC,IAAIA,UAAU,EACV,KAAK,IAAIE,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACF,UAAU,CAAC,EAAEI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,MAAM,EAAE,EAAED,CAAC,EAChE,IAAIJ,UAAU,CAACE,IAAI,CAACE,CAAC,CAAC,CAAC,IAAI,IAAI,EAC3B,IAAI,CAACF,IAAI,CAACE,CAAC,CAAC,CAAC,GAAGJ,UAAU,CAACE,IAAI,CAACE,CAAC,CAAC,CAAC;MACnD;;MAEA;AACZ;AACA;AACA;AACA;AACA;MACYgE,cAAc,CAAC9D,SAAS,CAACgE,OAAO,GAAG,CAAC;;MAEpC;AACZ;AACA;AACA;AACA;AACA;MACYF,cAAc,CAAC9D,SAAS,CAACiE,WAAW,GAAG,EAAE;;MAEzC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYH,cAAc,CAAC3D,MAAM,GAAG,SAASA,MAAMA,CAACT,UAAU,EAAE;QAChD,OAAO,IAAIoE,cAAc,CAACpE,UAAU,CAAC;MACzC,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYoE,cAAc,CAAC1D,MAAM,GAAG,SAASA,MAAMA,CAACC,OAAO,EAAEC,MAAM,EAAE;QACrD,IAAI,CAACA,MAAM,EACPA,MAAM,GAAGrB,OAAO,CAACkB,MAAM,EAAE;QAC7B,IAAIE,OAAO,CAAC2D,OAAO,IAAI,IAAI,IAAI3D,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DD,MAAM,CAACG,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACyD,KAAK,CAAC7D,OAAO,CAAC2D,OAAO,CAAC;QACnE,IAAI3D,OAAO,CAAC4D,WAAW,IAAI,IAAI,IAAI5D,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpED,MAAM,CAACG,MAAM,EAAC,uBAAuB,EAAE,CAAC,CAACoD,MAAM,CAACxD,OAAO,CAAC4D,WAAW,CAAC;QACxE,OAAO3D,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYwD,cAAc,CAACjD,eAAe,GAAG,SAASA,eAAeA,CAACR,OAAO,EAAEC,MAAM,EAAE;QACvE,OAAO,IAAI,CAACF,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,CAACK,MAAM,EAAE;MAChD,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYmD,cAAc,CAAChD,MAAM,GAAG,SAASA,MAAMA,CAACC,MAAM,EAAEhB,MAAM,EAAE;QACpD,IAAI,EAAEgB,MAAM,YAAYhC,OAAO,CAAC,EAC5BgC,MAAM,GAAGhC,OAAO,CAACoB,MAAM,CAACY,MAAM,CAAC;QACnC,IAAIC,GAAG,GAAGjB,MAAM,KAAKkB,SAAS,GAAGF,MAAM,CAACG,GAAG,GAAGH,MAAM,CAACI,GAAG,GAAGpB,MAAM;UAAEM,OAAO,GAAG,IAAIhB,KAAK,CAACE,IAAI,CAACC,GAAG,CAACsE,cAAc,EAAE;QAChH,OAAO/C,MAAM,CAACI,GAAG,GAAGH,GAAG,EAAE;UACrB,IAAII,GAAG,GAAGL,MAAM,CAACN,MAAM,EAAE;UACzB,QAAQW,GAAG,KAAK,CAAC;YACjB,KAAK,CAAC;cACFf,OAAO,CAAC2D,OAAO,GAAGjD,MAAM,CAACmD,KAAK,EAAE;cAChC;YACJ,KAAK,CAAC;cACF7D,OAAO,CAAC4D,WAAW,GAAGlD,MAAM,CAAC8C,MAAM,EAAE;cACrC;YACJ;cACI9C,MAAM,CAACO,QAAQ,CAACF,GAAG,GAAG,CAAC,CAAC;cACxB;UAAM;QAEd;QACA,OAAOf,OAAO;MAClB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYyD,cAAc,CAACvC,eAAe,GAAG,SAASA,eAAeA,CAACR,MAAM,EAAE;QAC9D,IAAI,EAAEA,MAAM,YAAYhC,OAAO,CAAC,EAC5BgC,MAAM,GAAG,IAAIhC,OAAO,CAACgC,MAAM,CAAC;QAChC,OAAO,IAAI,CAACD,MAAM,CAACC,MAAM,EAAEA,MAAM,CAACN,MAAM,EAAE,CAAC;MAC/C,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYqD,cAAc,CAACtC,MAAM,GAAG,SAASA,MAAMA,CAACnB,OAAO,EAAE;QAC7C,IAAI,OAAOA,OAAO,KAAK,QAAQ,IAAIA,OAAO,KAAK,IAAI,EAC/C,OAAO,iBAAiB;QAC5B,IAAIA,OAAO,CAAC2D,OAAO,IAAI,IAAI,IAAI3D,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5D,QAAQF,OAAO,CAAC2D,OAAO;UACvB;YACI,OAAO,8BAA8B;UACzC,KAAK,CAAC;UACN,KAAK,CAAC;UACN,KAAK,CAAC;YACF;QAAM;QAEd,IAAI3D,OAAO,CAAC4D,WAAW,IAAI,IAAI,IAAI5D,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpE,IAAI,CAACpB,KAAK,CAAC4E,QAAQ,CAAC1D,OAAO,CAAC4D,WAAW,CAAC,EACpC,OAAO,8BAA8B;QAC7C,OAAO,IAAI;MACf,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYH,cAAc,CAAClC,UAAU,GAAG,SAASA,UAAUA,CAACC,MAAM,EAAE;QACpD,IAAIA,MAAM,YAAYxC,KAAK,CAACE,IAAI,CAACC,GAAG,CAACsE,cAAc,EAC/C,OAAOjC,MAAM;QACjB,IAAIxB,OAAO,GAAG,IAAIhB,KAAK,CAACE,IAAI,CAACC,GAAG,CAACsE,cAAc,EAAE;QACjD,QAAQjC,MAAM,CAACmC,OAAO;UACtB,KAAK,OAAO;UACZ,KAAK,CAAC;YACF3D,OAAO,CAAC2D,OAAO,GAAG,CAAC;YACnB;UACJ,KAAK,MAAM;UACX,KAAK,CAAC;YACF3D,OAAO,CAAC2D,OAAO,GAAG,CAAC;YACnB;UACJ,KAAK,QAAQ;UACb,KAAK,CAAC;YACF3D,OAAO,CAAC2D,OAAO,GAAG,CAAC;YACnB;QAAM;QAEV,IAAInC,MAAM,CAACoC,WAAW,IAAI,IAAI,EAC1B5D,OAAO,CAAC4D,WAAW,GAAGV,MAAM,CAAC1B,MAAM,CAACoC,WAAW,CAAC;QACpD,OAAO5D,OAAO;MAClB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYyD,cAAc,CAAC/B,QAAQ,GAAG,SAASA,QAAQA,CAAC1B,OAAO,EAAE2B,OAAO,EAAE;QAC1D,IAAI,CAACA,OAAO,EACRA,OAAO,GAAG,CAAC,CAAC;QAChB,IAAIH,MAAM,GAAG,CAAC,CAAC;QACf,IAAIG,OAAO,CAACE,QAAQ,EAAE;UAClBL,MAAM,CAACmC,OAAO,GAAGhC,OAAO,CAACmC,KAAK,KAAKZ,MAAM,GAAG,OAAO,GAAG,CAAC;UACvD1B,MAAM,CAACoC,WAAW,GAAG,EAAE;QAC3B;QACA,IAAI5D,OAAO,CAAC2D,OAAO,IAAI,IAAI,IAAI3D,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAC5DsB,MAAM,CAACmC,OAAO,GAAGhC,OAAO,CAACmC,KAAK,KAAKZ,MAAM,GAAGlE,KAAK,CAACE,IAAI,CAACC,GAAG,CAACsE,cAAc,CAACM,OAAO,CAAC/D,OAAO,CAAC2D,OAAO,CAAC,GAAG3D,OAAO,CAAC2D,OAAO;QACxH,IAAI3D,OAAO,CAAC4D,WAAW,IAAI,IAAI,IAAI5D,OAAO,CAACE,cAAc,CAAC,aAAa,CAAC,EACpEsB,MAAM,CAACoC,WAAW,GAAG5D,OAAO,CAAC4D,WAAW;QAC5C,OAAOpC,MAAM;MACjB,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;MACYiC,cAAc,CAAC9D,SAAS,CAACoC,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;QAChD,OAAO,IAAI,CAACC,WAAW,CAACN,QAAQ,CAAC,IAAI,EAAEjD,SAAS,CAACM,IAAI,CAACkD,aAAa,CAAC;MACxE,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYwB,cAAc,CAACM,OAAO,GAAI,YAAW;QACjC,IAAIC,UAAU,GAAG,CAAC,CAAC;UAAEC,MAAM,GAAGzE,MAAM,CAACM,MAAM,CAACkE,UAAU,CAAC;QACvDC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC;QACnCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC;QAClCC,MAAM,CAACD,UAAU,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC;QACpC,OAAOC,MAAM;MACjB,CAAC,EAAG;MAEJ,OAAOR,cAAc;IACzB,CAAC,EAAG;IAEJ,OAAOtE,GAAG;EACd,CAAC,EAAG;EAEJ,OAAOD,IAAI;AACf,CAAC,EAAG;AAEJgF,MAAM,CAACC,OAAO,GAAGnF,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}