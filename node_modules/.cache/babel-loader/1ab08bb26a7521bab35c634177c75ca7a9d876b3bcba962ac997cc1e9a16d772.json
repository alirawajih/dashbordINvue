{"ast":null,"code":"/**\n * @license\n * Copyright 2017 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * @module\n * @private\n */\n\n'use strict';\n\nvar camelCase = require('lodash.camelcase');\nvar client = require('./client');\nvar common = require('./common');\n\n/**\n * Get a function that deserializes a specific type of protobuf.\n * @param {function()} cls The constructor of the message type to deserialize\n * @param {bool=} binaryAsBase64 Deserialize bytes fields as base64 strings\n *     instead of Buffers. Defaults to false\n * @param {bool=} longsAsStrings Deserialize long values as strings instead of\n *     objects. Defaults to true\n * @return {function(Buffer):cls} The deserialization function\n */\nexports.deserializeCls = function deserializeCls(cls, options) {\n  /**\n   * Deserialize a buffer to a message object\n   * @param {Buffer} arg_buf The buffer to deserialize\n   * @return {cls} The resulting object\n   */\n  return function deserialize(arg_buf) {\n    // Convert to a native object with binary fields as Buffers (first argument)\n    // and longs as strings (second argument)\n    return cls.decode(arg_buf).toRaw(options.binaryAsBase64, options.longsAsStrings);\n  };\n};\nvar deserializeCls = exports.deserializeCls;\n\n/**\n * Get a function that serializes objects to a buffer by protobuf class.\n * @param {function()} Cls The constructor of the message type to serialize\n * @return {function(Cls):Buffer} The serialization function\n */\nexports.serializeCls = function serializeCls(Cls) {\n  /**\n   * Serialize an object to a Buffer\n   * @param {Object} arg The object to serialize\n   * @return {Buffer} The serialized object\n   */\n  return function serialize(arg) {\n    return Buffer.from(new Cls(arg).encode().toBuffer());\n  };\n};\nvar serializeCls = exports.serializeCls;\n\n/**\n * Get the fully qualified (dotted) name of a ProtoBuf.Reflect value.\n * @param {ProtoBuf.Reflect.Namespace} value The value to get the name of\n * @return {string} The fully qualified name of the value\n */\nexports.fullyQualifiedName = function fullyQualifiedName(value) {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  var name = value.name;\n  var parent_name = fullyQualifiedName(value.parent);\n  if (parent_name !== '') {\n    name = parent_name + '.' + name;\n  }\n  return name;\n};\nvar fullyQualifiedName = exports.fullyQualifiedName;\n\n/**\n * Return a map from method names to method attributes for the service.\n * @param {ProtoBuf.Reflect.Service} service The service to get attributes for\n * @param {Object=} options Options to apply to these attributes\n * @return {Object} The attributes map\n */\nexports.getProtobufServiceAttrs = function getProtobufServiceAttrs(service, options) {\n  var prefix = '/' + fullyQualifiedName(service) + '/';\n  var binaryAsBase64, longsAsStrings;\n  if (options) {\n    binaryAsBase64 = options.binaryAsBase64;\n    longsAsStrings = options.longsAsStrings;\n  }\n  /* This slightly awkward construction is used to make sure we only use\n     lodash@3.10.1-compatible functions. A previous version used\n     _.fromPairs, which would be cleaner, but was introduced in lodash\n     version 4 */\n  return common.zipObject(service.children.map(function (method) {\n    return camelCase(method.name);\n  }), service.children.map(function (method) {\n    return {\n      originalName: method.name,\n      path: prefix + method.name,\n      requestStream: method.requestStream,\n      responseStream: method.responseStream,\n      requestType: method.resolvedRequestType,\n      responseType: method.resolvedResponseType,\n      requestSerialize: serializeCls(method.resolvedRequestType.build()),\n      requestDeserialize: deserializeCls(method.resolvedRequestType.build(), options),\n      responseSerialize: serializeCls(method.resolvedResponseType.build()),\n      responseDeserialize: deserializeCls(method.resolvedResponseType.build(), options)\n    };\n  }));\n};\nvar getProtobufServiceAttrs = exports.getProtobufServiceAttrs;\n\n/**\n * Load a gRPC object from an existing ProtoBuf.Reflect object.\n * @param {ProtoBuf.Reflect.Namespace} value The ProtoBuf object to load.\n * @param {Object=} options Options to apply to the loaded object\n * @return {Object<string, *>} The resulting gRPC object\n */\nexports.loadObject = function loadObject(value, options) {\n  var result = {};\n  if (!value) {\n    return value;\n  }\n  if (value.hasOwnProperty('ns')) {\n    return loadObject(value.ns, options);\n  }\n  if (value.className === 'Namespace') {\n    Object.keys(value.children).forEach(key => {\n      const child = value.children[key];\n      result[child.name] = loadObject(child, options);\n    });\n    return result;\n  } else if (value.className === 'Service') {\n    return client.makeClientConstructor(getProtobufServiceAttrs(value, options), options);\n  } else if (value.className === 'Message' || value.className === 'Enum') {\n    return value.build();\n  } else {\n    return value;\n  }\n};\n\n/**\n * The primary purpose of this method is to distinguish between reflection\n * objects from different versions of ProtoBuf.js. This is just a heuristic,\n * checking for properties that are (currently) specific to this version of\n * ProtoBuf.js\n * @param {Object} obj The object to check\n * @return {boolean} Whether the object appears to be a Protobuf.js 5\n *   ReflectionObject\n */\nexports.isProbablyProtobufJs5 = function isProbablyProtobufJs5(obj) {\n  return Array.isArray(obj.children) && typeof obj.build === 'function';\n};","map":{"version":3,"names":["camelCase","require","client","common","exports","deserializeCls","cls","options","deserialize","arg_buf","decode","toRaw","binaryAsBase64","longsAsStrings","serializeCls","Cls","serialize","arg","Buffer","from","encode","toBuffer","fullyQualifiedName","value","undefined","name","parent_name","parent","getProtobufServiceAttrs","service","prefix","zipObject","children","map","method","originalName","path","requestStream","responseStream","requestType","resolvedRequestType","responseType","resolvedResponseType","requestSerialize","build","requestDeserialize","responseSerialize","responseDeserialize","loadObject","result","hasOwnProperty","ns","className","Object","keys","forEach","key","child","makeClientConstructor","isProbablyProtobufJs5","obj","Array","isArray"],"sources":["/var/www/html/project/Dash_Vuexy-master/node_modules/grpc/src/protobuf_js_5_common.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * @module\n * @private\n */\n\n'use strict';\n\nvar camelCase = require('lodash.camelcase');\nvar client = require('./client');\nvar common = require('./common');\n\n/**\n * Get a function that deserializes a specific type of protobuf.\n * @param {function()} cls The constructor of the message type to deserialize\n * @param {bool=} binaryAsBase64 Deserialize bytes fields as base64 strings\n *     instead of Buffers. Defaults to false\n * @param {bool=} longsAsStrings Deserialize long values as strings instead of\n *     objects. Defaults to true\n * @return {function(Buffer):cls} The deserialization function\n */\nexports.deserializeCls = function deserializeCls(cls, options) {\n  /**\n   * Deserialize a buffer to a message object\n   * @param {Buffer} arg_buf The buffer to deserialize\n   * @return {cls} The resulting object\n   */\n  return function deserialize(arg_buf) {\n    // Convert to a native object with binary fields as Buffers (first argument)\n    // and longs as strings (second argument)\n    return cls.decode(arg_buf).toRaw(options.binaryAsBase64,\n                                     options.longsAsStrings);\n  };\n};\n\nvar deserializeCls = exports.deserializeCls;\n\n/**\n * Get a function that serializes objects to a buffer by protobuf class.\n * @param {function()} Cls The constructor of the message type to serialize\n * @return {function(Cls):Buffer} The serialization function\n */\nexports.serializeCls = function serializeCls(Cls) {\n  /**\n   * Serialize an object to a Buffer\n   * @param {Object} arg The object to serialize\n   * @return {Buffer} The serialized object\n   */\n  return function serialize(arg) {\n    return Buffer.from(new Cls(arg).encode().toBuffer());\n  };\n};\n\nvar serializeCls = exports.serializeCls;\n\n/**\n * Get the fully qualified (dotted) name of a ProtoBuf.Reflect value.\n * @param {ProtoBuf.Reflect.Namespace} value The value to get the name of\n * @return {string} The fully qualified name of the value\n */\nexports.fullyQualifiedName = function fullyQualifiedName(value) {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  var name = value.name;\n  var parent_name = fullyQualifiedName(value.parent);\n  if (parent_name !== '') {\n    name = parent_name + '.' + name;\n  }\n  return name;\n};\n\nvar fullyQualifiedName = exports.fullyQualifiedName;\n\n/**\n * Return a map from method names to method attributes for the service.\n * @param {ProtoBuf.Reflect.Service} service The service to get attributes for\n * @param {Object=} options Options to apply to these attributes\n * @return {Object} The attributes map\n */\nexports.getProtobufServiceAttrs = function getProtobufServiceAttrs(service,\n                                                                   options) {\n  var prefix = '/' + fullyQualifiedName(service) + '/';\n  var binaryAsBase64, longsAsStrings;\n  if (options) {\n    binaryAsBase64 = options.binaryAsBase64;\n    longsAsStrings = options.longsAsStrings;\n  }\n  /* This slightly awkward construction is used to make sure we only use\n     lodash@3.10.1-compatible functions. A previous version used\n     _.fromPairs, which would be cleaner, but was introduced in lodash\n     version 4 */\n  return common.zipObject(service.children.map(function(method) {\n    return camelCase(method.name);\n  }), service.children.map(function(method) {\n    return {\n      originalName: method.name,\n      path: prefix + method.name,\n      requestStream: method.requestStream,\n      responseStream: method.responseStream,\n      requestType: method.resolvedRequestType,\n      responseType: method.resolvedResponseType,\n      requestSerialize: serializeCls(method.resolvedRequestType.build()),\n      requestDeserialize: deserializeCls(method.resolvedRequestType.build(),\n                                         options),\n      responseSerialize: serializeCls(method.resolvedResponseType.build()),\n      responseDeserialize: deserializeCls(method.resolvedResponseType.build(),\n                                          options)\n    };\n  }));\n};\n\nvar getProtobufServiceAttrs = exports.getProtobufServiceAttrs;\n\n/**\n * Load a gRPC object from an existing ProtoBuf.Reflect object.\n * @param {ProtoBuf.Reflect.Namespace} value The ProtoBuf object to load.\n * @param {Object=} options Options to apply to the loaded object\n * @return {Object<string, *>} The resulting gRPC object\n */\nexports.loadObject = function loadObject(value, options) {\n  var result = {};\n  if (!value) {\n    return value;\n  }\n  if (value.hasOwnProperty('ns')) {\n    return loadObject(value.ns, options);\n  }\n  if (value.className === 'Namespace') {\n    Object.keys(value.children).forEach(key => {\n      const child = value.children[key];\n      result[child.name] = loadObject(child, options);\n    });\n    return result;\n  } else if (value.className === 'Service') {\n    return client.makeClientConstructor(getProtobufServiceAttrs(value, options),\n                                        options);\n  } else if (value.className === 'Message' || value.className === 'Enum') {\n    return value.build();\n  } else {\n    return value;\n  }\n};\n\n/**\n * The primary purpose of this method is to distinguish between reflection\n * objects from different versions of ProtoBuf.js. This is just a heuristic,\n * checking for properties that are (currently) specific to this version of\n * ProtoBuf.js\n * @param {Object} obj The object to check\n * @return {boolean} Whether the object appears to be a Protobuf.js 5\n *   ReflectionObject\n */\nexports.isProbablyProtobufJs5 = function isProbablyProtobufJs5(obj) {\n  return Array.isArray(obj.children) && (typeof obj.build === 'function');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}