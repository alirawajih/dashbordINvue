{"ast":null,"code":"export default {\n  props: [\"data\"],\n  data() {\n    return {\n      dataAna: [],\n      chartData: {}\n    };\n  },\n  created() {\n    this.chartData = this.data;\n  },\n  computed: {\n    chartOptions() {\n      const normalizedValues = this.chartData.values.map(value => Math.log(value + 1));\n      const maxLogValue = Math.max(...normalizedValues);\n      return {\n        chart: {\n          type: \"bar\",\n          toolbar: {\n            show: false\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        plotOptions: {\n          bar: {\n            horizontal: false,\n            borderRadius: 0,\n            borderRadiusApplication: 'around',\n            borderRadiusWhenStacked: 'last',\n            columnWidth: '70%',\n            barHeight: '70%',\n            distributed: false,\n            rangeBarOverlap: true,\n            rangeBarGroupRows: false,\n            hideZeroBarsWhenGrouped: false,\n            isDumbbell: false,\n            dumbbellColors: undefined,\n            isFunnel: false,\n            isFunnel3d: true,\n            colors: {\n              ranges: [{\n                from: 0,\n                to: 0,\n                color: undefined\n              }],\n              backgroundBarColors: [],\n              backgroundBarOpacity: 1,\n              backgroundBarRadius: 0\n            },\n            dataLabels: {\n              position: 'top',\n              maxItems: 100,\n              hideOverflowingLabels: true,\n              total: {\n                enabled: false,\n                formatter: undefined,\n                offsetX: 0,\n                offsetY: 0,\n                style: {\n                  color: '#373d3f',\n                  fontSize: '12px',\n                  fontFamily: undefined,\n                  fontWeight: 600\n                }\n              }\n            }\n          }\n        },\n        xaxis: {\n          categories: this.chartData.keys\n        },\n        yaxis: {\n          min: 1,\n          // logarithmic: true,\n          // tickAmount: 4,\n          // forceNiceScale: true,\n          labels: {\n            formatter: value => {\n              return value;\n            }\n          }\n        }\n      };\n    },\n    chartSeries() {\n      return [{\n        name: \"Data\",\n        data: this.chartData.values\n      }];\n    }\n  }\n};","map":{"version":3,"names":["props","data","dataAna","chartData","created","computed","chartOptions","normalizedValues","values","map","value","Math","log","maxLogValue","max","chart","type","toolbar","show","dataLabels","enabled","plotOptions","bar","horizontal","borderRadius","borderRadiusApplication","borderRadiusWhenStacked","columnWidth","barHeight","distributed","rangeBarOverlap","rangeBarGroupRows","hideZeroBarsWhenGrouped","isDumbbell","dumbbellColors","undefined","isFunnel","isFunnel3d","colors","ranges","from","to","color","backgroundBarColors","backgroundBarOpacity","backgroundBarRadius","position","maxItems","hideOverflowingLabels","total","formatter","offsetX","offsetY","style","fontSize","fontFamily","fontWeight","xaxis","categories","keys","yaxis","min","labels","chartSeries","name"],"sources":["/var/www/html/project/Dash_Vuexy-master/src/views/ecommerce/apexchart.vue"],"sourcesContent":["<template>\n  <div class=\"maindiv\">\n    <div class=\"chart\">\n      <div class=\"text-start p-2 pb-0\" style=\"font-size: 5px\">\n        <h6 style=\"color: rgba(255, 255, 255, 0.27)\">Orders</h6>\n        <h4 class=\" \">6,24k</h4>\n      </div>\n      <div id=\"chart\">\n        <apexchart\n          :options=\"chartOptions\"\n          :series=\"chartSeries\"\n          type=\"bar\"\n          height=\"350\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n  \n<script>\nexport default {\n  props: [\"data\"],\n  data() {\n    return {\n      dataAna: [],\n      chartData: {},\n    };\n  },\n  created() {\n    this.chartData = this.data;\n  },\n  computed: {\n    chartOptions() {\n      const normalizedValues = this.chartData.values.map((value) =>\n        Math.log(value + 1)\n      );\n      const maxLogValue = Math.max(...normalizedValues);\n\n      return {\n        chart: {\n          type: \"bar\",\n\n          toolbar: {\n            show: false,\n          },\n        },\n        dataLabels: {\n          enabled: false,\n        },\n        plotOptions: {\n          bar: {\n            horizontal: false,\n          borderRadius: 0,\n          borderRadiusApplication: 'around',\n          borderRadiusWhenStacked: 'last',\n          columnWidth: '70%',\n          barHeight: '70%',\n          distributed: false,\n          rangeBarOverlap: true,\n          rangeBarGroupRows: false,\n          hideZeroBarsWhenGrouped: false,\n          isDumbbell: false,\n          dumbbellColors: undefined,\n          isFunnel: false,\n          isFunnel3d: true,\n          colors: {\n              ranges: [{\n                  from: 0,\n                  to: 0,\n                  color: undefined\n              }],\n              backgroundBarColors: [],\n              backgroundBarOpacity: 1,\n              backgroundBarRadius: 0,\n          },\n          dataLabels: {\n              position: 'top',\n              maxItems: 100,\n              hideOverflowingLabels: true,\n              total: {\n                enabled: false,\n                formatter: undefined,\n                offsetX: 0,\n                offsetY: 0,\n                style: {\n                  color: '#373d3f',\n                  fontSize: '12px',\n                  fontFamily: undefined,\n                  fontWeight: 600\n                }\n              }\n          }\n           \n          },\n          \n        },\n        xaxis: {\n          categories: this.chartData.keys,\n          \n        },\n        yaxis: {\n          \n          min: 1,\n          // logarithmic: true,\n          // tickAmount: 4,\n          // forceNiceScale: true,\n          labels: {\n            formatter: (value) => {\n              return value;\n            },\n          },\n        },\n      };\n    },\n    chartSeries() {\n      return [\n        {\n          name: \"Data\",\n          data: this.chartData.values,\n        },\n      ];\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.maindiv {\n  position: relative;\n  border-radius: 5px;\n  background: rgb(154, 155, 157);\n  color: black;\n  height: 100%;\n}\n</style>"],"mappings":"AAoBA,eAAe;EACbA,KAAK,EAAE,CAAC,MAAM,CAAC;EACfC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,EAAE;MACXC,SAAS,EAAE,CAAC;IACd,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACD,SAAQ,GAAI,IAAI,CAACF,IAAI;EAC5B,CAAC;EACDI,QAAQ,EAAE;IACRC,YAAYA,CAAA,EAAG;MACb,MAAMC,gBAAe,GAAI,IAAI,CAACJ,SAAS,CAACK,MAAM,CAACC,GAAG,CAAEC,KAAK,IACvDC,IAAI,CAACC,GAAG,CAACF,KAAI,GAAI,CAAC,EACnB;MACD,MAAMG,WAAU,GAAIF,IAAI,CAACG,GAAG,CAAC,GAAGP,gBAAgB,CAAC;MAEjD,OAAO;QACLQ,KAAK,EAAE;UACLC,IAAI,EAAE,KAAK;UAEXC,OAAO,EAAE;YACPC,IAAI,EAAE;UACR;QACF,CAAC;QACDC,UAAU,EAAE;UACVC,OAAO,EAAE;QACX,CAAC;QACDC,WAAW,EAAE;UACXC,GAAG,EAAE;YACHC,UAAU,EAAE,KAAK;YACnBC,YAAY,EAAE,CAAC;YACfC,uBAAuB,EAAE,QAAQ;YACjCC,uBAAuB,EAAE,MAAM;YAC/BC,WAAW,EAAE,KAAK;YAClBC,SAAS,EAAE,KAAK;YAChBC,WAAW,EAAE,KAAK;YAClBC,eAAe,EAAE,IAAI;YACrBC,iBAAiB,EAAE,KAAK;YACxBC,uBAAuB,EAAE,KAAK;YAC9BC,UAAU,EAAE,KAAK;YACjBC,cAAc,EAAEC,SAAS;YACzBC,QAAQ,EAAE,KAAK;YACfC,UAAU,EAAE,IAAI;YAChBC,MAAM,EAAE;cACJC,MAAM,EAAE,CAAC;gBACLC,IAAI,EAAE,CAAC;gBACPC,EAAE,EAAE,CAAC;gBACLC,KAAK,EAAEP;cACX,CAAC,CAAC;cACFQ,mBAAmB,EAAE,EAAE;cACvBC,oBAAoB,EAAE,CAAC;cACvBC,mBAAmB,EAAE;YACzB,CAAC;YACD1B,UAAU,EAAE;cACR2B,QAAQ,EAAE,KAAK;cACfC,QAAQ,EAAE,GAAG;cACbC,qBAAqB,EAAE,IAAI;cAC3BC,KAAK,EAAE;gBACL7B,OAAO,EAAE,KAAK;gBACd8B,SAAS,EAAEf,SAAS;gBACpBgB,OAAO,EAAE,CAAC;gBACVC,OAAO,EAAE,CAAC;gBACVC,KAAK,EAAE;kBACLX,KAAK,EAAE,SAAS;kBAChBY,QAAQ,EAAE,MAAM;kBAChBC,UAAU,EAAEpB,SAAS;kBACrBqB,UAAU,EAAE;gBACd;cACF;YACJ;UAEA;QAEF,CAAC;QACDC,KAAK,EAAE;UACLC,UAAU,EAAE,IAAI,CAACvD,SAAS,CAACwD;QAE7B,CAAC;QACDC,KAAK,EAAE;UAELC,GAAG,EAAE,CAAC;UACN;UACA;UACA;UACAC,MAAM,EAAE;YACNZ,SAAS,EAAGxC,KAAK,IAAK;cACpB,OAAOA,KAAK;YACd;UACF;QACF;MACF,CAAC;IACH,CAAC;IACDqD,WAAWA,CAAA,EAAG;MACZ,OAAO,CACL;QACEC,IAAI,EAAE,MAAM;QACZ/D,IAAI,EAAE,IAAI,CAACE,SAAS,CAACK;MACvB,CAAC,CACF;IACH;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}