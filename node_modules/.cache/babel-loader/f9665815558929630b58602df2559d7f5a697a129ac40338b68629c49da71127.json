{"ast":null,"code":"import { toHandlers as _toHandlers, mergeProps as _mergeProps, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"input\", _mergeProps({\n    type: \"text\"\n  }, _toHandlers($setup.handlers, true), {\n    value: $setup.value\n  }), null, 16 /* FULL_PROPS */, _hoisted_1), _createElementVNode(\"span\", null, _toDisplayString($setup.errorMessage), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_mergeProps","type","_toHandlers","$setup","handlers","value","_hoisted_1","_toDisplayString","errorMessage"],"sources":["/var/www/html/dashbord_vue_master/src/components/input/CustomField.vue"],"sourcesContent":["<template>\n    <div>\n      <input type=\"text\" v-on=\"handlers\" :value=\"value\" />\n      <span>{{ errorMessage }}</span>\n    </div>\n  </template>\n  \n  <script setup  >\n  import { computed, toRef } from 'vue';\n  import { useField } from 'vee-validate';\n\n  \n  const props = defineProps({\n    name: {\n      type: String,\n    },\n    mode: {\n      type: String,\n      default: 'aggressive',\n    },\n  });\n  \n  // use `toRef` to create reactive references to `name` prop which is passed to `useField`\n  // this is important because vee-validte needs to know if the field name changes\n  // https://vee-validate.logaretm.com/v4/guide/composition-api/caveats\n  const { meta, value, errorMessage, handleChange, handleBlur } = useField(\n    toRef(props, 'name'),\n    null,\n    {\n      validateOnValueUpdate: false,\n    }\n  );\n  \n  // generates the listeners\n  const handlers = computed(() => {\n    const on = {\n      blur: handleBlur,\n      // default input event to sync the value\n      // the `false` here prevents validation\n      input: [(e) => handleChange(e, false)],\n    };\n  \n    // Get list of validation events based on the current mode\n   \n  \n    // add them to the \"on\" handlers object\n    triggers.forEach((t) => {\n      if (Array.isArray(on[t])) {\n        on[t].push(handleChange);\n      } else {\n        on[t] = handleChange;\n      }\n    });\n  \n    return on;\n  });\n  </script>\n  "],"mappings":";;;uBACIA,mBAAA,CAGM,cAFJC,mBAAA,CAAoD,SAApDC,WAAA,CAAoD;IAA7CC,IAAI,EAAC;EAAM,GAACC,WAAA,CAAMC,MAAS,CAAAC,QAAD;IAAGC,KAAK,EAAEF,MAAA,CAAAE;EAAK,+BAAAC,UAAA,GAChDP,mBAAA,CAA+B,cAAAQ,gBAAA,CAAtBJ,MAAA,CAAAK,YAAY,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}