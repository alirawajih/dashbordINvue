{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nconst grpc = require(\"grpc\");\nconst util = require(\"util\");\nconst gcp_channel_factory_1 = require(\"./gcp_channel_factory\");\nexports.GcpChannelFactory = gcp_channel_factory_1.GcpChannelFactory;\nconst protoRoot = require(\"./generated/grpc_gcp\");\nvar ApiConfig = protoRoot.grpc.gcp.ApiConfig;\nvar AffinityConfig = protoRoot.grpc.gcp.AffinityConfig;\n/**\n * Create ApiConfig proto message from config object.\n * @param apiDefinition Api object that specifies channel pool configuation.\n * @return A protobuf message type.\n */\nfunction createGcpApiConfig(apiDefinition) {\n  return ApiConfig.fromObject(apiDefinition);\n}\nexports.createGcpApiConfig = createGcpApiConfig;\n/**\n * Function for creating a gcp channel factory.\n * @memberof grpc-gcp\n * @param address The address of the server to connect to.\n * @param credentials Channel credentials to use when connecting\n * @param options A map of channel options that will be passed to the core.\n * @return {GcpChannelFactory} A GcpChannelFactory instance.\n */\nfunction gcpChannelFactoryOverride(address, credentials, options) {\n  return new gcp_channel_factory_1.GcpChannelFactory(address, credentials, options);\n}\nexports.gcpChannelFactoryOverride = gcpChannelFactoryOverride;\n/**\n * Pass in call properties and return a new object with modified values.\n * This function will be used together with gcpChannelFactoryOverride\n * when constructing a grpc Client.\n * @memberof grpc-gcp\n * @param callProperties Call properties with channel factory object.\n * @return Modified call properties with selected grpc channel object.\n */\nfunction gcpCallInvocationTransformer(callProperties) {\n  const channelFactory = callProperties.channel;\n  if (!channelFactory || !(channelFactory instanceof gcp_channel_factory_1.GcpChannelFactory)) {\n    // The gcpCallInvocationTransformer needs to use gcp channel factory.\n    return callProperties;\n  }\n  const argument = callProperties.argument;\n  const metadata = callProperties.metadata;\n  const call = callProperties.call;\n  const methodDefinition = callProperties.methodDefinition;\n  const path = methodDefinition.path;\n  const callOptions = callProperties.callOptions;\n  const callback = callProperties.callback;\n  const preProcessResult = preProcess(channelFactory, path, argument);\n  const channelRef = preProcessResult.channelRef;\n  const boundKey = preProcessResult.boundKey;\n  const postProcessInterceptor = (\n  // tslint:disable-next-line:no-any options can be any object\n  options, nextCall) => {\n    // tslint:disable-next-line:no-any protobuf message\n    let firstMessage;\n    const requester = {\n      start: (metadata, listener, next) => {\n        const newListener = {\n          onReceiveMetadata: (metadata, next) => {\n            next(metadata);\n          },\n          // tslint:disable-next-line:no-any protobuf message\n          onReceiveMessage: (message, next) => {\n            if (!firstMessage) firstMessage = message;\n            next(message);\n          },\n          onReceiveStatus: (status, next) => {\n            if (status.code === grpc.status.OK) {\n              postProcess(channelFactory, channelRef, path, boundKey, firstMessage);\n            }\n            next(status);\n          }\n        };\n        next(metadata, newListener);\n      },\n      // tslint:disable-next-line:no-any protobuf message\n      sendMessage: (message, next) => {\n        next(message);\n      },\n      halfClose: next => {\n        next();\n      },\n      cancel: next => {\n        next();\n      }\n    };\n    return new grpc.InterceptingCall(nextCall(options), requester);\n  };\n  // Append interceptor to existing interceptors list.\n  const newCallOptions = Object.assign({}, callOptions);\n  const interceptors = callOptions.interceptors ? callOptions.interceptors : [];\n  newCallOptions.interceptors = interceptors.concat([postProcessInterceptor]);\n  return {\n    argument,\n    metadata,\n    call,\n    channel: channelRef.getChannel(),\n    methodDefinition,\n    callOptions: newCallOptions,\n    callback\n  };\n}\nexports.gcpCallInvocationTransformer = gcpCallInvocationTransformer;\n/**\n * Handle channel affinity and pick a channel before call starts.\n * @param channelFactory The channel management factory.\n * @param path Method path.\n * @param argument The request arguments object.\n * @return Result containing bound affinity key and the chosen channel ref\n * object.\n */\nfunction preProcess(channelFactory, path,\n// tslint:disable-next-line:no-any protobuf message\nargument) {\n  const affinityConfig = channelFactory.getAffinityConfig(path);\n  let boundKey;\n  if (argument && affinityConfig) {\n    const command = affinityConfig.command;\n    if (command === AffinityConfig.Command.BOUND || command === AffinityConfig.Command.UNBIND) {\n      boundKey = getAffinityKeyFromMessage(affinityConfig.affinityKey, argument);\n    }\n  }\n  const channelRef = channelFactory.getChannelRef(boundKey);\n  channelRef.activeStreamsCountIncr();\n  return {\n    boundKey,\n    channelRef\n  };\n}\n/**\n * Handle channel affinity and streams count after call is done.\n * @param channelFactory The channel management factory.\n * @param channelRef ChannelRef instance that contains a real grpc channel.\n * @param path Method path.\n * @param boundKey Affinity key bound to a channel.\n * @param responseMsg Response proto message.\n */\nfunction postProcess(channelFactory, channelRef, path, boundKey,\n// tslint:disable-next-line:no-any protobuf message\nresponseMsg) {\n  if (!channelFactory || !responseMsg) return;\n  const affinityConfig = channelFactory.getAffinityConfig(path);\n  if (affinityConfig && affinityConfig.command) {\n    const command = affinityConfig.command;\n    if (command === AffinityConfig.Command.BIND) {\n      const affinityKey = getAffinityKeyFromMessage(affinityConfig.affinityKey, responseMsg);\n      channelFactory.bind(channelRef, affinityKey);\n    } else if (command === AffinityConfig.Command.UNBIND) {\n      channelFactory.unbind(boundKey);\n    }\n  }\n  channelRef.activeStreamsCountDecr();\n}\n/**\n * Retrieve affinity key specified in the proto message.\n * @param affinityKeyName affinity key locator.\n * @param message proto message that contains affinity info.\n * @return Affinity key string.\n */\nfunction getAffinityKeyFromMessage(affinityKeyName,\n// tslint:disable-next-line:no-any protobuf message\nmessage) {\n  if (affinityKeyName) {\n    let currMessage = message;\n    const names = affinityKeyName.split('.');\n    let i = 0;\n    for (; i < names.length; i++) {\n      if (currMessage[names[i]]) {\n        // check if the proto message is generated by protobufjs.\n        currMessage = currMessage[names[i]];\n      } else {\n        // otherwise use jspb format.\n        const getter = 'get' + names[i].charAt(0).toUpperCase() + names[i].substr(1);\n        if (!currMessage || typeof currMessage[getter] !== 'function') break;\n        currMessage = currMessage[getter]();\n      }\n    }\n    if (i !== 0 && i === names.length) return currMessage;\n  }\n  console.error(util.format('Cannot find affinity value from proto message using affinity_key: %s.', affinityKeyName));\n  return '';\n}","map":{"version":3,"names":["grpc","require","util","gcp_channel_factory_1","exports","GcpChannelFactory","protoRoot","ApiConfig","gcp","AffinityConfig","createGcpApiConfig","apiDefinition","fromObject","gcpChannelFactoryOverride","address","credentials","options","gcpCallInvocationTransformer","callProperties","channelFactory","channel","argument","metadata","call","methodDefinition","path","callOptions","callback","preProcessResult","preProcess","channelRef","boundKey","postProcessInterceptor","nextCall","firstMessage","requester","start","listener","next","newListener","onReceiveMetadata","onReceiveMessage","message","onReceiveStatus","status","code","OK","postProcess","sendMessage","halfClose","cancel","InterceptingCall","newCallOptions","Object","assign","interceptors","concat","getChannel","affinityConfig","getAffinityConfig","command","Command","BOUND","UNBIND","getAffinityKeyFromMessage","affinityKey","getChannelRef","activeStreamsCountIncr","responseMsg","BIND","bind","unbind","activeStreamsCountDecr","affinityKeyName","currMessage","names","split","i","length","getter","charAt","toUpperCase","substr","console","error","format"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}