{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2013 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst gtoken_1 = require(\"gtoken\");\nconst messages = require(\"../messages\");\nconst jwtaccess_1 = require(\"./jwtaccess\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass JWT extends oauth2client_1.OAuth2Client {\n  constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n    const opts = optionsOrEmail && typeof optionsOrEmail === 'object' ? optionsOrEmail : {\n      email: optionsOrEmail,\n      keyFile,\n      key,\n      keyId,\n      scopes,\n      subject\n    };\n    super({\n      eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis\n    });\n    this.email = opts.email;\n    this.keyFile = opts.keyFile;\n    this.key = opts.key;\n    this.keyId = opts.keyId;\n    this.scopes = opts.scopes;\n    this.subject = opts.subject;\n    this.additionalClaims = opts.additionalClaims;\n    this.credentials = {\n      refresh_token: 'jwt-placeholder',\n      expiry_date: 1\n    };\n  }\n  /**\n   * Creates a copy of the credential with the specified scopes.\n   * @param scopes List of requested scopes or a single scope.\n   * @return The cloned instance.\n   */\n  createScoped(scopes) {\n    return new JWT({\n      email: this.email,\n      keyFile: this.keyFile,\n      key: this.key,\n      keyId: this.keyId,\n      scopes,\n      subject: this.subject,\n      additionalClaims: this.additionalClaims\n    });\n  }\n  /**\n   * Obtains the metadata to be sent with the request.\n   *\n   * @param url the URI being authorized.\n   */\n  getRequestMetadataAsync(url) {\n    const _super = Object.create(null, {\n      getRequestMetadataAsync: {\n        get: () => super.getRequestMetadataAsync\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.apiKey && !this.hasScopes() && url) {\n        if (this.additionalClaims && this.additionalClaims.target_audience) {\n          const {\n            tokens\n          } = yield this.refreshToken();\n          return {\n            headers: {\n              Authorization: `Bearer ${tokens.id_token}`\n            }\n          };\n        } else {\n          // no scopes have been set, but a uri has been provided. Use JWTAccess\n          // credentials.\n          if (!this.access) {\n            this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId);\n          }\n          const headers = yield this.access.getRequestHeaders(url, this.additionalClaims);\n          return {\n            headers\n          };\n        }\n      } else {\n        return _super.getRequestMetadataAsync.call(this, url);\n      }\n    });\n  }\n  /**\n   * Indicates whether the credential requires scopes to be created by calling\n   * createScoped before use.\n   * @deprecated\n   * @return false if createScoped does not need to be called.\n   */\n  createScopedRequired() {\n    messages.warn(messages.JWT_CREATE_SCOPED_DEPRECATED);\n    return !this.hasScopes();\n  }\n  /**\n   * Determine if there are currently scopes available.\n   */\n  hasScopes() {\n    if (!this.scopes) {\n      return false;\n    }\n    // For arrays, check the array length.\n    if (this.scopes instanceof Array) {\n      return this.scopes.length > 0;\n    }\n    // For others, convert to a string and check the length.\n    return String(this.scopes).length > 0;\n  }\n  authorize(callback) {\n    if (callback) {\n      this.authorizeAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.authorizeAsync();\n    }\n  }\n  authorizeAsync() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.refreshToken();\n      if (!result) {\n        throw new Error('No result returned');\n      }\n      this.credentials = result.tokens;\n      this.credentials.refresh_token = 'jwt-placeholder';\n      this.key = this.gtoken.key;\n      this.email = this.gtoken.iss;\n      return result.tokens;\n    });\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken ignored\n   * @private\n   */\n  refreshTokenNoCache(refreshToken) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const gtoken = this.createGToken();\n      const token = yield gtoken.getToken();\n      const tokens = {\n        access_token: token,\n        token_type: 'Bearer',\n        expiry_date: gtoken.expiresAt,\n        // tslint:disable-next-line no-any\n        id_token: gtoken.rawToken.id_token\n      };\n      this.emit('tokens', tokens);\n      return {\n        res: null,\n        tokens\n      };\n    });\n  }\n  /**\n   * Create a gToken if it doesn't already exist.\n   */\n  createGToken() {\n    if (!this.gtoken) {\n      this.gtoken = new gtoken_1.GoogleToken({\n        iss: this.email,\n        sub: this.subject,\n        scope: this.scopes,\n        keyFile: this.keyFile,\n        key: this.key,\n        additionalClaims: this.additionalClaims\n      });\n    }\n    return this.gtoken;\n  }\n  /**\n   * Create a JWT credentials instance using the given input options.\n   * @param json The input object.\n   */\n  fromJSON(json) {\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the service account auth settings.');\n    }\n    if (!json.client_email) {\n      throw new Error('The incoming JSON object does not contain a client_email field');\n    }\n    if (!json.private_key) {\n      throw new Error('The incoming JSON object does not contain a private_key field');\n    }\n    // Extract the relevant information from the json key file.\n    this.email = json.client_email;\n    this.key = json.private_key;\n    this.keyId = json.private_key_id;\n    this.projectId = json.project_id;\n  }\n  fromStream(inputStream, callback) {\n    if (callback) {\n      this.fromStreamAsync(inputStream).then(r => callback(), callback);\n    } else {\n      return this.fromStreamAsync(inputStream);\n    }\n  }\n  fromStreamAsync(inputStream) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        throw new Error('Must pass in a stream containing the service account auth settings.');\n      }\n      let s = '';\n      inputStream.setEncoding('utf8').on('error', reject).on('data', chunk => s += chunk).on('end', () => {\n        try {\n          const data = JSON.parse(s);\n          this.fromJSON(data);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n  /**\n   * Creates a JWT credentials instance using an API Key for authentication.\n   * @param apiKey The API Key in string form.\n   */\n  fromAPIKey(apiKey) {\n    if (typeof apiKey !== 'string') {\n      throw new Error('Must provide an API Key string.');\n    }\n    this.apiKey = apiKey;\n  }\n  /**\n   * Using the key or keyFile on the JWT client, obtain an object that contains\n   * the key and the client email.\n   */\n  getCredentials() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.key) {\n        return {\n          private_key: this.key,\n          client_email: this.email\n        };\n      } else if (this.keyFile) {\n        const gtoken = this.createGToken();\n        const creds = yield gtoken.getCredentials(this.keyFile);\n        return {\n          private_key: creds.privateKey,\n          client_email: creds.clientEmail\n        };\n      }\n      throw new Error('A key or a keyFile must be provided to getCredentials.');\n    });\n  }\n}\nexports.JWT = JWT;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","gtoken_1","require","messages","jwtaccess_1","oauth2client_1","JWT","OAuth2Client","constructor","optionsOrEmail","keyFile","key","scopes","subject","keyId","opts","email","eagerRefreshThresholdMillis","additionalClaims","credentials","refresh_token","expiry_date","createScoped","getRequestMetadataAsync","url","_super","create","get","apiKey","hasScopes","target_audience","tokens","refreshToken","headers","Authorization","id_token","access","JWTAccess","getRequestHeaders","call","createScopedRequired","warn","JWT_CREATE_SCOPED_DEPRECATED","Array","length","String","authorize","callback","authorizeAsync","r","Error","gtoken","iss","refreshTokenNoCache","createGToken","token","getToken","access_token","token_type","expiresAt","rawToken","emit","res","GoogleToken","sub","scope","fromJSON","json","client_email","private_key","private_key_id","projectId","project_id","fromStream","inputStream","fromStreamAsync","s","setEncoding","on","chunk","data","JSON","parse","fromAPIKey","getCredentials","creds","privateKey","clientEmail"],"sources":["/var/www/html/project/Dash_Vuexy-master/node_modules/google-auth-library/build/src/auth/jwtclient.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2013 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gtoken_1 = require(\"gtoken\");\nconst messages = require(\"../messages\");\nconst jwtaccess_1 = require(\"./jwtaccess\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass JWT extends oauth2client_1.OAuth2Client {\n    constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n        const opts = (optionsOrEmail && typeof optionsOrEmail === 'object') ?\n            optionsOrEmail :\n            { email: optionsOrEmail, keyFile, key, keyId, scopes, subject };\n        super({ eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis });\n        this.email = opts.email;\n        this.keyFile = opts.keyFile;\n        this.key = opts.key;\n        this.keyId = opts.keyId;\n        this.scopes = opts.scopes;\n        this.subject = opts.subject;\n        this.additionalClaims = opts.additionalClaims;\n        this.credentials = { refresh_token: 'jwt-placeholder', expiry_date: 1 };\n    }\n    /**\n     * Creates a copy of the credential with the specified scopes.\n     * @param scopes List of requested scopes or a single scope.\n     * @return The cloned instance.\n     */\n    createScoped(scopes) {\n        return new JWT({\n            email: this.email,\n            keyFile: this.keyFile,\n            key: this.key,\n            keyId: this.keyId,\n            scopes,\n            subject: this.subject,\n            additionalClaims: this.additionalClaims\n        });\n    }\n    /**\n     * Obtains the metadata to be sent with the request.\n     *\n     * @param url the URI being authorized.\n     */\n    getRequestMetadataAsync(url) {\n        const _super = Object.create(null, {\n            getRequestMetadataAsync: { get: () => super.getRequestMetadataAsync }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.apiKey && !this.hasScopes() && url) {\n                if (this.additionalClaims && this.additionalClaims.target_audience) {\n                    const { tokens } = yield this.refreshToken();\n                    return { headers: { Authorization: `Bearer ${tokens.id_token}` } };\n                }\n                else {\n                    // no scopes have been set, but a uri has been provided. Use JWTAccess\n                    // credentials.\n                    if (!this.access) {\n                        this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId);\n                    }\n                    const headers = yield this.access.getRequestHeaders(url, this.additionalClaims);\n                    return { headers };\n                }\n            }\n            else {\n                return _super.getRequestMetadataAsync.call(this, url);\n            }\n        });\n    }\n    /**\n     * Indicates whether the credential requires scopes to be created by calling\n     * createScoped before use.\n     * @deprecated\n     * @return false if createScoped does not need to be called.\n     */\n    createScopedRequired() {\n        messages.warn(messages.JWT_CREATE_SCOPED_DEPRECATED);\n        return !this.hasScopes();\n    }\n    /**\n     * Determine if there are currently scopes available.\n     */\n    hasScopes() {\n        if (!this.scopes) {\n            return false;\n        }\n        // For arrays, check the array length.\n        if (this.scopes instanceof Array) {\n            return this.scopes.length > 0;\n        }\n        // For others, convert to a string and check the length.\n        return String(this.scopes).length > 0;\n    }\n    authorize(callback) {\n        if (callback) {\n            this.authorizeAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.authorizeAsync();\n        }\n    }\n    authorizeAsync() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.refreshToken();\n            if (!result) {\n                throw new Error('No result returned');\n            }\n            this.credentials = result.tokens;\n            this.credentials.refresh_token = 'jwt-placeholder';\n            this.key = this.gtoken.key;\n            this.email = this.gtoken.iss;\n            return result.tokens;\n        });\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken ignored\n     * @private\n     */\n    refreshTokenNoCache(refreshToken) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const gtoken = this.createGToken();\n            const token = yield gtoken.getToken();\n            const tokens = {\n                access_token: token,\n                token_type: 'Bearer',\n                expiry_date: gtoken.expiresAt,\n                // tslint:disable-next-line no-any\n                id_token: gtoken.rawToken.id_token\n            };\n            this.emit('tokens', tokens);\n            return { res: null, tokens };\n        });\n    }\n    /**\n     * Create a gToken if it doesn't already exist.\n     */\n    createGToken() {\n        if (!this.gtoken) {\n            this.gtoken = new gtoken_1.GoogleToken({\n                iss: this.email,\n                sub: this.subject,\n                scope: this.scopes,\n                keyFile: this.keyFile,\n                key: this.key,\n                additionalClaims: this.additionalClaims\n            });\n        }\n        return this.gtoken;\n    }\n    /**\n     * Create a JWT credentials instance using the given input options.\n     * @param json The input object.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the service account auth settings.');\n        }\n        if (!json.client_email) {\n            throw new Error('The incoming JSON object does not contain a client_email field');\n        }\n        if (!json.private_key) {\n            throw new Error('The incoming JSON object does not contain a private_key field');\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(r => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the service account auth settings.');\n            }\n            let s = '';\n            inputStream.setEncoding('utf8')\n                .on('error', reject)\n                .on('data', (chunk) => s += chunk)\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Creates a JWT credentials instance using an API Key for authentication.\n     * @param apiKey The API Key in string form.\n     */\n    fromAPIKey(apiKey) {\n        if (typeof apiKey !== 'string') {\n            throw new Error('Must provide an API Key string.');\n        }\n        this.apiKey = apiKey;\n    }\n    /**\n     * Using the key or keyFile on the JWT client, obtain an object that contains\n     * the key and the client email.\n     */\n    getCredentials() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.key) {\n                return { private_key: this.key, client_email: this.email };\n            }\n            else if (this.keyFile) {\n                const gtoken = this.createGToken();\n                const creds = yield gtoken.getCredentials(this.keyFile);\n                return { private_key: creds.privateKey, client_email: creds.clientEmail };\n            }\n            throw new Error('A key or a keyFile must be provided to getCredentials.');\n        });\n    }\n}\nexports.JWT = JWT;\n//# sourceMappingURL=jwtclient.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}