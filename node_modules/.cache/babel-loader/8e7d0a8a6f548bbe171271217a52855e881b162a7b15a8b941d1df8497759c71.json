{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_view = _resolveComponent(\"router-view\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" <templetform />   \"), _createVNode(_component_router_view)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["_createCommentVNode","_createVNode","_component_router_view"],"sources":["/var/www/html/dashbord_vue_master/src/App.vue"],"sourcesContent":["<template >\n<!-- <templetform />   -->\n<router-view  />\n\n\n</template>\n<script>\n\nimport templetform from \"@/views/templetform.vue\"\n// import defineApilty from \"./ability/defineApilty\"\nimport { useAbility } from '@casl/vue';\nimport { ABILITY_TOKEN } from '@casl/vue';\nimport { AbilityBuilder, Ability } from '@casl/ability';\n// import {ability} from \"./ability/ability\";\n\nexport default{\n  sockets:{\n    connect: function(){\n      console.log('socket connected')\n    },\n    customEmit: function(val){\n      console.log('this method was fired by the socket server. eg: io.emit(\"customEmit\", data)')\n    }\n  },\n  components:{\n    templetform,\n\n  },\n  data(){\n    return{\n\n    }\n  },\n  beforeCreate(){\n\n    // const date = new Date();\n    // if (localStorage.getItem(\"user\")){\n    //   this.$router.push('/')\n\n    // }else{\n    //   this.$router.push('/login')\n\n    // }\n\n\n  },\n  created(){\n    // const { rules } = new AbilityBuilder(Ability);\n\n    // console.log(ability.can('read','ecommerce'))\n    // this.$ability.update(rules);\n\n    // const {can} = useAbility()\n    // console.log(can('manage','all'))\n  },\n  methods:{\n    deletdata(){\n      console.log('cccc')\n    },\n  }\n  \n\n}\n</script>\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #ffffff;\n\n \n}\n\n\n</style>\n"],"mappings":";;;6DACAA,mBAAA,uBAA0B,EAC1BC,YAAA,CAAgBC,sBAAA,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}