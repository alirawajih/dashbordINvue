{"ast":null,"code":"/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.regexp.flags.js\");\nvar clone = require('lodash.clone');\nvar grpc = require('./grpc_extension');\nconst common = require('./common');\nconst logVerbosity = require('./constants').logVerbosity;\nconst IDEMPOTENT_REQUEST_FLAG = 0x10;\nconst WAIT_FOR_READY_FLAG = 0x20;\nconst CACHEABLE_REQUEST_FLAG = 0x40;\nconst WAIT_FOR_READY_EXPLICITLY_SET_FLAG = 0x80;\nconst CORKED_FLAG = 0x100;\n\n/**\n * Class for storing metadata. Keys are normalized to lowercase ASCII.\n * @memberof grpc\n * @constructor\n * @param {Object=} options Boolean options for the beginning of the call.\n *     These options only have any effect when passed at the beginning of\n *     a client request.\n * @param {boolean=} [options.idempotentRequest=false] Signal that the request\n *     is idempotent\n * @param {boolean=} [options.waitForReady=true] Signal that the call should\n *     not return UNAVAILABLE before it has started.\n * @param {boolean=} [options.cacheableRequest=false] Signal that the call is\n *     cacheable. GRPC is free to use GET verb.\n * @param {boolean=} [options.corked=false] Signal that the initial metadata\n *     should be corked.\n * @example\n * var metadata = new metadata_module.Metadata();\n * metadata.set('key1', 'value1');\n * metadata.add('key1', 'value2');\n * metadata.get('key1') // returns ['value1', 'value2']\n */\nfunction Metadata(options) {\n  this._internal_repr = {};\n  this.setOptions(options);\n}\nfunction normalizeKey(key) {\n  key = key.toLowerCase();\n  if (grpc.metadataKeyIsLegal(key)) {\n    return key;\n  } else {\n    throw new Error('Metadata key\"' + key + '\" contains illegal characters');\n  }\n}\nfunction validate(key, value) {\n  if (grpc.metadataKeyIsBinary(key)) {\n    if (!(value instanceof Buffer)) {\n      throw new Error('keys that end with \\'-bin\\' must have Buffer values');\n    }\n  } else {\n    if (typeof value !== 'string') {\n      throw new Error('keys that don\\'t end with \\'-bin\\' must have String values');\n    }\n    if (!grpc.metadataNonbinValueIsLegal(value)) {\n      throw new Error('Metadata string value \"' + value + '\" contains illegal characters');\n    }\n  }\n}\n\n/**\n * Sets the given value for the given key, replacing any other values associated\n * with that key. Normalizes the key.\n * @param {String} key The key to set\n * @param {String|Buffer} value The value to set. Must be a buffer if and only\n *     if the normalized key ends with '-bin'\n */\nMetadata.prototype.set = function (key, value) {\n  key = normalizeKey(key);\n  validate(key, value);\n  this._internal_repr[key] = [value];\n};\n\n/**\n * Adds the given value for the given key. Normalizes the key.\n * @param {String} key The key to add to.\n * @param {String|Buffer} value The value to add. Must be a buffer if and only\n *     if the normalized key ends with '-bin'\n */\nMetadata.prototype.add = function (key, value) {\n  key = normalizeKey(key);\n  validate(key, value);\n  if (!this._internal_repr[key]) {\n    this._internal_repr[key] = [];\n  }\n  this._internal_repr[key].push(value);\n};\n\n/**\n * Remove the given key and any associated values. Normalizes the key.\n * @param {String} key The key to remove\n */\nMetadata.prototype.remove = function (key) {\n  key = normalizeKey(key);\n  if (Object.prototype.hasOwnProperty.call(this._internal_repr, key)) {\n    delete this._internal_repr[key];\n  }\n};\n\n/**\n * Gets a list of all values associated with the key. Normalizes the key.\n * @param {String} key The key to get\n * @return {Array.<String|Buffer>} The values associated with that key\n */\nMetadata.prototype.get = function (key) {\n  key = normalizeKey(key);\n  if (Object.prototype.hasOwnProperty.call(this._internal_repr, key)) {\n    return this._internal_repr[key];\n  } else {\n    return [];\n  }\n};\n\n/**\n * Get a map of each key to a single associated value. This reflects the most\n * common way that people will want to see metadata.\n * @return {Object.<String,String|Buffer>} A key/value mapping of the metadata\n */\nMetadata.prototype.getMap = function () {\n  var result = {};\n  Object.keys(this._internal_repr).forEach(key => {\n    const values = this._internal_repr[key];\n    if (values.length > 0) {\n      result[key] = values[0];\n    }\n  });\n  return result;\n};\n\n/**\n * Clone the metadata object.\n * @return {grpc.Metadata} The new cloned object\n */\nMetadata.prototype.clone = function () {\n  var copy = new Metadata();\n  Object.keys(this._internal_repr).forEach(key => {\n    const value = this._internal_repr[key];\n    copy._internal_repr[key] = clone(value);\n  });\n  copy.flags = this.flags;\n  return copy;\n};\n\n/**\n * Set options on the metadata object\n * @param {Object} options Boolean options for the beginning of the call.\n *     These options only have any effect when passed at the beginning of\n *     a client request.\n * @param {boolean=} [options.idempotentRequest=false] Signal that the request\n *     is idempotent\n * @param {boolean=} [options.waitForReady=true] Signal that the call should\n *     not return UNAVAILABLE before it has started.\n * @param {boolean=} [options.cacheableRequest=false] Signal that the call is\n *     cacheable. GRPC is free to use GET verb.\n * @param {boolean=} [options.corked=false] Signal that the initial metadata\n *     should be corked.\n */\nMetadata.prototype.setOptions = function (options) {\n  let flags = 0;\n  if (options) {\n    if (options.idempotentRequest) {\n      flags |= IDEMPOTENT_REQUEST_FLAG;\n    }\n    if (options.hasOwnProperty('waitForReady')) {\n      flags |= WAIT_FOR_READY_EXPLICITLY_SET_FLAG;\n      if (options.waitForReady) {\n        flags |= WAIT_FOR_READY_FLAG;\n      }\n    }\n    if (options.cacheableRequest) {\n      flags |= CACHEABLE_REQUEST_FLAG;\n    }\n    if (options.corked) {\n      flags |= CORKED_FLAG;\n    }\n  }\n  this.flags = flags;\n};\n\n/**\n * Metadata representation as passed to and the native addon\n * @typedef {object} grpc~CoreMetadata\n * @param {Object.<String, Array.<String|Buffer>>} metadata The metadata\n * @param {number} flags Metadata flags\n */\n\n/**\n * Gets the metadata in the format used by interal code. Intended for internal\n * use only. API stability is not guaranteed.\n * @private\n * @return {grpc~CoreMetadata} The metadata\n */\nMetadata.prototype._getCoreRepresentation = function () {\n  return {\n    metadata: this._internal_repr,\n    flags: this.flags\n  };\n};\n\n/**\n * Creates a Metadata object from a metadata map in the internal format.\n * Intended for internal use only. API stability is not guaranteed.\n * @private\n * @param {grpc~CoreMetadata} metadata The metadata object from core\n * @return {Metadata} The new Metadata object\n */\nMetadata._fromCoreRepresentation = function (metadata) {\n  var newMetadata = new Metadata();\n  if (metadata) {\n    Object.keys(metadata.metadata).forEach(key => {\n      const value = metadata.metadata[key];\n      if (!grpc.metadataKeyIsLegal(key)) {\n        common.log(logVerbosity.ERROR, \"Warning: possibly corrupted metadata key received: \" + key + \": \" + value + \". Please report this at https://github.com/grpc/grpc-node/issues/1173.\");\n      }\n      newMetadata._internal_repr[key] = clone(value);\n    });\n  }\n  newMetadata.flags = metadata.flags;\n  return newMetadata;\n};\nmodule.exports = Metadata;","map":{"version":3,"names":["require","clone","grpc","common","logVerbosity","IDEMPOTENT_REQUEST_FLAG","WAIT_FOR_READY_FLAG","CACHEABLE_REQUEST_FLAG","WAIT_FOR_READY_EXPLICITLY_SET_FLAG","CORKED_FLAG","Metadata","options","_internal_repr","setOptions","normalizeKey","key","toLowerCase","metadataKeyIsLegal","Error","validate","value","metadataKeyIsBinary","Buffer","metadataNonbinValueIsLegal","prototype","set","add","push","remove","Object","hasOwnProperty","call","get","getMap","result","keys","forEach","values","length","copy","flags","idempotentRequest","waitForReady","cacheableRequest","corked","_getCoreRepresentation","metadata","_fromCoreRepresentation","newMetadata","log","ERROR","module","exports"],"sources":["/var/www/html/project/Dash_Vuexy-master/node_modules/grpc/src/metadata.js"],"sourcesContent":["/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n'use strict';\n\nvar clone = require('lodash.clone');\n\nvar grpc = require('./grpc_extension');\n\nconst common = require('./common');\nconst logVerbosity = require('./constants').logVerbosity;\n\nconst IDEMPOTENT_REQUEST_FLAG = 0x10;\nconst WAIT_FOR_READY_FLAG = 0x20;\nconst CACHEABLE_REQUEST_FLAG = 0x40;\nconst WAIT_FOR_READY_EXPLICITLY_SET_FLAG = 0x80;\nconst CORKED_FLAG = 0x100;\n\n/**\n * Class for storing metadata. Keys are normalized to lowercase ASCII.\n * @memberof grpc\n * @constructor\n * @param {Object=} options Boolean options for the beginning of the call.\n *     These options only have any effect when passed at the beginning of\n *     a client request.\n * @param {boolean=} [options.idempotentRequest=false] Signal that the request\n *     is idempotent\n * @param {boolean=} [options.waitForReady=true] Signal that the call should\n *     not return UNAVAILABLE before it has started.\n * @param {boolean=} [options.cacheableRequest=false] Signal that the call is\n *     cacheable. GRPC is free to use GET verb.\n * @param {boolean=} [options.corked=false] Signal that the initial metadata\n *     should be corked.\n * @example\n * var metadata = new metadata_module.Metadata();\n * metadata.set('key1', 'value1');\n * metadata.add('key1', 'value2');\n * metadata.get('key1') // returns ['value1', 'value2']\n */\nfunction Metadata(options) {\n  this._internal_repr = {};\n  this.setOptions(options);\n}\n\nfunction normalizeKey(key) {\n  key = key.toLowerCase();\n  if (grpc.metadataKeyIsLegal(key)) {\n    return key;\n  } else {\n    throw new Error('Metadata key\"' + key + '\" contains illegal characters');\n  }\n}\n\nfunction validate(key, value) {\n  if (grpc.metadataKeyIsBinary(key)) {\n    if (!(value instanceof Buffer)) {\n      throw new Error('keys that end with \\'-bin\\' must have Buffer values');\n    }\n  } else {\n    if (typeof value !== 'string') {\n      throw new Error(\n          'keys that don\\'t end with \\'-bin\\' must have String values');\n    }\n    if (!grpc.metadataNonbinValueIsLegal(value)) {\n      throw new Error('Metadata string value \"' + value +\n                      '\" contains illegal characters');\n    }\n  }\n}\n\n/**\n * Sets the given value for the given key, replacing any other values associated\n * with that key. Normalizes the key.\n * @param {String} key The key to set\n * @param {String|Buffer} value The value to set. Must be a buffer if and only\n *     if the normalized key ends with '-bin'\n */\nMetadata.prototype.set = function(key, value) {\n  key = normalizeKey(key);\n  validate(key, value);\n  this._internal_repr[key] = [value];\n};\n\n/**\n * Adds the given value for the given key. Normalizes the key.\n * @param {String} key The key to add to.\n * @param {String|Buffer} value The value to add. Must be a buffer if and only\n *     if the normalized key ends with '-bin'\n */\nMetadata.prototype.add = function(key, value) {\n  key = normalizeKey(key);\n  validate(key, value);\n  if (!this._internal_repr[key]) {\n    this._internal_repr[key] = [];\n  }\n  this._internal_repr[key].push(value);\n};\n\n/**\n * Remove the given key and any associated values. Normalizes the key.\n * @param {String} key The key to remove\n */\nMetadata.prototype.remove = function(key) {\n  key = normalizeKey(key);\n  if (Object.prototype.hasOwnProperty.call(this._internal_repr, key)) {\n    delete this._internal_repr[key];\n  }\n};\n\n/**\n * Gets a list of all values associated with the key. Normalizes the key.\n * @param {String} key The key to get\n * @return {Array.<String|Buffer>} The values associated with that key\n */\nMetadata.prototype.get = function(key) {\n  key = normalizeKey(key);\n  if (Object.prototype.hasOwnProperty.call(this._internal_repr, key)) {\n    return this._internal_repr[key];\n  } else {\n    return [];\n  }\n};\n\n/**\n * Get a map of each key to a single associated value. This reflects the most\n * common way that people will want to see metadata.\n * @return {Object.<String,String|Buffer>} A key/value mapping of the metadata\n */\nMetadata.prototype.getMap = function() {\n  var result = {};\n  Object.keys(this._internal_repr).forEach(key => {\n    const values = this._internal_repr[key];\n    if(values.length > 0) {\n      result[key] = values[0];\n    }\n  });\n  return result;\n};\n\n/**\n * Clone the metadata object.\n * @return {grpc.Metadata} The new cloned object\n */\nMetadata.prototype.clone = function() {\n  var copy = new Metadata();\n  Object.keys(this._internal_repr).forEach(key => {\n    const value = this._internal_repr[key];\n    copy._internal_repr[key] = clone(value);\n  });\n  copy.flags = this.flags;\n  return copy;\n};\n\n/**\n * Set options on the metadata object\n * @param {Object} options Boolean options for the beginning of the call.\n *     These options only have any effect when passed at the beginning of\n *     a client request.\n * @param {boolean=} [options.idempotentRequest=false] Signal that the request\n *     is idempotent\n * @param {boolean=} [options.waitForReady=true] Signal that the call should\n *     not return UNAVAILABLE before it has started.\n * @param {boolean=} [options.cacheableRequest=false] Signal that the call is\n *     cacheable. GRPC is free to use GET verb.\n * @param {boolean=} [options.corked=false] Signal that the initial metadata\n *     should be corked.\n */\nMetadata.prototype.setOptions = function(options) {\n  let flags = 0;\n  if (options) {\n    if (options.idempotentRequest) {\n      flags |= IDEMPOTENT_REQUEST_FLAG;\n    }\n    if (options.hasOwnProperty('waitForReady')) {\n      flags |= WAIT_FOR_READY_EXPLICITLY_SET_FLAG;\n      if (options.waitForReady) {\n        flags |= WAIT_FOR_READY_FLAG;\n      }\n    }\n    if (options.cacheableRequest) {\n      flags |= CACHEABLE_REQUEST_FLAG;\n    }\n    if (options.corked) {\n      flags |= CORKED_FLAG;\n    }\n  }\n  this.flags = flags;\n}\n\n/**\n * Metadata representation as passed to and the native addon\n * @typedef {object} grpc~CoreMetadata\n * @param {Object.<String, Array.<String|Buffer>>} metadata The metadata\n * @param {number} flags Metadata flags\n */\n\n/**\n * Gets the metadata in the format used by interal code. Intended for internal\n * use only. API stability is not guaranteed.\n * @private\n * @return {grpc~CoreMetadata} The metadata\n */\nMetadata.prototype._getCoreRepresentation = function() {\n  return {\n    metadata: this._internal_repr,\n    flags: this.flags\n  };\n};\n\n/**\n * Creates a Metadata object from a metadata map in the internal format.\n * Intended for internal use only. API stability is not guaranteed.\n * @private\n * @param {grpc~CoreMetadata} metadata The metadata object from core\n * @return {Metadata} The new Metadata object\n */\nMetadata._fromCoreRepresentation = function(metadata) {\n  var newMetadata = new Metadata();\n  if (metadata) {\n    Object.keys(metadata.metadata).forEach(key => {\n      const value = metadata.metadata[key];\n      if (!grpc.metadataKeyIsLegal(key)) {\n        common.log(logVerbosity.ERROR,\n          \"Warning: possibly corrupted metadata key received: \" +\n          key + \": \" + value +\n          \". Please report this at https://github.com/grpc/grpc-node/issues/1173.\");\n      }\n      newMetadata._internal_repr[key] = clone(value);\n    });\n  }\n  newMetadata.flags = metadata.flags;\n  return newMetadata;\n};\n\nmodule.exports = Metadata;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}