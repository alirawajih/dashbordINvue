{"ast":null,"code":"/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * Credentials module\n *\n * This module contains factory methods for two different credential types:\n * CallCredentials and ChannelCredentials. ChannelCredentials are things like\n * SSL credentials that can be used to secure a connection, and are used to\n * construct a Client object. CallCredentials genrally modify metadata, so they\n * can be attached to an individual method call.\n *\n * CallCredentials can be composed with other CallCredentials to create\n * CallCredentials. ChannelCredentials can be composed with CallCredentials\n * to create ChannelCredentials. No combined credential can have more than\n * one ChannelCredentials.\n *\n * For example, to create a client secured with SSL that uses Google\n * default application credentials to authenticate:\n *\n * @example\n * var channel_creds = credentials.createSsl(root_certs);\n * (new GoogleAuth()).getApplicationDefault(function(err, credential) {\n *   var call_creds = credentials.createFromGoogleCredential(credential);\n *   var combined_creds = credentials.combineChannelCredentials(\n *       channel_creds, call_creds);\n *   var client = new Client(address, combined_creds);\n * });\n *\n * @namespace grpc.credentials\n */\n\n'use strict';\n\nvar grpc = require('./grpc_extension');\n\n/**\n * This cannot be constructed directly. Instead, instances of this class should\n * be created using the factory functions in {@link grpc.credentials}\n * @constructor grpc.credentials~CallCredentials\n */\nvar CallCredentials = grpc.CallCredentials;\n\n/**\n * This cannot be constructed directly. Instead, instances of this class should\n * be created using the factory functions in {@link grpc.credentials}\n * @constructor grpc.credentials~ChannelCredentials\n */\nvar ChannelCredentials = grpc.ChannelCredentials;\nvar Metadata = require('./metadata.js');\nvar common = require('./common.js');\nvar constants = require('./constants');\n\n/**\n * @external GoogleCredential\n * @see https://github.com/google/google-auth-library-nodejs\n */\n\nconst PEM_CERT_HEADER = \"-----BEGIN CERTIFICATE-----\";\nconst PEM_CERT_FOOTER = \"-----END CERTIFICATE-----\";\nfunction wrapCheckServerIdentityCallback(callback) {\n  return function (hostname, cert) {\n    // Parse cert from pem to a version that matches the tls.checkServerIdentity\n    // format.\n    // https://nodejs.org/api/tls.html#tls_tls_checkserveridentity_hostname_cert\n\n    var pemHeaderIndex = cert.indexOf(PEM_CERT_HEADER);\n    if (pemHeaderIndex === -1) {\n      return new Error(\"Unable to parse certificate PEM.\");\n    }\n    cert = cert.substring(pemHeaderIndex);\n    var pemFooterIndex = cert.indexOf(PEM_CERT_FOOTER);\n    if (pemFooterIndex === -1) {\n      return new Error(\"Unable to parse certificate PEM.\");\n    }\n    cert = cert.substring(PEM_CERT_HEADER.length, pemFooterIndex);\n    var rawBuffer = Buffer.from(cert.replace(\"\\n\", \"\").replace(\" \", \"\"), \"base64\");\n    return callback(hostname, {\n      raw: rawBuffer\n    });\n  };\n}\n\n/**\n * Create an SSL Credentials object. If using a client-side certificate, both\n * the second and third arguments must be passed. Additional peer verification\n * options can be passed in the fourth argument as described below.\n * @memberof grpc.credentials\n * @alias grpc.credentials.createSsl\n * @kind function\n * @param {Buffer=} root_certs The root certificate data\n * @param {Buffer=} private_key The client certificate private key, if\n *     applicable\n * @param {Buffer=} cert_chain The client certificate cert chain, if applicable\n * @param {Function} verify_options.checkServerIdentity Optional callback\n *     receiving the expected hostname and peer certificate for additional\n *     verification. The callback should return an Error if verification\n *     fails and otherwise return undefined.\n * @return {grpc.credentials~ChannelCredentials} The SSL Credentials object\n */\nexports.createSsl = function (root_certs, private_key, cert_chain, verify_options) {\n  // The checkServerIdentity callback from gRPC core will receive the cert as a PEM.\n  // To better match the checkServerIdentity callback of Node, we wrap the callback\n  // to decode the PEM and populate a cert object.\n  if (verify_options && verify_options.checkServerIdentity) {\n    if (typeof verify_options.checkServerIdentity !== 'function') {\n      throw new TypeError(\"Value of checkServerIdentity must be a function.\");\n    }\n    // Make a shallow clone of verify_options so our modification of the callback\n    // isn't reflected to the caller\n    var updated_verify_options = Object.assign({}, verify_options);\n    updated_verify_options.checkServerIdentity = wrapCheckServerIdentityCallback(verify_options.checkServerIdentity);\n    arguments[3] = updated_verify_options;\n  }\n  return ChannelCredentials.createSsl.apply(this, arguments);\n};\n\n/**\n * @callback grpc.credentials~metadataCallback\n * @param {Error} error The error, if getting metadata failed\n * @param {grpc.Metadata} metadata The metadata\n */\n\n/**\n * @callback grpc.credentials~generateMetadata\n * @param {Object} params Parameters that can modify metadata generation\n * @param {string} params.service_url The URL of the service that the call is\n *     going to\n * @param {grpc.credentials~metadataCallback} callback\n */\n\n/**\n * Create a gRPC credentials object from a metadata generation function. This\n * function gets the service URL and a callback as parameters. The error\n * passed to the callback can optionally have a 'code' value attached to it,\n * which corresponds to a status code that this library uses.\n * @memberof grpc.credentials\n * @alias grpc.credentials.createFromMetadataGenerator\n * @param {grpc.credentials~generateMetadata} metadata_generator The function\n *     that generates metadata\n * @return {grpc.credentials~CallCredentials} The credentials object\n */\nexports.createFromMetadataGenerator = function (metadata_generator) {\n  return CallCredentials.createFromPlugin(function (service_url, cb_data, callback) {\n    metadata_generator({\n      service_url: service_url\n    }, function (error, metadata) {\n      var code = constants.status.OK;\n      var message = '';\n      if (error) {\n        message = error.message;\n        if (error.hasOwnProperty('code') && Number.isFinite(error.code)) {\n          code = error.code;\n        } else {\n          code = constants.status.UNAUTHENTICATED;\n        }\n        if (!metadata) {\n          metadata = new Metadata();\n        }\n      }\n      callback(code, message, metadata._getCoreRepresentation(), cb_data);\n    });\n  });\n};\nfunction getAuthorizationHeaderFromGoogleCredential(google_credential, url, callback) {\n  // google-auth-library pre-v2.0.0 does not have getRequestHeaders\n  // but has getRequestMetadata, which is deprecated in v2.0.0\n  if (typeof google_credential.getRequestHeaders === 'function') {\n    google_credential.getRequestHeaders(url).then(function (header) {\n      callback(null, header.Authorization);\n    }).catch(function (err) {\n      callback(err);\n      return;\n    });\n  } else {\n    google_credential.getRequestMetadata(url, function (err, header) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      callback(null, header.Authorization);\n    });\n  }\n}\n\n/**\n * Create a gRPC credential from a Google credential object.\n * @memberof grpc.credentials\n * @alias grpc.credentials.createFromGoogleCredential\n * @param {external:GoogleCredential} google_credential The Google credential\n *     object to use\n * @return {grpc.credentials~CallCredentials} The resulting credentials object\n */\nexports.createFromGoogleCredential = function (google_credential) {\n  return exports.createFromMetadataGenerator(function (auth_context, callback) {\n    var service_url = auth_context.service_url;\n    getAuthorizationHeaderFromGoogleCredential(google_credential, service_url, function (err, authHeader) {\n      if (err) {\n        common.log(constants.logVerbosity.INFO, 'Auth error:' + err);\n        callback(err);\n        return;\n      }\n      var metadata = new Metadata();\n      metadata.add('authorization', authHeader);\n      callback(null, metadata);\n    });\n  });\n};\n\n/**\n * Combine a ChannelCredentials with any number of CallCredentials into a single\n * ChannelCredentials object.\n * @memberof grpc.credentials\n * @alias grpc.credentials.combineChannelCredentials\n * @param {grpc.credentials~ChannelCredentials} channel_credential The ChannelCredentials to\n *     start with\n * @param {...grpc.credentials~CallCredentials} credentials The CallCredentials to compose\n * @return {grpc.credentials~ChannelCredentials} A credentials object that combines all of the\n *     input credentials\n */\nexports.combineChannelCredentials = function (channel_credential) {\n  var current = channel_credential;\n  for (var i = 1; i < arguments.length; i++) {\n    current = current.compose(arguments[i]);\n  }\n  return current;\n};\n\n/**\n * Combine any number of CallCredentials into a single CallCredentials object\n * @memberof grpc.credentials\n * @alias grpc.credentials.combineCallCredentials\n * @param {...grpc.credentials~CallCredentials} credentials The CallCredentials to compose\n * @return {grpc.credentials~CallCredentials} A credentials object that combines all of the input\n *     credentials\n */\nexports.combineCallCredentials = function () {\n  var current = arguments[0];\n  for (var i = 1; i < arguments.length; i++) {\n    current = current.compose(arguments[i]);\n  }\n  return current;\n};\n\n/**\n * Create an insecure credentials object. This is used to create a channel that\n * does not use SSL. This cannot be composed with anything.\n * @memberof grpc.credentials\n * @alias grpc.credentials.createInsecure\n * @kind function\n * @return {grpc.credentials~ChannelCredentials} The insecure credentials object\n */\nexports.createInsecure = ChannelCredentials.createInsecure;","map":{"version":3,"names":["grpc","require","CallCredentials","ChannelCredentials","Metadata","common","constants","PEM_CERT_HEADER","PEM_CERT_FOOTER","wrapCheckServerIdentityCallback","callback","hostname","cert","pemHeaderIndex","indexOf","Error","substring","pemFooterIndex","length","rawBuffer","Buffer","from","replace","raw","exports","createSsl","root_certs","private_key","cert_chain","verify_options","checkServerIdentity","TypeError","updated_verify_options","Object","assign","arguments","apply","createFromMetadataGenerator","metadata_generator","createFromPlugin","service_url","cb_data","error","metadata","code","status","OK","message","hasOwnProperty","Number","isFinite","UNAUTHENTICATED","_getCoreRepresentation","getAuthorizationHeaderFromGoogleCredential","google_credential","url","getRequestHeaders","then","header","Authorization","catch","err","getRequestMetadata","createFromGoogleCredential","auth_context","authHeader","log","logVerbosity","INFO","add","combineChannelCredentials","channel_credential","current","i","compose","combineCallCredentials","createInsecure"],"sources":["/var/www/html/project/Dash_Vuexy-master/node_modules/grpc/src/credentials.js"],"sourcesContent":["/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * Credentials module\n *\n * This module contains factory methods for two different credential types:\n * CallCredentials and ChannelCredentials. ChannelCredentials are things like\n * SSL credentials that can be used to secure a connection, and are used to\n * construct a Client object. CallCredentials genrally modify metadata, so they\n * can be attached to an individual method call.\n *\n * CallCredentials can be composed with other CallCredentials to create\n * CallCredentials. ChannelCredentials can be composed with CallCredentials\n * to create ChannelCredentials. No combined credential can have more than\n * one ChannelCredentials.\n *\n * For example, to create a client secured with SSL that uses Google\n * default application credentials to authenticate:\n *\n * @example\n * var channel_creds = credentials.createSsl(root_certs);\n * (new GoogleAuth()).getApplicationDefault(function(err, credential) {\n *   var call_creds = credentials.createFromGoogleCredential(credential);\n *   var combined_creds = credentials.combineChannelCredentials(\n *       channel_creds, call_creds);\n *   var client = new Client(address, combined_creds);\n * });\n *\n * @namespace grpc.credentials\n */\n\n'use strict';\n\nvar grpc = require('./grpc_extension');\n\n/**\n * This cannot be constructed directly. Instead, instances of this class should\n * be created using the factory functions in {@link grpc.credentials}\n * @constructor grpc.credentials~CallCredentials\n */\nvar CallCredentials = grpc.CallCredentials;\n\n/**\n * This cannot be constructed directly. Instead, instances of this class should\n * be created using the factory functions in {@link grpc.credentials}\n * @constructor grpc.credentials~ChannelCredentials\n */\nvar ChannelCredentials = grpc.ChannelCredentials;\n\nvar Metadata = require('./metadata.js');\n\nvar common = require('./common.js');\n\nvar constants = require('./constants');\n\n/**\n * @external GoogleCredential\n * @see https://github.com/google/google-auth-library-nodejs\n */\n\nconst PEM_CERT_HEADER = \"-----BEGIN CERTIFICATE-----\";\nconst PEM_CERT_FOOTER = \"-----END CERTIFICATE-----\";\n\nfunction wrapCheckServerIdentityCallback(callback) {\n  return function(hostname, cert) {\n    // Parse cert from pem to a version that matches the tls.checkServerIdentity\n    // format.\n    // https://nodejs.org/api/tls.html#tls_tls_checkserveridentity_hostname_cert\n\n    var pemHeaderIndex = cert.indexOf(PEM_CERT_HEADER);\n    if (pemHeaderIndex === -1) {\n      return new Error(\"Unable to parse certificate PEM.\");\n    }\n    cert = cert.substring(pemHeaderIndex);\n    var pemFooterIndex = cert.indexOf(PEM_CERT_FOOTER);\n    if (pemFooterIndex === -1) {\n      return new Error(\"Unable to parse certificate PEM.\");\n    }\n    cert = cert.substring(PEM_CERT_HEADER.length, pemFooterIndex);\n    var rawBuffer = Buffer.from(cert.replace(\"\\n\", \"\").replace(\" \", \"\"), \"base64\");\n\n    return callback(hostname, { raw: rawBuffer });\n  }\n}\n\n/**\n * Create an SSL Credentials object. If using a client-side certificate, both\n * the second and third arguments must be passed. Additional peer verification\n * options can be passed in the fourth argument as described below.\n * @memberof grpc.credentials\n * @alias grpc.credentials.createSsl\n * @kind function\n * @param {Buffer=} root_certs The root certificate data\n * @param {Buffer=} private_key The client certificate private key, if\n *     applicable\n * @param {Buffer=} cert_chain The client certificate cert chain, if applicable\n * @param {Function} verify_options.checkServerIdentity Optional callback\n *     receiving the expected hostname and peer certificate for additional\n *     verification. The callback should return an Error if verification\n *     fails and otherwise return undefined.\n * @return {grpc.credentials~ChannelCredentials} The SSL Credentials object\n */\nexports.createSsl = function(root_certs, private_key, cert_chain, verify_options) {\n  // The checkServerIdentity callback from gRPC core will receive the cert as a PEM.\n  // To better match the checkServerIdentity callback of Node, we wrap the callback\n  // to decode the PEM and populate a cert object.\n  if (verify_options && verify_options.checkServerIdentity) {\n    if (typeof verify_options.checkServerIdentity !== 'function') {\n      throw new TypeError(\"Value of checkServerIdentity must be a function.\");\n    }\n    // Make a shallow clone of verify_options so our modification of the callback\n    // isn't reflected to the caller\n    var updated_verify_options = Object.assign({}, verify_options);\n    updated_verify_options.checkServerIdentity = wrapCheckServerIdentityCallback(\n        verify_options.checkServerIdentity);\n    arguments[3] = updated_verify_options;\n  }\n  return ChannelCredentials.createSsl.apply(this, arguments);\n}\n\n\n/**\n * @callback grpc.credentials~metadataCallback\n * @param {Error} error The error, if getting metadata failed\n * @param {grpc.Metadata} metadata The metadata\n */\n\n/**\n * @callback grpc.credentials~generateMetadata\n * @param {Object} params Parameters that can modify metadata generation\n * @param {string} params.service_url The URL of the service that the call is\n *     going to\n * @param {grpc.credentials~metadataCallback} callback\n */\n\n/**\n * Create a gRPC credentials object from a metadata generation function. This\n * function gets the service URL and a callback as parameters. The error\n * passed to the callback can optionally have a 'code' value attached to it,\n * which corresponds to a status code that this library uses.\n * @memberof grpc.credentials\n * @alias grpc.credentials.createFromMetadataGenerator\n * @param {grpc.credentials~generateMetadata} metadata_generator The function\n *     that generates metadata\n * @return {grpc.credentials~CallCredentials} The credentials object\n */\nexports.createFromMetadataGenerator = function(metadata_generator) {\n  return CallCredentials.createFromPlugin(function(service_url, cb_data,\n                                                   callback) {\n    metadata_generator({service_url: service_url}, function(error, metadata) {\n      var code = constants.status.OK;\n      var message = '';\n      if (error) {\n        message = error.message;\n        if (error.hasOwnProperty('code') && Number.isFinite(error.code)) {\n          code = error.code;\n        } else {\n          code = constants.status.UNAUTHENTICATED;\n        }\n        if (!metadata) {\n          metadata = new Metadata();\n        }\n      }\n      callback(code, message, metadata._getCoreRepresentation(), cb_data);\n    });\n  });\n};\n\nfunction getAuthorizationHeaderFromGoogleCredential(google_credential, url, callback) {\n  // google-auth-library pre-v2.0.0 does not have getRequestHeaders\n  // but has getRequestMetadata, which is deprecated in v2.0.0\n  if (typeof google_credential.getRequestHeaders === 'function') {\n    google_credential.getRequestHeaders(url)\n      .then(function(header) {\n        callback(null, header.Authorization);\n      })\n      .catch(function(err) {\n        callback(err);\n        return;\n      });\n  } else {\n    google_credential.getRequestMetadata(url, function(err, header) {\n      if (err) {\n        callback(err);\n        return;\n      }\n      callback(null, header.Authorization);\n    });\n  }\n}\n\n/**\n * Create a gRPC credential from a Google credential object.\n * @memberof grpc.credentials\n * @alias grpc.credentials.createFromGoogleCredential\n * @param {external:GoogleCredential} google_credential The Google credential\n *     object to use\n * @return {grpc.credentials~CallCredentials} The resulting credentials object\n */\nexports.createFromGoogleCredential = function(google_credential) {\n  return exports.createFromMetadataGenerator(function(auth_context, callback) {\n    var service_url = auth_context.service_url;\n    getAuthorizationHeaderFromGoogleCredential(google_credential, service_url,\n      function(err, authHeader) {\n        if (err) {\n          common.log(constants.logVerbosity.INFO, 'Auth error:' + err);\n          callback(err);\n          return;\n        }\n        var metadata = new Metadata();\n        metadata.add('authorization', authHeader);\n        callback(null, metadata);\n      });\n  });\n};\n\n/**\n * Combine a ChannelCredentials with any number of CallCredentials into a single\n * ChannelCredentials object.\n * @memberof grpc.credentials\n * @alias grpc.credentials.combineChannelCredentials\n * @param {grpc.credentials~ChannelCredentials} channel_credential The ChannelCredentials to\n *     start with\n * @param {...grpc.credentials~CallCredentials} credentials The CallCredentials to compose\n * @return {grpc.credentials~ChannelCredentials} A credentials object that combines all of the\n *     input credentials\n */\nexports.combineChannelCredentials = function(channel_credential) {\n  var current = channel_credential;\n  for (var i = 1; i < arguments.length; i++) {\n    current = current.compose(arguments[i]);\n  }\n  return current;\n};\n\n/**\n * Combine any number of CallCredentials into a single CallCredentials object\n * @memberof grpc.credentials\n * @alias grpc.credentials.combineCallCredentials\n * @param {...grpc.credentials~CallCredentials} credentials The CallCredentials to compose\n * @return {grpc.credentials~CallCredentials} A credentials object that combines all of the input\n *     credentials\n */\nexports.combineCallCredentials = function() {\n  var current = arguments[0];\n  for (var i = 1; i < arguments.length; i++) {\n    current = current.compose(arguments[i]);\n  }\n  return current;\n};\n\n/**\n * Create an insecure credentials object. This is used to create a channel that\n * does not use SSL. This cannot be composed with anything.\n * @memberof grpc.credentials\n * @alias grpc.credentials.createInsecure\n * @kind function\n * @return {grpc.credentials~ChannelCredentials} The insecure credentials object\n */\nexports.createInsecure = ChannelCredentials.createInsecure;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}