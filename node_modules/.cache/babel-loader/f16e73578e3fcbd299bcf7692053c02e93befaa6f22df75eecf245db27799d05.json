{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2018 Google LLC. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nrequire(\"core-js/modules/es.array.push.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst google_proto_files_1 = require(\"google-proto-files\");\nconst apiCallable = require(\"./apiCallable\");\nconst gax = require(\"./gax\");\nconst pagedIteration = require(\"./pagedIteration\");\nconst pathTemplate = require(\"./pathTemplate\");\nconst configData = require('./operations_client_config');\nObject.assign(gax, apiCallable);\nObject.assign(gax, pathTemplate);\nObject.assign(gax, pagedIteration);\nexports.SERVICE_ADDRESS = 'longrunning.googleapis.com';\nconst DEFAULT_SERVICE_PORT = 443;\nconst CODE_GEN_NAME_VERSION = 'gapic/0.7.1';\nconst PAGE_DESCRIPTORS = {\n  listOperations: new gax['PageDescriptor']('pageToken', 'nextPageToken', 'operations')\n};\n/**\n * The scopes needed to make gRPC calls to all of the methods defined in\n * this service.\n */\nexports.ALL_SCOPES = [];\n/**\n * Manages long-running operations with an API service.\n *\n * When an API method normally takes long time to complete, it can be designed\n * to return {@link Operation} to the client, and the client can use this\n * interface to receive the real response asynchronously by polling the\n * operation resource, or pass the operation resource to another API (such as\n * Google Cloud Pub/Sub API) to receive the response.  Any API service that\n * returns long-running operations should implement the `Operations` interface\n * so developers can have a consistent client experience.\n *\n * This will be created through a builder function which can be obtained by the\n * module. See the following example of how to initialize the module and how to\n * access to the builder.\n * @see {@link operationsClient}\n *\n * @class\n */\nclass OperationsClient {\n  constructor(\n  // tslint:disable-next-line no-any\n  gaxGrpc, grpcClients, options) {\n    const opts = Object.assign({\n      servicePath: exports.SERVICE_ADDRESS,\n      port: DEFAULT_SERVICE_PORT,\n      clientConfig: {}\n    }, options);\n    const googleApiClient = ['gl-node/' + process.versions.node];\n    if (opts.libName && opts.libVersion) {\n      googleApiClient.push(opts.libName + '/' + opts.libVersion);\n    }\n    googleApiClient.push(CODE_GEN_NAME_VERSION, 'gax/' + gax['version'], 'grpc/' + gaxGrpc.grpcVersion);\n    const defaults = gaxGrpc.constructSettings('google.longrunning.Operations', configData, opts.clientConfig, {\n      'x-goog-api-client': googleApiClient.join(' ')\n    });\n    this.auth = gaxGrpc.auth;\n    const operationsStub = gaxGrpc.createStub(grpcClients.google.longrunning.Operations, opts);\n    const operationsStubMethods = ['getOperation', 'listOperations', 'cancelOperation', 'deleteOperation'];\n    operationsStubMethods.forEach(methodName => {\n      this['_' + methodName] = gax['createApiCall'](operationsStub.then(operationsStub => {\n        return (...args) => {\n          return operationsStub[methodName].apply(operationsStub, args);\n        };\n      }), defaults[methodName], PAGE_DESCRIPTORS[methodName]);\n    });\n  }\n  getProjectId(callback) {\n    return this.auth.getProjectId(callback);\n  }\n  // Service calls\n  /**\n   * Gets the latest state of a long-running operation.  Clients can use this\n   * method to poll the operation result at intervals as recommended by the API\n   * service.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   *   details.\n   * @param {function(?Error, ?Object)=} callback\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   * @return {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}. The promise has a method named\n   * \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const name = '';\n   * const [response] = await client.getOperation({name});\n   * // doThingsWith(response)\n   */\n  getOperation(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n    return this._getOperation(request, options, callback);\n  }\n  /**\n   * Lists operations that match the specified filter in the request. If the\n   * server doesn't support this method, it returns `UNIMPLEMENTED`.\n   *\n   * NOTE: the `name` binding below allows API services to override the binding\n   * to use different resource name schemes.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error, ?Array, ?Object, ?Object)=} callback\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   *\n   *   When autoPaginate: false is specified through options, it contains the\n   * result in a single response. If the response indicates the next page\n   * exists, the third parameter is set to be used for the next request object.\n   * The fourth parameter keeps the raw response object of an object\n   * representing [google.longrunning.ListOperationsResponse]{@link\n   * external:\"google.longrunning.ListOperationsResponse\"}.\n   * @return {Promise} - The promise which resolves to an array.\n   *   The first element of the array is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"}.\n   *\n   *   When autoPaginate: false is specified through options, the array has\n   * three elements. The first element is Array of\n   * [google.longrunning.Operation]{@link\n   * external:\"google.longrunning.Operation\"} in a single response. The second\n   * element is the next request object if the response indicates the next page\n   * exists, or null. The third element is an object representing\n   * [google.longrunning.ListOperationsResponse]{@link\n   * external:\"google.longrunning.ListOperationsResponse\"}.\n   *\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const request = {\n   *     name: '',\n   *     filter: ''\n   * };\n   * // Iterate over all elements.\n   * const [resources] = await client.listOperations(request);\n   * for (const resource of resources) {\n   *   console.log(resources);\n   * }\n   *\n   * // Or obtain the paged response.\n   * const options = {autoPaginate: false};\n   * let nextRequest = request;\n   * while(nextRequest) {\n   *   const response = await client.listOperations(nextRequest, options);\n   *   const resources = response[0];\n   *   nextRequest = response[1];\n   *   const rawResponse = response[2];\n   *   for (const resource of resources) {\n   *     // doThingsWith(resource);\n   *   }\n   * };\n   */\n  listOperations(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n    return this['_listOperations'](request, options, callback);\n  }\n  /**\n   * Equivalent to {@link listOperations}, but returns a NodeJS Stream object.\n   *\n   * This fetches the paged responses for {@link listOperations} continuously\n   * and invokes the callback registered for 'data' event for each element in\n   * the responses.\n   *\n   * The returned object has 'end' method when no more elements are required.\n   *\n   * autoPaginate option will be ignored.\n   *\n   * @see {@link https://nodejs.org/api/stream.html}\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize -\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   *   details.\n   * @return {Stream} - An object stream which emits an object representing [google.longrunning.Operation]{@link external:\"google.longrunning.Operation\"} on 'data' event.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * const request = {\n   *   name: '',\n   *   filter: ''\n   * };\n   * client.listOperationsStream(request)\n   *   .on('data', element => {\n   *     // doThingsWith(element)\n   *   })\n   *   .on('error', err => {\n   *     console.error(err);\n   *   });\n   */\n  listOperationsStream(request, options = {}) {\n    return PAGE_DESCRIPTORS.listOperations.createStream(this._listOperations, request, options);\n  }\n  /**\n   * Starts asynchronous cancellation on a long-running operation.  The server\n   * makes a best effort to cancel the operation, but success is not\n   * guaranteed.  If the server doesn't support this method, it returns\n   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n   * {@link Operations.GetOperation} or\n   * other methods to check whether the cancellation succeeded or whether the\n   * operation completed despite cancellation. On successful cancellation,\n   * the operation is not deleted; instead, it becomes an operation with\n   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n   * 1, corresponding to `Code.CANCELLED`.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource to be cancelled.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error)=} callback\n   *   The function which will be called with the result of the API call.\n   * @return {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * await client.cancelOperation({name: ''});\n   */\n  cancelOperation(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n    return this._cancelOperation(request, options, callback);\n  }\n  /**\n   * Deletes a long-running operation. This method indicates that the client is\n   * no longer interested in the operation result. It does not cancel the\n   * operation. If the server doesn't support this method, it returns\n   * `google.rpc.Code.UNIMPLEMENTED`.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource to be deleted.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See [gax.CallOptions]{@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions} for the\n   * details.\n   * @param {function(?Error)=} callback\n   *   The function which will be called with the result of the API call.\n   * @return {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   *\n   * const client = longrunning.operationsClient();\n   * await client.deleteOperation({name: ''});\n   */\n  deleteOperation(request, options, callback) {\n    if (options instanceof Function && callback === undefined) {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n    return this._deleteOperation(request, options, callback);\n  }\n}\nexports.OperationsClient = OperationsClient;\nclass OperationsClientBuilder {\n  /**\n   * Builds a new Operations Client\n   * @param gaxGrpc {GrpcClient}\n   */\n  constructor(gaxGrpc) {\n    const protoFilesRoot = google_proto_files_1.getProtoPath('..');\n    // tslint:disable-next-line no-any\n    const operationsClient = gaxGrpc.loadProto(protoFilesRoot, 'google/longrunning/operations.proto');\n    Object.assign(this, operationsClient.google.longrunning);\n    /**\n     * Build a new instance of {@link OperationsClient}.\n     *\n     * @param {Object=} opts - The optional parameters.\n     * @param {String=} opts.servicePath - Domain name of the API remote host.\n     * @param {number=} opts.port - The port on which to connect to the remote host.\n     * @param {grpc.ClientCredentials=} opts.sslCreds - A ClientCredentials for use with an SSL-enabled channel.\n     * @param {Object=} opts.clientConfig - The customized config to build the call settings. See {@link gax.constructSettings} for the format.\n     */\n    this.operationsClient = opts => {\n      return new OperationsClient(gaxGrpc, operationsClient, opts);\n    };\n    Object.assign(this.operationsClient, OperationsClient);\n  }\n}\nexports.OperationsClientBuilder = OperationsClientBuilder;","map":{"version":3,"names":["require","google_proto_files_1","apiCallable","gax","pagedIteration","pathTemplate","configData","Object","assign","exports","SERVICE_ADDRESS","DEFAULT_SERVICE_PORT","CODE_GEN_NAME_VERSION","PAGE_DESCRIPTORS","listOperations","ALL_SCOPES","OperationsClient","constructor","gaxGrpc","grpcClients","options","opts","servicePath","port","clientConfig","googleApiClient","process","versions","node","libName","libVersion","push","grpcVersion","defaults","constructSettings","join","auth","operationsStub","createStub","google","longrunning","Operations","operationsStubMethods","forEach","methodName","then","args","apply","getProjectId","callback","getOperation","request","Function","undefined","_getOperation","listOperationsStream","createStream","_listOperations","cancelOperation","_cancelOperation","deleteOperation","_deleteOperation","OperationsClientBuilder","protoFilesRoot","getProtoPath","operationsClient","loadProto"],"sources":["../../src/operationsClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}