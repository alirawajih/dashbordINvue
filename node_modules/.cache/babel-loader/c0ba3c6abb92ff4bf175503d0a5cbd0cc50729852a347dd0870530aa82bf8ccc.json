{"ast":null,"code":"/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\nvar util = require('util');\nvar SSL_ROOTS_PATH = path.resolve(__dirname, 'deps', 'grpc', 'etc', 'roots.pem');\nvar client = require('./src/client.js');\nvar server = require('./src/server.js');\nvar common = require('./src/common.js');\nvar Metadata = require('./src/metadata.js');\nvar grpc = require('./src/grpc_extension');\nvar protobuf_js_5_common = require('./src/protobuf_js_5_common');\nvar protobuf_js_6_common = require('./src/protobuf_js_6_common');\nvar constants = require('./src/constants.js');\ngrpc.setDefaultRootsPem(fs.readFileSync(SSL_ROOTS_PATH, 'ascii'));\n\n/**\n * @namespace grpc\n */\n\n/**\n * Load a ProtoBuf.js object as a gRPC object.\n * @memberof grpc\n * @alias grpc.loadObject\n * @param {Object} value The ProtoBuf.js reflection object to load\n * @param {Object=} options Options to apply to the loaded file\n * @param {bool=} [options.binaryAsBase64=false] deserialize bytes values as\n *     base64 strings instead of Buffers\n * @param {bool=} [options.longsAsStrings=true] deserialize long values as\n *     strings instead of objects\n * @param {bool=} [options.enumsAsStrings=true] deserialize enum values as\n *     strings instead of numbers. Only works with Protobuf.js 6 values.\n * @param {bool=} [options.deprecatedArgumentOrder=false] use the beta method\n *     argument order for client methods, with optional arguments after the\n *     callback. This option is only a temporary stopgap measure to smooth an\n *     API breakage. It is deprecated, and new code should not use it.\n * @param {(number|string)=} [options.protobufjsVersion='detect'] 5 and 6\n *     respectively indicate that an object from the corresponding version of\n *     Protobuf.js is provided in the value argument. If the option is 'detect',\n *     gRPC will guess what the version is based on the structure of the value.\n * @return {Object<string, *>} The resulting gRPC object.\n */\nexports.loadObject = function loadObject(value, options) {\n  options = Object.assign({}, common.defaultGrpcOptions, options);\n  options = Object.assign({}, {\n    'protobufjsVersion': 'detect'\n  }, options);\n  var protobufjsVersion;\n  if (options.protobufjsVersion === 'detect') {\n    if (protobuf_js_6_common.isProbablyProtobufJs6(value)) {\n      protobufjsVersion = 6;\n    } else if (protobuf_js_5_common.isProbablyProtobufJs5(value)) {\n      protobufjsVersion = 5;\n    } else {\n      var error_message = 'Could not detect ProtoBuf.js version. Please ' + 'specify the version number with the \"protobufjsVersion\" option';\n      throw new Error(error_message);\n    }\n  } else {\n    protobufjsVersion = options.protobufjsVersion;\n  }\n  switch (protobufjsVersion) {\n    case 6:\n      return protobuf_js_6_common.loadObject(value, options);\n    case 5:\n      return protobuf_js_5_common.loadObject(value, options);\n    default:\n      throw new Error('Unrecognized protobufjsVersion', protobufjsVersion);\n  }\n};\nvar loadObject = exports.loadObject;\n\n/**\n * Load a gRPC object from a .proto file.\n * @deprecated Use the {@link https://www.npmjs.com/package/@grpc/proto-loader|proto-loader module}\n       with grpc.loadPackageDefinition instead.\n * @memberof grpc\n * @alias grpc.load\n * @param {string|{root: string, file: string}} filename The file to load\n * @param {string=} format The file format to expect. Must be either 'proto' or\n *     'json'. Defaults to 'proto'\n * @param {Object=} options Options to apply to the loaded file\n * @param {bool=} [options.convertFieldsToCamelCase=false] Load this file with\n *     field names in camel case instead of their original case\n * @param {bool=} [options.binaryAsBase64=false] deserialize bytes values as\n *     base64 strings instead of Buffers\n * @param {bool=} [options.longsAsStrings=true] deserialize long values as\n *     strings instead of objects\n * @param {bool=} [options.deprecatedArgumentOrder=false] use the beta method\n *     argument order for client methods, with optional arguments after the\n *     callback. This option is only a temporary stopgap measure to smooth an\n *     API breakage. It is deprecated, and new code should not use it.\n * @return {Object<string, *>} The resulting gRPC object\n */\nexports.load = util.deprecate(function load(filename, format, options) {\n  const ProtoBuf = require('protobufjs');\n  options = Object.assign({}, common.defaultGrpcOptions, options);\n  options.protobufjsVersion = 5;\n  if (!format) {\n    format = 'proto';\n  }\n  var convertFieldsToCamelCaseOriginal = ProtoBuf.convertFieldsToCamelCase;\n  if (options && options.hasOwnProperty('convertFieldsToCamelCase')) {\n    ProtoBuf.convertFieldsToCamelCase = options.convertFieldsToCamelCase;\n  }\n  var builder;\n  try {\n    switch (format) {\n      case 'proto':\n        builder = ProtoBuf.loadProtoFile(filename);\n        break;\n      case 'json':\n        builder = ProtoBuf.loadJsonFile(filename);\n        break;\n      default:\n        throw new Error('Unrecognized format \"' + format + '\"');\n    }\n  } finally {\n    ProtoBuf.convertFieldsToCamelCase = convertFieldsToCamelCaseOriginal;\n  }\n  if (!builder) {\n    throw new Error('Could not load file \"' + filename + '\"');\n  }\n  return loadObject(builder.ns, options);\n}, 'grpc.load: Use the @grpc/proto-loader module with grpc.loadPackageDefinition instead');\n\n/**\n * Load a gRPC package definition as a gRPC object hierarchy\n * @param packageDef grpc~PackageDefinition The package definition object\n * @return {Object<string, *>} The resulting gRPC object\n */\nexports.loadPackageDefinition = function loadPackageDefintion(packageDef) {\n  const result = {};\n  for (const serviceFqn in packageDef) {\n    const service = packageDef[serviceFqn];\n    const nameComponents = serviceFqn.split('.');\n    if (nameComponents.some(comp => common.isPrototypePolluted(comp))) {\n      continue;\n    }\n    const serviceName = nameComponents[nameComponents.length - 1];\n    let current = result;\n    for (const packageName of nameComponents.slice(0, -1)) {\n      if (!current[packageName]) {\n        current[packageName] = {};\n      }\n      current = current[packageName];\n    }\n    if (service.hasOwnProperty('format')) {\n      current[serviceName] = service;\n    } else {\n      current[serviceName] = client.makeClientConstructor(service, serviceName, {});\n    }\n  }\n  return result;\n};\nvar log_template = function (args) {\n  var file = args.file;\n  var line = args.line;\n  var severity = args.severity;\n  var message = args.message;\n  var timestamp = args.timestamp;\n  return `${severity} ${timestamp}\\t${file}:${line}]\\t${message}`;\n};\n\n/**\n * Sets the logger function for the gRPC module. For debugging purposes, the C\n * core will log synchronously directly to stdout unless this function is\n * called. Note: the output format here is intended to be informational, and\n * is not guaranteed to stay the same in the future.\n * Logs will be directed to logger.error.\n * @memberof grpc\n * @alias grpc.setLogger\n * @param {Console} logger A Console-like object.\n */\nexports.setLogger = function setLogger(logger) {\n  common.logger = logger;\n  grpc.setDefaultLoggerCallback(function (file, line, severity, message, timestamp) {\n    logger.error(log_template({\n      file: path.basename(file),\n      line: line,\n      severity: severity,\n      message: message,\n      timestamp: timestamp.toISOString()\n    }));\n  });\n};\n\n/**\n * Sets the logger verbosity for gRPC module logging. The options are members\n * of the grpc.logVerbosity map.\n * @memberof grpc\n * @alias grpc.setLogVerbosity\n * @param {Number} verbosity The minimum severity to log\n */\nexports.setLogVerbosity = function setLogVerbosity(verbosity) {\n  common.logVerbosity = verbosity;\n  grpc.setLogVerbosity(verbosity);\n};\nexports.Server = server.Server;\nexports.Metadata = Metadata;\nexports.status = constants.status;\nexports.propagate = constants.propagate;\nexports.callError = constants.callError;\nexports.writeFlags = constants.writeFlags;\nexports.logVerbosity = constants.logVerbosity;\nexports.methodTypes = constants.methodTypes;\nexports.connectivityState = constants.connectivityState;\nexports.credentials = require('./src/credentials.js');\n\n/**\n * ServerCredentials factories\n * @constructor ServerCredentials\n * @memberof grpc\n */\nexports.ServerCredentials = grpc.ServerCredentials;\n\n/**\n * Create insecure server credentials\n * @name grpc.ServerCredentials.createInsecure\n * @kind function\n * @return {grpc.ServerCredentials}\n */\n\n/**\n * A private key and certificate pair\n * @typedef {Object} grpc.ServerCredentials~keyCertPair\n * @property {Buffer} private_key The server's private key\n * @property {Buffer} cert_chain The server's certificate chain\n */\n\n/**\n * Create SSL server credentials\n * @name grpc.ServerCredentials.createSsl\n * @kind function\n * @param {?Buffer} rootCerts Root CA certificates for validating client\n *     certificates\n * @param {Array<grpc.ServerCredentials~keyCertPair>} keyCertPairs A list of\n *     private key and certificate chain pairs to be used for authenticating\n *     the server\n * @param {boolean} [checkClientCertificate=false] Indicates that the server\n *     should request and verify the client's certificates\n * @return {grpc.ServerCredentials}\n */\n\nexports.makeGenericClientConstructor = client.makeClientConstructor;\nexports.getClientChannel = client.getClientChannel;\nexports.waitForClientReady = client.waitForClientReady;\nexports.StatusBuilder = client.StatusBuilder;\nexports.ListenerBuilder = client.ListenerBuilder;\nexports.RequesterBuilder = client.RequesterBuilder;\nexports.InterceptingCall = client.InterceptingCall;\n\n/**\n * @memberof grpc\n * @alias grpc.closeClient\n * @param {grpc.Client} client_obj The client to close\n */\nexports.closeClient = function closeClient(client_obj) {\n  client.Client.prototype.close.apply(client_obj);\n};\nexports.Client = client.Client;\n\n/**\n * @typedef {Object.<string, string | number>} grpc~ChannelOptions\n */\n\n/**\n * This constructor API is almost identical to the Client constructor,\n * except that some of the options for the Client constructor are not valid\n * here.\n * @constructor Channel\n * @memberof grpc\n * @param {string} target The address of the server to connect to\n * @param {grpc.ChannelCredentials} credentials Channel credentials to use when connecting\n * @param {grpc~ChannelOptions} options A map of channel options that will be passed to the core.\n *     The available options are listed in\n *     [this document]{@link https://grpc.github.io/grpc/core/group__grpc__arg__keys.html}.\n */\nexports.Channel = grpc.Channel;\n\n/**\n * Close the channel. This has the same functionality as the existing grpc.Client#close\n * @name grpc.Channel#close\n * @kind function\n */\n\n/**\n * Return the target that this channel connects to\n * @name grpc.Channel#getTarget\n * @kind function\n * @return {string} The target\n */\n\n/**\n * Get the channel's current connectivity state.\n * @name grpc.Channel#getConnectivityState\n * @kind function\n * @param {boolean} tryToConnect If true, the channel will start connecting if it is\n *     idle. Otherwise, idle channels will only start connecting when a\n *     call starts.\n * @return {grpc.connectivityState} The current connectivity state\n */\n\n/**\n * @callback grpc.Channel~watchConnectivityStateCallback\n * @param {Error?} error\n */\n\n/**\n * Watch for connectivity state changes.\n * @name grpc.Channel#watchConnectivityState\n * @kind function\n * @param {grpc.ConnectivityState} currentState The state to watch for\n *     transitions from. This should always be populated by calling\n *     getConnectivityState immediately before.\n * @param {grpc~Deadline} deadline A deadline for waiting for a state change\n * @param {grpc.Channel~watchConnectivityStateCallback} callback Called with no\n *     error when the state changes, or with an error if the deadline passes\n *     without a state change\n */\n\n/**\n * @name grpc~Call\n * @kind class\n */\n\n/**\n * Create a call object. Call is an opaque type used by the {@link grpc.Client}\n * and {@link grpc.Server} classes. This function is called by the gRPC library\n * when starting a request. Implementers should return an instance of Call that\n * is returned from calling createCall on an instance of the provided Channel\n * class.\n * @name grpc.Channel#createCall\n * @kind function\n * @param {string} method The full method string to request\n * @param {grpc~Deadline} deadline The call deadline\n * @param {string|null} host A host string override for making the request\n * @param {grpc~Call|null} parentCall A server call to propagate some\n *     information from\n * @param {number|null} propagateFlags A bitwise combination of elements of\n *     {@link grpc.propagate} that indicates what information to propagate\n *     from parentCall\n * @return {grpc~Call}\n */","map":{"version":3,"names":["path","require","fs","util","SSL_ROOTS_PATH","resolve","__dirname","client","server","common","Metadata","grpc","protobuf_js_5_common","protobuf_js_6_common","constants","setDefaultRootsPem","readFileSync","exports","loadObject","value","options","Object","assign","defaultGrpcOptions","protobufjsVersion","isProbablyProtobufJs6","isProbablyProtobufJs5","error_message","Error","load","deprecate","filename","format","ProtoBuf","convertFieldsToCamelCaseOriginal","convertFieldsToCamelCase","hasOwnProperty","builder","loadProtoFile","loadJsonFile","ns","loadPackageDefinition","loadPackageDefintion","packageDef","result","serviceFqn","service","nameComponents","split","some","comp","isPrototypePolluted","serviceName","length","current","packageName","slice","makeClientConstructor","log_template","args","file","line","severity","message","timestamp","setLogger","logger","setDefaultLoggerCallback","error","basename","toISOString","setLogVerbosity","verbosity","logVerbosity","Server","status","propagate","callError","writeFlags","methodTypes","connectivityState","credentials","ServerCredentials","makeGenericClientConstructor","getClientChannel","waitForClientReady","StatusBuilder","ListenerBuilder","RequesterBuilder","InterceptingCall","closeClient","client_obj","Client","prototype","close","apply","Channel"],"sources":["/var/www/html/project/Dash_Vuexy-master/node_modules/grpc/index.js"],"sourcesContent":["/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\nvar util = require('util');\n\nvar SSL_ROOTS_PATH = path.resolve(__dirname, 'deps', 'grpc', 'etc', 'roots.pem');\n\nvar client = require('./src/client.js');\n\nvar server = require('./src/server.js');\n\nvar common = require('./src/common.js');\n\nvar Metadata = require('./src/metadata.js');\n\nvar grpc = require('./src/grpc_extension');\n\nvar protobuf_js_5_common = require('./src/protobuf_js_5_common');\nvar protobuf_js_6_common = require('./src/protobuf_js_6_common');\n\nvar constants = require('./src/constants.js');\n\ngrpc.setDefaultRootsPem(fs.readFileSync(SSL_ROOTS_PATH, 'ascii'));\n\n/**\n * @namespace grpc\n */\n\n/**\n * Load a ProtoBuf.js object as a gRPC object.\n * @memberof grpc\n * @alias grpc.loadObject\n * @param {Object} value The ProtoBuf.js reflection object to load\n * @param {Object=} options Options to apply to the loaded file\n * @param {bool=} [options.binaryAsBase64=false] deserialize bytes values as\n *     base64 strings instead of Buffers\n * @param {bool=} [options.longsAsStrings=true] deserialize long values as\n *     strings instead of objects\n * @param {bool=} [options.enumsAsStrings=true] deserialize enum values as\n *     strings instead of numbers. Only works with Protobuf.js 6 values.\n * @param {bool=} [options.deprecatedArgumentOrder=false] use the beta method\n *     argument order for client methods, with optional arguments after the\n *     callback. This option is only a temporary stopgap measure to smooth an\n *     API breakage. It is deprecated, and new code should not use it.\n * @param {(number|string)=} [options.protobufjsVersion='detect'] 5 and 6\n *     respectively indicate that an object from the corresponding version of\n *     Protobuf.js is provided in the value argument. If the option is 'detect',\n *     gRPC will guess what the version is based on the structure of the value.\n * @return {Object<string, *>} The resulting gRPC object.\n */\nexports.loadObject = function loadObject(value, options) {\n  options = Object.assign({}, common.defaultGrpcOptions, options);\n  options = Object.assign({}, {'protobufjsVersion': 'detect'}, options);\n  var protobufjsVersion;\n  if (options.protobufjsVersion === 'detect') {\n    if (protobuf_js_6_common.isProbablyProtobufJs6(value)) {\n      protobufjsVersion = 6;\n    } else if (protobuf_js_5_common.isProbablyProtobufJs5(value)) {\n      protobufjsVersion = 5;\n    } else {\n      var error_message = 'Could not detect ProtoBuf.js version. Please ' +\n          'specify the version number with the \"protobufjsVersion\" option';\n      throw new Error(error_message);\n    }\n  } else {\n    protobufjsVersion = options.protobufjsVersion;\n  }\n  switch (protobufjsVersion) {\n    case 6: return protobuf_js_6_common.loadObject(value, options);\n    case 5:\n    return protobuf_js_5_common.loadObject(value, options);\n    default:\n    throw new Error('Unrecognized protobufjsVersion', protobufjsVersion);\n  }\n};\n\nvar loadObject = exports.loadObject;\n\n/**\n * Load a gRPC object from a .proto file.\n * @deprecated Use the {@link https://www.npmjs.com/package/@grpc/proto-loader|proto-loader module}\n       with grpc.loadPackageDefinition instead.\n * @memberof grpc\n * @alias grpc.load\n * @param {string|{root: string, file: string}} filename The file to load\n * @param {string=} format The file format to expect. Must be either 'proto' or\n *     'json'. Defaults to 'proto'\n * @param {Object=} options Options to apply to the loaded file\n * @param {bool=} [options.convertFieldsToCamelCase=false] Load this file with\n *     field names in camel case instead of their original case\n * @param {bool=} [options.binaryAsBase64=false] deserialize bytes values as\n *     base64 strings instead of Buffers\n * @param {bool=} [options.longsAsStrings=true] deserialize long values as\n *     strings instead of objects\n * @param {bool=} [options.deprecatedArgumentOrder=false] use the beta method\n *     argument order for client methods, with optional arguments after the\n *     callback. This option is only a temporary stopgap measure to smooth an\n *     API breakage. It is deprecated, and new code should not use it.\n * @return {Object<string, *>} The resulting gRPC object\n */\nexports.load = util.deprecate(function load(filename, format, options) {\n  const ProtoBuf = require('protobufjs');\n  options = Object.assign({}, common.defaultGrpcOptions, options);\n  options.protobufjsVersion = 5;\n  if (!format) {\n    format = 'proto';\n  }\n  var convertFieldsToCamelCaseOriginal = ProtoBuf.convertFieldsToCamelCase;\n  if(options && options.hasOwnProperty('convertFieldsToCamelCase')) {\n    ProtoBuf.convertFieldsToCamelCase = options.convertFieldsToCamelCase;\n  }\n  var builder;\n  try {\n    switch(format) {\n      case 'proto':\n      builder = ProtoBuf.loadProtoFile(filename);\n      break;\n      case 'json':\n      builder = ProtoBuf.loadJsonFile(filename);\n      break;\n      default:\n      throw new Error('Unrecognized format \"' + format + '\"');\n    }\n  } finally {\n    ProtoBuf.convertFieldsToCamelCase = convertFieldsToCamelCaseOriginal;\n  }\n\n  if (!builder) {\n    throw new Error('Could not load file \"' + filename + '\"');\n  }\n\n  return loadObject(builder.ns, options);\n}, 'grpc.load: Use the @grpc/proto-loader module with grpc.loadPackageDefinition instead');\n\n/**\n * Load a gRPC package definition as a gRPC object hierarchy\n * @param packageDef grpc~PackageDefinition The package definition object\n * @return {Object<string, *>} The resulting gRPC object\n */\nexports.loadPackageDefinition = function loadPackageDefintion(packageDef) {\n  const result = {};\n  for (const serviceFqn in packageDef) {\n    const service = packageDef[serviceFqn];\n    const nameComponents = serviceFqn.split('.');\n    if (nameComponents.some(comp => common.isPrototypePolluted(comp))) {\n      continue;\n    }\n    const serviceName = nameComponents[nameComponents.length-1];\n    let current = result;\n    for (const packageName of nameComponents.slice(0, -1)) {\n      if (!current[packageName]) {\n        current[packageName] = {};\n      }\n      current = current[packageName];\n    }\n    if (service.hasOwnProperty('format')) {\n      current[serviceName] = service;\n    } else {\n      current[serviceName] = client.makeClientConstructor(service, serviceName, {});\n    }\n  }\n  return result;\n};\n\nvar log_template = function(args) {\n  var file = args.file;\n  var line = args.line;\n  var severity = args.severity;\n  var message = args.message;\n  var timestamp = args.timestamp;\n  return `${severity} ${timestamp}\\t${file}:${line}]\\t${message}`;\n};\n\n/**\n * Sets the logger function for the gRPC module. For debugging purposes, the C\n * core will log synchronously directly to stdout unless this function is\n * called. Note: the output format here is intended to be informational, and\n * is not guaranteed to stay the same in the future.\n * Logs will be directed to logger.error.\n * @memberof grpc\n * @alias grpc.setLogger\n * @param {Console} logger A Console-like object.\n */\nexports.setLogger = function setLogger(logger) {\n  common.logger = logger;\n  grpc.setDefaultLoggerCallback(function(file, line, severity,\n                                         message, timestamp) {\n    logger.error(log_template({\n      file: path.basename(file),\n      line: line,\n      severity: severity,\n      message: message,\n      timestamp: timestamp.toISOString()\n    }));\n  });\n};\n\n/**\n * Sets the logger verbosity for gRPC module logging. The options are members\n * of the grpc.logVerbosity map.\n * @memberof grpc\n * @alias grpc.setLogVerbosity\n * @param {Number} verbosity The minimum severity to log\n */\nexports.setLogVerbosity = function setLogVerbosity(verbosity) {\n  common.logVerbosity = verbosity;\n  grpc.setLogVerbosity(verbosity);\n};\n\nexports.Server = server.Server;\n\nexports.Metadata = Metadata;\n\nexports.status = constants.status;\n\nexports.propagate = constants.propagate;\n\nexports.callError = constants.callError;\n\nexports.writeFlags = constants.writeFlags;\n\nexports.logVerbosity = constants.logVerbosity;\n\nexports.methodTypes = constants.methodTypes;\n\nexports.connectivityState = constants.connectivityState;\n\nexports.credentials = require('./src/credentials.js');\n\n/**\n * ServerCredentials factories\n * @constructor ServerCredentials\n * @memberof grpc\n */\nexports.ServerCredentials = grpc.ServerCredentials;\n\n/**\n * Create insecure server credentials\n * @name grpc.ServerCredentials.createInsecure\n * @kind function\n * @return {grpc.ServerCredentials}\n */\n\n/**\n * A private key and certificate pair\n * @typedef {Object} grpc.ServerCredentials~keyCertPair\n * @property {Buffer} private_key The server's private key\n * @property {Buffer} cert_chain The server's certificate chain\n */\n\n/**\n * Create SSL server credentials\n * @name grpc.ServerCredentials.createSsl\n * @kind function\n * @param {?Buffer} rootCerts Root CA certificates for validating client\n *     certificates\n * @param {Array<grpc.ServerCredentials~keyCertPair>} keyCertPairs A list of\n *     private key and certificate chain pairs to be used for authenticating\n *     the server\n * @param {boolean} [checkClientCertificate=false] Indicates that the server\n *     should request and verify the client's certificates\n * @return {grpc.ServerCredentials}\n */\n\nexports.makeGenericClientConstructor = client.makeClientConstructor;\n\nexports.getClientChannel = client.getClientChannel;\n\nexports.waitForClientReady = client.waitForClientReady;\n\nexports.StatusBuilder = client.StatusBuilder;\nexports.ListenerBuilder = client.ListenerBuilder;\nexports.RequesterBuilder = client.RequesterBuilder;\nexports.InterceptingCall = client.InterceptingCall;\n\n/**\n * @memberof grpc\n * @alias grpc.closeClient\n * @param {grpc.Client} client_obj The client to close\n */\nexports.closeClient = function closeClient(client_obj) {\n  client.Client.prototype.close.apply(client_obj);\n};\n\nexports.Client = client.Client;\n\n/**\n * @typedef {Object.<string, string | number>} grpc~ChannelOptions\n */\n\n/**\n * This constructor API is almost identical to the Client constructor,\n * except that some of the options for the Client constructor are not valid\n * here.\n * @constructor Channel\n * @memberof grpc\n * @param {string} target The address of the server to connect to\n * @param {grpc.ChannelCredentials} credentials Channel credentials to use when connecting\n * @param {grpc~ChannelOptions} options A map of channel options that will be passed to the core.\n *     The available options are listed in\n *     [this document]{@link https://grpc.github.io/grpc/core/group__grpc__arg__keys.html}.\n */\nexports.Channel = grpc.Channel;\n\n/**\n * Close the channel. This has the same functionality as the existing grpc.Client#close\n * @name grpc.Channel#close\n * @kind function\n */\n\n/**\n * Return the target that this channel connects to\n * @name grpc.Channel#getTarget\n * @kind function\n * @return {string} The target\n */\n\n/**\n * Get the channel's current connectivity state.\n * @name grpc.Channel#getConnectivityState\n * @kind function\n * @param {boolean} tryToConnect If true, the channel will start connecting if it is\n *     idle. Otherwise, idle channels will only start connecting when a\n *     call starts.\n * @return {grpc.connectivityState} The current connectivity state\n */\n\n/**\n * @callback grpc.Channel~watchConnectivityStateCallback\n * @param {Error?} error\n */\n\n/**\n * Watch for connectivity state changes.\n * @name grpc.Channel#watchConnectivityState\n * @kind function\n * @param {grpc.ConnectivityState} currentState The state to watch for\n *     transitions from. This should always be populated by calling\n *     getConnectivityState immediately before.\n * @param {grpc~Deadline} deadline A deadline for waiting for a state change\n * @param {grpc.Channel~watchConnectivityStateCallback} callback Called with no\n *     error when the state changes, or with an error if the deadline passes\n *     without a state change\n */\n\n/**\n * @name grpc~Call\n * @kind class\n */\n\n/**\n * Create a call object. Call is an opaque type used by the {@link grpc.Client}\n * and {@link grpc.Server} classes. This function is called by the gRPC library\n * when starting a request. Implementers should return an instance of Call that\n * is returned from calling createCall on an instance of the provided Channel\n * class.\n * @name grpc.Channel#createCall\n * @kind function\n * @param {string} method The full method string to request\n * @param {grpc~Deadline} deadline The call deadline\n * @param {string|null} host A host string override for making the request\n * @param {grpc~Call|null} parentCall A server call to propagate some\n *     information from\n * @param {number|null} propagateFlags A bitwise combination of elements of\n *     {@link grpc.propagate} that indicates what information to propagate\n *     from parentCall\n * @return {grpc~Call}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}