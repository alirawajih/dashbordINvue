{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2013 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst gcpMetadata = require(\"gcp-metadata\");\nconst messages = require(\"../messages\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass Compute extends oauth2client_1.OAuth2Client {\n  /**\n   * Google Compute Engine service account credentials.\n   *\n   * Retrieve access token from the metadata server.\n   * See: https://developers.google.com/compute/docs/authentication\n   */\n  constructor(options = {}) {\n    super(options);\n    // Start with an expired refresh token, which will automatically be\n    // refreshed before the first API call is made.\n    this.credentials = {\n      expiry_date: 1,\n      refresh_token: 'compute-placeholder'\n    };\n    this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n  }\n  /**\n   * Indicates whether the credential requires scopes to be created by calling\n   * createdScoped before use.\n   * @deprecated\n   * @return Boolean indicating if scope is required.\n   */\n  createScopedRequired() {\n    // On compute engine, scopes are specified at the compute instance's\n    // creation time, and cannot be changed. For this reason, always return\n    // false.\n    messages.warn(messages.COMPUTE_CREATE_SCOPED_DEPRECATED);\n    return false;\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken Unused parameter\n   */\n  refreshTokenNoCache(refreshToken) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;\n      let data;\n      try {\n        data = yield gcpMetadata.instance(tokenPath);\n      } catch (e) {\n        e.message = 'Could not refresh access token.';\n        throw e;\n      }\n      const tokens = data;\n      if (data && data.expires_in) {\n        tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;\n        delete tokens.expires_in;\n      }\n      this.emit('tokens', tokens);\n      return {\n        tokens,\n        res: null\n      };\n    });\n  }\n  requestAsync(opts, retry = false) {\n    return super.requestAsync(opts, retry).catch(e => {\n      const res = e.response;\n      if (res && res.status) {\n        let helpfulMessage = null;\n        if (res.status === 403) {\n          helpfulMessage = 'A Forbidden error was returned while attempting to retrieve an access ' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have the correct permission scopes specified.';\n        } else if (res.status === 404) {\n          helpfulMessage = 'A Not Found error was returned while attempting to retrieve an access' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have any permission scopes specified.';\n        }\n        if (helpfulMessage) {\n          if (e && e.message && !retry) {\n            helpfulMessage += ' ' + e.message;\n          }\n          if (e) {\n            e.message = helpfulMessage;\n          } else {\n            e = new Error(helpfulMessage);\n            e.code = res.status.toString();\n          }\n        }\n      }\n      throw e;\n    });\n  }\n}\nexports.Compute = Compute;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","gcpMetadata","require","messages","oauth2client_1","Compute","OAuth2Client","constructor","options","credentials","expiry_date","refresh_token","serviceAccountEmail","createScopedRequired","warn","COMPUTE_CREATE_SCOPED_DEPRECATED","refreshTokenNoCache","refreshToken","tokenPath","data","instance","message","tokens","expires_in","Date","getTime","emit","res","requestAsync","opts","retry","catch","response","status","helpfulMessage","Error","code","toString"],"sources":["/var/www/html/project/Dash_Vuexy-master/node_modules/google-auth-library/build/src/auth/computeclient.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2013 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gcpMetadata = require(\"gcp-metadata\");\nconst messages = require(\"../messages\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass Compute extends oauth2client_1.OAuth2Client {\n    /**\n     * Google Compute Engine service account credentials.\n     *\n     * Retrieve access token from the metadata server.\n     * See: https://developers.google.com/compute/docs/authentication\n     */\n    constructor(options = {}) {\n        super(options);\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = { expiry_date: 1, refresh_token: 'compute-placeholder' };\n        this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n    }\n    /**\n     * Indicates whether the credential requires scopes to be created by calling\n     * createdScoped before use.\n     * @deprecated\n     * @return Boolean indicating if scope is required.\n     */\n    createScopedRequired() {\n        // On compute engine, scopes are specified at the compute instance's\n        // creation time, and cannot be changed. For this reason, always return\n        // false.\n        messages.warn(messages.COMPUTE_CREATE_SCOPED_DEPRECATED);\n        return false;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken Unused parameter\n     */\n    refreshTokenNoCache(refreshToken) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;\n            let data;\n            try {\n                data = yield gcpMetadata.instance(tokenPath);\n            }\n            catch (e) {\n                e.message = 'Could not refresh access token.';\n                throw e;\n            }\n            const tokens = data;\n            if (data && data.expires_in) {\n                tokens.expiry_date = ((new Date()).getTime() + (data.expires_in * 1000));\n                delete tokens.expires_in;\n            }\n            this.emit('tokens', tokens);\n            return { tokens, res: null };\n        });\n    }\n    requestAsync(opts, retry = false) {\n        return super.requestAsync(opts, retry).catch(e => {\n            const res = e.response;\n            if (res && res.status) {\n                let helpfulMessage = null;\n                if (res.status === 403) {\n                    helpfulMessage =\n                        'A Forbidden error was returned while attempting to retrieve an access ' +\n                            'token for the Compute Engine built-in service account. This may be because the Compute ' +\n                            'Engine instance does not have the correct permission scopes specified.';\n                }\n                else if (res.status === 404) {\n                    helpfulMessage =\n                        'A Not Found error was returned while attempting to retrieve an access' +\n                            'token for the Compute Engine built-in service account. This may be because the Compute ' +\n                            'Engine instance does not have any permission scopes specified.';\n                }\n                if (helpfulMessage) {\n                    if (e && e.message && !retry) {\n                        helpfulMessage += ' ' + e.message;\n                    }\n                    if (e) {\n                        e.message = helpfulMessage;\n                    }\n                    else {\n                        e = new Error(helpfulMessage);\n                        e.code = res.status.toString();\n                    }\n                }\n            }\n            throw e;\n        });\n    }\n}\nexports.Compute = Compute;\n//# sourceMappingURL=computeclient.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}