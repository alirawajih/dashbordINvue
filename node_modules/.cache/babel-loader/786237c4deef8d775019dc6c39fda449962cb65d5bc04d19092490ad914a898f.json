{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { computed, toRef } from 'vue';\nimport { useField } from 'vee-validate';\nimport { modes } from './interactionModes';\nexport default {\n  __name: 'CustomField',\n  props: {\n    name: {\n      type: String\n    },\n    mode: {\n      type: String,\n      default: 'aggressive'\n    }\n  },\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const props = __props;\n\n    // use `toRef` to create reactive references to `name` prop which is passed to `useField`\n    // this is important because vee-validte needs to know if the field name changes\n    // https://vee-validate.logaretm.com/v4/guide/composition-api/caveats\n    const {\n      meta,\n      value,\n      errorMessage,\n      handleChange,\n      handleBlur\n    } = useField(toRef(props, 'name'), null, {\n      validateOnValueUpdate: false\n    });\n\n    // generates the listeners\n    const handlers = computed(() => {\n      const on = {\n        blur: handleBlur,\n        // default input event to sync the value\n        // the `false` here prevents validation\n        input: [e => handleChange(e, false)]\n      };\n\n      // Get list of validation events based on the current mode\n      const triggers = modes[props.mode]({\n        errorMessage,\n        meta\n      });\n\n      // add them to the \"on\" handlers object\n      triggers.forEach(t => {\n        if (Array.isArray(on[t])) {\n          on[t].push(handleChange);\n        } else {\n          on[t] = handleChange;\n        }\n      });\n      return on;\n    });\n    const __returned__ = {\n      props,\n      meta,\n      value,\n      errorMessage,\n      handleChange,\n      handleBlur,\n      handlers,\n      computed,\n      toRef,\n      get useField() {\n        return useField;\n      },\n      get modes() {\n        return modes;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["computed","toRef","useField","modes","meta","value","errorMessage","handleChange","handleBlur","props","validateOnValueUpdate","handlers","on","blur","input","e","triggers","mode","forEach","t","Array","isArray","push"],"sources":["/var/www/html/dashbord_vue_master/src/components/input/CustomField.vue"],"sourcesContent":["<template>\n    <div>\n      <input type=\"text\" v-on=\"handlers\" :value=\"value\" />\n      <span>{{ errorMessage }}</span>\n    </div>\n  </template>\n  \n  <script setup >\n  import { computed, toRef } from 'vue';\n  import { useField } from 'vee-validate';\n  import { modes } from './interactionModes';\n  \n  const props = defineProps({\n    name: {\n      type: String,\n    },\n    mode: {\n      type: String,\n      default: 'aggressive',\n    },\n  });\n  \n  // use `toRef` to create reactive references to `name` prop which is passed to `useField`\n  // this is important because vee-validte needs to know if the field name changes\n  // https://vee-validate.logaretm.com/v4/guide/composition-api/caveats\n  const { meta, value, errorMessage, handleChange, handleBlur } = useField(\n    toRef(props, 'name'),\n    null,\n    {\n      validateOnValueUpdate: false,\n    }\n  );\n  \n  // generates the listeners\n  const handlers = computed(() => {\n    const on = {\n      blur: handleBlur,\n      // default input event to sync the value\n      // the `false` here prevents validation\n      input: [(e) => handleChange(e, false)],\n    };\n  \n    // Get list of validation events based on the current mode\n    const triggers = modes[props.mode]({\n      errorMessage,\n      meta,\n    });\n  \n    // add them to the \"on\" handlers object\n    triggers.forEach((t) => {\n      if (Array.isArray(on[t])) {\n        on[t].push(handleChange);\n      } else {\n        on[t] = handleChange;\n      }\n    });\n  \n    return on;\n  });\n  </script>\n  "],"mappings":";AAQE,SAASA,QAAQ,EAAEC,KAAK,QAAQ,KAAK;AACrC,SAASC,QAAQ,QAAQ,cAAc;AACvC,SAASC,KAAK,QAAQ,oBAAoB;;;;;;;;;;;;;;;;;;IAY1C;IACA;IACA;IACA,MAAM;MAAEC,IAAI;MAAEC,KAAK;MAAEC,YAAY;MAAEC,YAAY;MAAEC;IAAW,CAAC,GAAGN,QAAQ,CACtED,KAAK,CAACQ,KAAK,EAAE,MAAM,CAAC,EACpB,IAAI,EACJ;MACEC,qBAAqB,EAAE;IACzB,CAAC,CACF;;IAED;IACA,MAAMC,QAAQ,GAAGX,QAAQ,CAAC,MAAM;MAC9B,MAAMY,EAAE,GAAG;QACTC,IAAI,EAAEL,UAAU;QAChB;QACA;QACAM,KAAK,EAAE,CAAEC,CAAC,IAAKR,YAAY,CAACQ,CAAC,EAAE,KAAK,CAAC;MACvC,CAAC;;MAED;MACA,MAAMC,QAAQ,GAAGb,KAAK,CAACM,KAAK,CAACQ,IAAI,CAAC,CAAC;QACjCX,YAAY;QACZF;MACF,CAAC,CAAC;;MAEF;MACAY,QAAQ,CAACE,OAAO,CAAEC,CAAC,IAAK;QACtB,IAAIC,KAAK,CAACC,OAAO,CAACT,EAAE,CAACO,CAAC,CAAC,CAAC,EAAE;UACxBP,EAAE,CAACO,CAAC,CAAC,CAACG,IAAI,CAACf,YAAY,CAAC;QAC1B,CAAC,MAAM;UACLK,EAAE,CAACO,CAAC,CAAC,GAAGZ,YAAY;QACtB;MACF,CAAC,CAAC;MAEF,OAAOK,EAAE;IACX,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}