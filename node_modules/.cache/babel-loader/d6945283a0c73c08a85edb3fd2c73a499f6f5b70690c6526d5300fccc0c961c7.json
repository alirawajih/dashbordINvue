{"ast":null,"code":"/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/web.immediate.js\");\nvar grpc = require('./grpc_extension');\nvar common = require('./common');\nvar Metadata = require('./metadata');\nvar constants = require('./constants');\nvar stream = require('stream');\nvar Readable = stream.Readable;\nvar Writable = stream.Writable;\nvar Duplex = stream.Duplex;\nvar util = require('util');\nvar EventEmitter = require('events').EventEmitter;\n\n/**\n * Handle an error on a call by sending it as a status\n * @private\n * @param {grpc.internal~Call} call The call to send the error on\n * @param {(Object|Error)} error The error object\n */\nfunction handleError(call, error) {\n  var statusMetadata = new Metadata();\n  var status = {\n    code: constants.status.UNKNOWN,\n    details: 'Unknown Error'\n  };\n  if (error.hasOwnProperty('message')) {\n    status.details = error.message;\n  }\n  if (error.hasOwnProperty('code') && Number.isInteger(error.code)) {\n    status.code = error.code;\n    if (error.hasOwnProperty('details')) {\n      status.details = error.details;\n    }\n  }\n  if (error.hasOwnProperty('metadata')) {\n    statusMetadata = error.metadata;\n  }\n  status.metadata = statusMetadata._getCoreRepresentation();\n  var error_batch = {};\n  if (!call.metadataSent) {\n    error_batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n  }\n  error_batch[grpc.opType.SEND_STATUS_FROM_SERVER] = status;\n  call.startBatch(error_batch, function () {});\n}\n\n/**\n * Send a response to a unary or client streaming call.\n * @private\n * @param {grpc.Call} call The call to respond on\n * @param {*} value The value to respond with\n * @param {grpc~serialize} serialize Serialization function for the\n *     response\n * @param {grpc.Metadata=} metadata Optional trailing metadata to send with\n *     status\n * @param {number=} [flags=0] Flags for modifying how the message is sent.\n */\nfunction sendUnaryResponse(call, value, serialize, metadata, flags) {\n  var end_batch = {};\n  var statusMetadata = new Metadata();\n  var status = {\n    code: constants.status.OK,\n    details: 'OK'\n  };\n  if (metadata) {\n    statusMetadata = metadata;\n  }\n  var message;\n  try {\n    message = serialize(value);\n  } catch (e) {\n    common.log(constants.logVerbosity.ERROR, e);\n    e.code = constants.status.INTERNAL;\n    handleError(call, e);\n    return;\n  }\n  status.metadata = statusMetadata._getCoreRepresentation();\n  if (!call.metadataSent) {\n    end_batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n    call.metadataSent = true;\n  }\n  message.grpcWriteFlags = flags;\n  end_batch[grpc.opType.SEND_MESSAGE] = message;\n  end_batch[grpc.opType.SEND_STATUS_FROM_SERVER] = status;\n  call.startBatch(end_batch, function () {});\n}\n\n/**\n * Initialize a writable stream. This is used for both the writable and duplex\n * stream constructors.\n * @private\n * @param {Writable} stream The stream to set up\n * @param {function(*):Buffer=} Serialization function for responses\n */\nfunction setUpWritable(stream, serialize) {\n  stream.finished = false;\n  stream.status = {\n    code: constants.status.OK,\n    details: 'OK',\n    metadata: new Metadata()\n  };\n  stream.serialize = common.wrapIgnoreNull(serialize);\n  function sendStatus() {\n    var batch = {};\n    if (!stream.call.metadataSent) {\n      stream.call.metadataSent = true;\n      batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n    }\n    if (stream.status.metadata) {\n      stream.status.metadata = stream.status.metadata._getCoreRepresentation();\n    }\n    batch[grpc.opType.SEND_STATUS_FROM_SERVER] = stream.status;\n    stream.call.startBatch(batch, function () {});\n  }\n  stream.on('finish', sendStatus);\n  /**\n   * Set the pending status to a given error status. If the error does not have\n   * code or details properties, the code will be set to grpc.status.UNKNOWN\n   * and the details will be set to 'Unknown Error'.\n   * @param {Error} err The error object\n   */\n  function setStatus(err) {\n    var code = constants.status.UNKNOWN;\n    var details = 'Unknown Error';\n    var metadata = new Metadata();\n    if (err.hasOwnProperty('message')) {\n      details = err.message;\n    }\n    if (err.hasOwnProperty('code')) {\n      code = err.code;\n      if (err.hasOwnProperty('details')) {\n        details = err.details;\n      }\n    }\n    if (err.hasOwnProperty('metadata')) {\n      metadata = err.metadata;\n    }\n    stream.status = {\n      code: code,\n      details: details,\n      metadata: metadata\n    };\n  }\n  /**\n   * Terminate the call. This includes indicating that reads are done, draining\n   * all pending writes, and sending the given error as a status\n   * @param {Error} err The error object\n   * @this GrpcServerStream\n   */\n  function terminateCall(err) {\n    // Drain readable data\n    setStatus(err);\n    stream.end();\n  }\n  stream.on('error', terminateCall);\n  /**\n   * Override of Writable#end method that allows for sending metadata with a\n   * success status.\n   * @param {Metadata=} metadata Metadata to send with the status\n   */\n  stream.end = function (metadata) {\n    if (metadata) {\n      stream.status.metadata = metadata;\n    }\n    Writable.prototype.end.call(this);\n  };\n}\n\n/**\n * Initialize a readable stream. This is used for both the readable and duplex\n * stream constructors.\n * @private\n * @param {Readable} stream The stream to initialize\n * @param {grpc~deserialize} deserialize Deserialization function for\n *     incoming data.\n */\nfunction setUpReadable(stream, deserialize) {\n  stream.deserialize = common.wrapIgnoreNull(deserialize);\n  stream.finished = false;\n  stream.reading = false;\n  stream.terminate = function () {\n    stream.finished = true;\n    stream.on('data', function () {});\n  };\n  stream.on('cancelled', function () {\n    stream.terminate();\n  });\n}\n\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerUnaryCall~cancelled\n */\n\nutil.inherits(ServerUnaryCall, EventEmitter);\n\n/**\n * An EventEmitter. Used for unary calls.\n * @constructor grpc~ServerUnaryCall\n * @extends external:EventEmitter\n * @param {grpc.internal~Call} call The call object associated with the request\n * @param {grpc.Metadata} metadata The request metadata from the client\n */\nfunction ServerUnaryCall(call, metadata) {\n  EventEmitter.call(this);\n  this.call = call;\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerUnaryCall#cancelled\n   */\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerUnaryCall#metadata\n   */\n  this.metadata = metadata;\n  /**\n   * The request message from the client\n   * @member {*} grpc~ServerUnaryCall#request\n   */\n  this.request = undefined;\n}\n\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerWritableStream~cancelled\n */\n\nutil.inherits(ServerWritableStream, Writable);\n\n/**\n * A stream that the server can write to. Used for calls that are streaming from\n * the server side.\n * @constructor grpc~ServerWritableStream\n * @extends external:Writable\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerWritableStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerWritableStream#getPeer\n * @param {grpc.internal~Call} call The call object to send data with\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~serialize} serialize Serialization function for writes\n */\nfunction ServerWritableStream(call, metadata, serialize) {\n  Writable.call(this, {\n    objectMode: true\n  });\n  this.call = call;\n  this.finished = false;\n  setUpWritable(this, serialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerWritableStream#cancelled\n   */\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerWritableStream#metadata\n   */\n  this.metadata = metadata;\n  /**\n   * The request message from the client\n   * @member {*} grpc~ServerWritableStream#request\n   */\n  this.request = undefined;\n}\n\n/**\n * Start writing a chunk of data. This is an implementation of a method required\n * for implementing stream.Writable.\n * @private\n * @param {Buffer} chunk The chunk of data to write\n * @param {string} encoding Used to pass write flags\n * @param {function(Error=)} callback Callback to indicate that the write is\n *     complete\n */\nfunction _write(chunk, encoding, callback) {\n  /* jshint validthis: true */\n  var batch = {};\n  var self = this;\n  var message;\n  try {\n    message = this.serialize(chunk);\n  } catch (e) {\n    common.log(constants.logVerbosity.ERROR, e);\n    e.code = constants.status.INTERNAL;\n    callback(e);\n    return;\n  }\n  if (!this.call.metadataSent) {\n    batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n    this.call.metadataSent = true;\n  }\n  if (Number.isFinite(encoding)) {\n    /* Attach the encoding if it is a finite number. This is the closest we\n     * can get to checking that it is valid flags */\n    message.grpcWriteFlags = encoding;\n  }\n  batch[grpc.opType.SEND_MESSAGE] = message;\n  this.call.startBatch(batch, function (err, value) {\n    if (err) {\n      self.emit('error', err);\n      return;\n    }\n    callback();\n  });\n}\nServerWritableStream.prototype._write = _write;\n\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerReadableStream~cancelled\n */\n\nutil.inherits(ServerReadableStream, Readable);\n\n/**\n * A stream that the server can read from. Used for calls that are streaming\n * from the client side.\n * @constructor grpc~ServerReadableStream\n * @extends external:Readable\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerReadableStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerReadableStream#getPeer\n * @param {grpc.internal~Call} call The call object to read data with\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~deserialize} deserialize Deserialization function for reads\n */\nfunction ServerReadableStream(call, metadata, deserialize) {\n  Readable.call(this, {\n    objectMode: true\n  });\n  this.call = call;\n  setUpReadable(this, deserialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerReadableStream#cancelled\n   */\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerReadableStream#metadata\n   */\n  this.metadata = metadata;\n}\n\n/**\n * Start reading from the gRPC data source. This is an implementation of a\n * method required for implementing stream.Readable\n * @access private\n * @param {number} size Ignored\n */\nfunction _read(size) {\n  /* jshint validthis: true */\n  var self = this;\n  /**\n   * Callback to be called when a READ event is received. Pushes the data onto\n   * the read queue and starts reading again if applicable\n   * @param {grpc.Event} event READ event object\n   */\n  function readCallback(err, event) {\n    if (err) {\n      self.terminate();\n      return;\n    }\n    if (self.finished) {\n      self.push(null);\n      return;\n    }\n    var data = event.read;\n    var deserialized;\n    try {\n      deserialized = self.deserialize(data);\n    } catch (e) {\n      common.log(constants.logVerbosity.ERROR, e);\n      e.code = constants.status.INTERNAL;\n      self.emit('error', e);\n      return;\n    }\n    if (self.push(deserialized) && data !== null) {\n      var read_batch = {};\n      read_batch[grpc.opType.RECV_MESSAGE] = true;\n      self.call.startBatch(read_batch, readCallback);\n    } else {\n      self.reading = false;\n    }\n  }\n  if (self.finished) {\n    self.push(null);\n  } else {\n    if (!self.reading) {\n      self.reading = true;\n      var batch = {};\n      batch[grpc.opType.RECV_MESSAGE] = true;\n      self.call.startBatch(batch, readCallback);\n    }\n  }\n}\nServerReadableStream.prototype._read = _read;\n\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerDuplexStream~cancelled\n */\n\nutil.inherits(ServerDuplexStream, Duplex);\n\n/**\n * A stream that the server can read from or write to. Used for calls with\n * duplex streaming.\n * @constructor grpc~ServerDuplexStream\n * @extends external:Duplex\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerDuplexStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerDuplexStream#getPeer\n * @param {grpc.internal~Call} call Call object to proxy\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~serialize} serialize Serialization function for requests\n * @param {grpc~deserialize} deserialize Deserialization function for\n *     responses\n */\nfunction ServerDuplexStream(call, metadata, serialize, deserialize) {\n  Duplex.call(this, {\n    objectMode: true\n  });\n  this.call = call;\n  setUpWritable(this, serialize);\n  setUpReadable(this, deserialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerReadableStream#cancelled\n   */\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerReadableStream#metadata\n   */\n  this.metadata = metadata;\n}\nServerDuplexStream.prototype._read = _read;\nServerDuplexStream.prototype._write = _write;\n\n/**\n * Send the initial metadata for a writable stream.\n * @alias grpc~ServerUnaryCall#sendMetadata\n * @param {grpc.Metadata} responseMetadata Metadata to send\n */\nfunction sendMetadata(responseMetadata) {\n  /* jshint validthis: true */\n  var self = this;\n  if (!this.call.metadataSent) {\n    this.call.metadataSent = true;\n    var batch = {};\n    batch[grpc.opType.SEND_INITIAL_METADATA] = responseMetadata._getCoreRepresentation();\n    this.call.startBatch(batch, function (err) {\n      if (err) {\n        self.emit('error', err);\n        return;\n      }\n    });\n  }\n}\nServerUnaryCall.prototype.sendMetadata = sendMetadata;\nServerWritableStream.prototype.sendMetadata = sendMetadata;\nServerReadableStream.prototype.sendMetadata = sendMetadata;\nServerDuplexStream.prototype.sendMetadata = sendMetadata;\n\n/**\n * Get the endpoint this call/stream is connected to.\n * @alias grpc~ServerUnaryCall#getPeer\n * @return {string} The URI of the endpoint\n */\nfunction getPeer() {\n  /* jshint validthis: true */\n  return this.call.getPeer();\n}\nServerUnaryCall.prototype.getPeer = getPeer;\nServerReadableStream.prototype.getPeer = getPeer;\nServerWritableStream.prototype.getPeer = getPeer;\nServerDuplexStream.prototype.getPeer = getPeer;\n\n/**\n * Wait for the client to close, then emit a cancelled event if the client\n * cancelled.\n * @private\n */\nfunction waitForCancel() {\n  /* jshint validthis: true */\n  var self = this;\n  var cancel_batch = {};\n  cancel_batch[grpc.opType.RECV_CLOSE_ON_SERVER] = true;\n  self.call.startBatch(cancel_batch, function (err, result) {\n    if (err) {\n      self.emit('error', err);\n    }\n    if (result.cancelled) {\n      self.cancelled = true;\n      self.emit('cancelled');\n    }\n  });\n}\nServerUnaryCall.prototype.waitForCancel = waitForCancel;\nServerReadableStream.prototype.waitForCancel = waitForCancel;\nServerWritableStream.prototype.waitForCancel = waitForCancel;\nServerDuplexStream.prototype.waitForCancel = waitForCancel;\n\n/**\n * Callback function passed to server handlers that handle methods with unary\n * responses.\n * @callback grpc.Server~sendUnaryData\n * @param {grpc~ServiceError} error An error, if the call failed\n * @param {*} value The response value. Must be a valid argument to the\n *     `responseSerialize` method of the method that is being handled\n * @param {grpc.Metadata=} trailer Trailing metadata to send, if applicable\n * @param {grpc.writeFlags=} flags Flags to modify writing the response\n */\n\n/**\n * User-provided method to handle unary requests on a server\n * @callback grpc.Server~handleUnaryCall\n * @param {grpc~ServerUnaryCall} call The call object\n * @param {grpc.Server~sendUnaryData} callback The callback to call to respond\n *     to the request\n */\n\n/**\n * Fully handle a unary call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleUnaryCall} handler.func The handler function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\nfunction handleUnary(call, handler, metadata) {\n  var emitter = new ServerUnaryCall(call, metadata);\n  emitter.on('error', function (error) {\n    handleError(call, error);\n  });\n  emitter.waitForCancel();\n  var batch = {};\n  batch[grpc.opType.RECV_MESSAGE] = true;\n  call.startBatch(batch, function (err, result) {\n    if (err) {\n      handleError(call, err);\n      return;\n    }\n    try {\n      emitter.request = handler.deserialize(result.read);\n    } catch (e) {\n      common.log(constants.logVerbosity.ERROR, e);\n      e.code = constants.status.INTERNAL;\n      handleError(call, e);\n      return;\n    }\n    if (emitter.cancelled) {\n      return;\n    }\n    handler.func(emitter, function sendUnaryData(err, value, trailer, flags) {\n      if (err) {\n        if (trailer) {\n          err.metadata = trailer;\n        }\n        handleError(call, err);\n      } else {\n        sendUnaryResponse(call, value, handler.serialize, trailer, flags);\n      }\n    });\n  });\n}\n\n/**\n * User provided method to handle server streaming methods on the server.\n * @callback grpc.Server~handleServerStreamingCall\n * @param {grpc~ServerWritableStream} call The call object\n */\n\n/**\n * Fully handle a server streaming call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleServerStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\nfunction handleServerStreaming(call, handler, metadata) {\n  var stream = new ServerWritableStream(call, metadata, handler.serialize);\n  stream.waitForCancel();\n  var batch = {};\n  batch[grpc.opType.RECV_MESSAGE] = true;\n  call.startBatch(batch, function (err, result) {\n    if (err) {\n      stream.emit('error', err);\n      return;\n    }\n    try {\n      stream.request = handler.deserialize(result.read);\n    } catch (e) {\n      common.log(constants.logVerbosity.ERROR, e);\n      e.code = constants.status.INTERNAL;\n      stream.emit('error', e);\n      return;\n    }\n    handler.func(stream);\n  });\n}\n\n/**\n * User provided method to handle client streaming methods on the server.\n * @callback grpc.Server~handleClientStreamingCall\n * @param {grpc~ServerReadableStream} call The call object\n * @param {grpc.Server~sendUnaryData} callback The callback to call to respond\n *     to the request\n */\n\n/**\n * Fully handle a client streaming call\n * @access private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleClientStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\nfunction handleClientStreaming(call, handler, metadata) {\n  var stream = new ServerReadableStream(call, metadata, handler.deserialize);\n  stream.on('error', function (error) {\n    handleError(call, error);\n  });\n  stream.waitForCancel();\n  handler.func(stream, function (err, value, trailer, flags) {\n    stream.terminate();\n    if (err) {\n      if (trailer) {\n        err.metadata = trailer;\n      }\n      handleError(call, err);\n    } else {\n      sendUnaryResponse(call, value, handler.serialize, trailer, flags);\n    }\n  });\n}\n\n/**\n * User provided method to handle bidirectional streaming calls on the server.\n * @callback grpc.Server~handleBidiStreamingCall\n * @param {grpc~ServerDuplexStream} call The call object\n */\n\n/**\n * Fully handle a bidirectional streaming call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleBidiStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {Metadata} metadata Metadata from the client\n */\nfunction handleBidiStreaming(call, handler, metadata) {\n  var stream = new ServerDuplexStream(call, metadata, handler.serialize, handler.deserialize);\n  stream.waitForCancel();\n  handler.func(stream);\n}\nvar streamHandlers = {\n  unary: handleUnary,\n  server_stream: handleServerStreaming,\n  client_stream: handleClientStreaming,\n  bidi: handleBidiStreaming\n};\n\n/**\n * Constructs a server object that stores request handlers and delegates\n * incoming requests to those handlers\n * @memberof grpc\n * @constructor\n * @param {Object=} options Options that should be passed to the internal server\n *     implementation. The available options are listed in\n *     [this document]{@link https://grpc.github.io/grpc/core/group__grpc__arg__keys.html}.\n * @example\n * var server = new grpc.Server();\n * server.addProtoService(protobuf_service_descriptor, service_implementation);\n * server.bind('address:port', server_credential);\n * server.start();\n */\nfunction Server(options) {\n  this.handlers = {};\n  var server = new grpc.Server(options);\n  this._server = server;\n  this.started = false;\n}\n\n/**\n * Start the server and begin handling requests\n */\nServer.prototype.start = function () {\n  if (this.started) {\n    throw new Error('Server is already running');\n  }\n  var self = this;\n  this.started = true;\n  this._server.start();\n  /**\n   * Handles the SERVER_RPC_NEW event. If there is a handler associated with\n   * the requested method, use that handler to respond to the request. Then\n   * wait for the next request\n   * @param {grpc.internal~Event} event The event to handle with tag\n   *     SERVER_RPC_NEW\n   */\n  function handleNewCall(err, event) {\n    if (err) {\n      return;\n    }\n    var details = event.new_call;\n    var call = details.call;\n    var method = details.method;\n    var metadata = Metadata._fromCoreRepresentation(details.metadata);\n    if (method === null) {\n      return;\n    }\n    self._server.requestCall(handleNewCall);\n    var handler;\n    if (self.handlers.hasOwnProperty(method)) {\n      handler = self.handlers[method];\n    } else {\n      var batch = {};\n      batch[grpc.opType.SEND_INITIAL_METADATA] = new Metadata()._getCoreRepresentation();\n      batch[grpc.opType.SEND_STATUS_FROM_SERVER] = {\n        code: constants.status.UNIMPLEMENTED,\n        details: 'RPC method not implemented ' + method,\n        metadata: new Metadata()._getCoreRepresentation()\n      };\n      batch[grpc.opType.RECV_CLOSE_ON_SERVER] = true;\n      call.startBatch(batch, function () {});\n      return;\n    }\n    streamHandlers[handler.type](call, handler, metadata);\n  }\n  this._server.requestCall(handleNewCall);\n};\n\n/**\n * Unified type for application handlers for all types of calls\n * @typedef {(grpc.Server~handleUnaryCall\n *            |grpc.Server~handleClientStreamingCall\n *            |grpc.Server~handleServerStreamingCall\n *            |grpc.Server~handleBidiStreamingCall)} grpc.Server~handleCall\n */\n\n/**\n * Registers a handler to handle the named method. Fails if there already is\n * a handler for the given method. Returns true on success\n * @param {string} name The name of the method that the provided function should\n *     handle/respond to.\n * @param {grpc.Server~handleCall} handler Function that takes a stream of\n *     request values and returns a stream of response values\n * @param {grpc~serialize} serialize Serialization function for responses\n * @param {grpc~deserialize} deserialize Deserialization function for requests\n * @param {('unary'|'client_stream'|'server_stream'|'bidi')} type The streaming type of method that this handles\n * @return {boolean} True if the handler was set. False if a handler was already\n *     set for that name.\n */\nServer.prototype.register = function (name, handler, serialize, deserialize, type) {\n  if (this.handlers.hasOwnProperty(name)) {\n    return false;\n  }\n  this.handlers[name] = {\n    func: handler,\n    serialize: serialize,\n    deserialize: deserialize,\n    type: type\n  };\n  return true;\n};\n\n/**\n * Gracefully shuts down the server. The server will stop receiving new calls,\n * and any pending calls will complete. The callback will be called when all\n * pending calls have completed and the server is fully shut down. This method\n * is idempotent with itself and forceShutdown.\n * @param {function()} callback The shutdown complete callback\n */\nServer.prototype.tryShutdown = function (callback) {\n  this._server.tryShutdown(callback);\n};\n\n/**\n * Forcibly shuts down the server. The server will stop receiving new calls\n * and cancel all pending calls. When it returns, the server has shut down.\n * This method is idempotent with itself and tryShutdown, and it will trigger\n * any outstanding tryShutdown callbacks.\n */\nServer.prototype.forceShutdown = function () {\n  this._server.forceShutdown();\n};\nvar unimplementedStatusResponse = {\n  code: constants.status.UNIMPLEMENTED,\n  details: 'The server does not implement this method'\n};\nvar defaultHandler = {\n  unary: function (call, callback) {\n    callback(unimplementedStatusResponse);\n  },\n  client_stream: function (call, callback) {\n    callback(unimplementedStatusResponse);\n  },\n  server_stream: function (call) {\n    call.emit('error', unimplementedStatusResponse);\n  },\n  bidi: function (call) {\n    call.emit('error', unimplementedStatusResponse);\n  }\n};\nfunction isObject(thing) {\n  return (typeof thing === 'object' || typeof thing === 'function') && thing !== null;\n}\n\n/**\n * Add a service to the server, with a corresponding implementation.\n * @param {grpc~ServiceDefinition} service The service descriptor\n * @param {Object<String, grpc.Server~handleCall>} implementation Map of method\n *     names to method implementation for the provided service.\n */\nServer.prototype.addService = function (service, implementation) {\n  if (!isObject(service) || !isObject(implementation)) {\n    throw new Error('addService requires two objects as arguments');\n  }\n  if (Object.keys(service).length === 0) {\n    throw new Error('Cannot add an empty service to a server');\n  }\n  if (this.started) {\n    throw new Error('Can\\'t add a service to a started server.');\n  }\n  var self = this;\n  Object.keys(service).forEach(name => {\n    const attrs = service[name];\n    var method_type;\n    if (attrs.requestStream) {\n      if (attrs.responseStream) {\n        method_type = 'bidi';\n      } else {\n        method_type = 'client_stream';\n      }\n    } else {\n      if (attrs.responseStream) {\n        method_type = 'server_stream';\n      } else {\n        method_type = 'unary';\n      }\n    }\n    var impl;\n    if (implementation[name] === undefined) {\n      /* Handle the case where the method is passed with the name exactly as\n         written in the proto file, instead of using JavaScript function\n         naming style */\n      if (implementation[attrs.originalName] === undefined) {\n        common.log(constants.logVerbosity.ERROR, 'Method handler ' + name + ' for ' + attrs.path + ' expected but not provided');\n        impl = defaultHandler[method_type];\n      } else {\n        impl = implementation[attrs.originalName].bind(implementation);\n      }\n    } else {\n      impl = implementation[name].bind(implementation);\n    }\n    var serialize = attrs.responseSerialize;\n    var deserialize = attrs.requestDeserialize;\n    var register_success = self.register(attrs.path, impl, serialize, deserialize, method_type);\n    if (!register_success) {\n      throw new Error('Method handler for ' + attrs.path + ' already provided.');\n    }\n  });\n};\n\n/**\n * Add a proto service to the server, with a corresponding implementation\n * @deprecated Use {@link grpc.Server#addService} instead\n * @param {Protobuf.Reflect.Service} service The proto service descriptor\n * @param {Object<String, grpc.Server~handleCall>} implementation Map of method\n *     names to method implementation for the provided service.\n */\nServer.prototype.addProtoService = util.deprecate(function (service, implementation) {\n  var options;\n  var protobuf_js_5_common = require('./protobuf_js_5_common');\n  var protobuf_js_6_common = require('./protobuf_js_6_common');\n  if (protobuf_js_5_common.isProbablyProtobufJs5(service)) {\n    options = Object.assign({}, common.defaultGrpcOptions, service.grpc_options);\n    this.addService(protobuf_js_5_common.getProtobufServiceAttrs(service, options), implementation);\n  } else if (protobuf_js_6_common.isProbablyProtobufJs6(service)) {\n    options = Object.assign({}, common.defaultGrpcOptions, service.grpc_options);\n    this.addService(protobuf_js_6_common.getProtobufServiceAttrs(service, options), implementation);\n  } else {\n    // We assume that this is a service attributes object\n    this.addService(service, implementation);\n  }\n}, 'Server#addProtoService: Use Server#addService instead');\n\n/**\n * Binds the server to the given port, with SSL disabled if creds is an\n * insecure credentials object\n * @param {string} port The port that the server should bind on, in the format\n *     \"address:port\"\n * @param {grpc.ServerCredentials} creds Server credential object to be used for\n *     SSL. Pass an insecure credentials object for an insecure port.\n * @return {number} The bound port number. Negative if binding the port failed.\n */\nServer.prototype.bind = function (port, creds) {\n  if (this.started) {\n    throw new Error('Can\\'t bind an already running server to an address');\n  }\n  return this._server.addHttp2Port(port, creds);\n};\n\n/**\n * Called with the result of attempting to bind a port\n * @callback grpc.Server~bindCallback\n * @param {Error=} error If non-null, indicates that binding the port failed.\n * @param {number} port The bound port number. If binding the port fails, this\n *     will be negative to match the output of bind.\n */\n\n/**\n * Binds the server to the given port, with SSL disabled if creds is an\n * insecure credentials object. Provides the result asynchronously.\n * @param {string} port The port that the server should bind on, in the format\n *     \"address:port\"\n * @param {grpc.ServerCredentials} creds Server credential object to be used for\n *     SSL. Pass an insecure credentials object for an insecure port.\n */\nServer.prototype.bindAsync = function (port, creds, callback) {\n  /* This can throw. We do not try to catch that error because it indicates an\n   * incorrect use of the function, which should not be surfaced asynchronously\n   */\n  const result = this.bind(port, creds);\n  if (result < 0) {\n    setImmediate(callback, new Error('Failed to bind port'), result);\n  } else {\n    setImmediate(callback, null, result);\n  }\n};\nexports.Server = Server;","map":{"version":3,"names":["require","grpc","common","Metadata","constants","stream","Readable","Writable","Duplex","util","EventEmitter","handleError","call","error","statusMetadata","status","code","UNKNOWN","details","hasOwnProperty","message","Number","isInteger","metadata","_getCoreRepresentation","error_batch","metadataSent","opType","SEND_INITIAL_METADATA","SEND_STATUS_FROM_SERVER","startBatch","sendUnaryResponse","value","serialize","flags","end_batch","OK","e","log","logVerbosity","ERROR","INTERNAL","grpcWriteFlags","SEND_MESSAGE","setUpWritable","finished","wrapIgnoreNull","sendStatus","batch","on","setStatus","err","terminateCall","end","prototype","setUpReadable","deserialize","reading","terminate","inherits","ServerUnaryCall","cancelled","request","undefined","ServerWritableStream","objectMode","_write","chunk","encoding","callback","self","isFinite","emit","ServerReadableStream","_read","size","readCallback","event","push","data","read","deserialized","read_batch","RECV_MESSAGE","ServerDuplexStream","sendMetadata","responseMetadata","getPeer","waitForCancel","cancel_batch","RECV_CLOSE_ON_SERVER","result","handleUnary","handler","emitter","func","sendUnaryData","trailer","handleServerStreaming","handleClientStreaming","handleBidiStreaming","streamHandlers","unary","server_stream","client_stream","bidi","Server","options","handlers","server","_server","started","start","Error","handleNewCall","new_call","method","_fromCoreRepresentation","requestCall","UNIMPLEMENTED","type","register","name","tryShutdown","forceShutdown","unimplementedStatusResponse","defaultHandler","isObject","thing","addService","service","implementation","Object","keys","length","forEach","attrs","method_type","requestStream","responseStream","impl","originalName","path","bind","responseSerialize","requestDeserialize","register_success","addProtoService","deprecate","protobuf_js_5_common","protobuf_js_6_common","isProbablyProtobufJs5","assign","defaultGrpcOptions","grpc_options","getProtobufServiceAttrs","isProbablyProtobufJs6","port","creds","addHttp2Port","bindAsync","setImmediate","exports"],"sources":["/var/www/html/project/Dash_Vuexy-master/node_modules/grpc/src/server.js"],"sourcesContent":["/**\n * @license\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n'use strict';\n\nvar grpc = require('./grpc_extension');\n\nvar common = require('./common');\n\nvar Metadata = require('./metadata');\n\nvar constants = require('./constants');\n\nvar stream = require('stream');\n\nvar Readable = stream.Readable;\nvar Writable = stream.Writable;\nvar Duplex = stream.Duplex;\nvar util = require('util');\n\nvar EventEmitter = require('events').EventEmitter;\n\n/**\n * Handle an error on a call by sending it as a status\n * @private\n * @param {grpc.internal~Call} call The call to send the error on\n * @param {(Object|Error)} error The error object\n */\nfunction handleError(call, error) {\n  var statusMetadata = new Metadata();\n  var status = {\n    code: constants.status.UNKNOWN,\n    details: 'Unknown Error'\n  };\n  if (error.hasOwnProperty('message')) {\n    status.details = error.message;\n  }\n  if (error.hasOwnProperty('code') && Number.isInteger(error.code)) {\n    status.code = error.code;\n    if (error.hasOwnProperty('details')) {\n      status.details = error.details;\n    }\n  }\n  if (error.hasOwnProperty('metadata')) {\n    statusMetadata = error.metadata;\n  }\n  status.metadata = statusMetadata._getCoreRepresentation();\n  var error_batch = {};\n  if (!call.metadataSent) {\n    error_batch[grpc.opType.SEND_INITIAL_METADATA] =\n        (new Metadata())._getCoreRepresentation();\n  }\n  error_batch[grpc.opType.SEND_STATUS_FROM_SERVER] = status;\n  call.startBatch(error_batch, function(){});\n}\n\n/**\n * Send a response to a unary or client streaming call.\n * @private\n * @param {grpc.Call} call The call to respond on\n * @param {*} value The value to respond with\n * @param {grpc~serialize} serialize Serialization function for the\n *     response\n * @param {grpc.Metadata=} metadata Optional trailing metadata to send with\n *     status\n * @param {number=} [flags=0] Flags for modifying how the message is sent.\n */\nfunction sendUnaryResponse(call, value, serialize, metadata, flags) {\n  var end_batch = {};\n  var statusMetadata = new Metadata();\n  var status = {\n    code: constants.status.OK,\n    details: 'OK'\n  };\n  if (metadata) {\n    statusMetadata = metadata;\n  }\n  var message;\n  try {\n    message = serialize(value);\n  } catch (e) {\n    common.log(constants.logVerbosity.ERROR, e);\n    e.code = constants.status.INTERNAL;\n    handleError(call, e);\n    return;\n  }\n  status.metadata = statusMetadata._getCoreRepresentation();\n  if (!call.metadataSent) {\n    end_batch[grpc.opType.SEND_INITIAL_METADATA] =\n        (new Metadata())._getCoreRepresentation();\n    call.metadataSent = true;\n  }\n  message.grpcWriteFlags = flags;\n  end_batch[grpc.opType.SEND_MESSAGE] = message;\n  end_batch[grpc.opType.SEND_STATUS_FROM_SERVER] = status;\n  call.startBatch(end_batch, function (){});\n}\n\n/**\n * Initialize a writable stream. This is used for both the writable and duplex\n * stream constructors.\n * @private\n * @param {Writable} stream The stream to set up\n * @param {function(*):Buffer=} Serialization function for responses\n */\nfunction setUpWritable(stream, serialize) {\n  stream.finished = false;\n  stream.status = {\n    code : constants.status.OK,\n    details : 'OK',\n    metadata : new Metadata()\n  };\n  stream.serialize = common.wrapIgnoreNull(serialize);\n  function sendStatus() {\n    var batch = {};\n    if (!stream.call.metadataSent) {\n      stream.call.metadataSent = true;\n      batch[grpc.opType.SEND_INITIAL_METADATA] =\n          (new Metadata())._getCoreRepresentation();\n    }\n\n    if (stream.status.metadata) {\n      stream.status.metadata = stream.status.metadata._getCoreRepresentation();\n    }\n    batch[grpc.opType.SEND_STATUS_FROM_SERVER] = stream.status;\n    stream.call.startBatch(batch, function(){});\n  }\n  stream.on('finish', sendStatus);\n  /**\n   * Set the pending status to a given error status. If the error does not have\n   * code or details properties, the code will be set to grpc.status.UNKNOWN\n   * and the details will be set to 'Unknown Error'.\n   * @param {Error} err The error object\n   */\n  function setStatus(err) {\n    var code = constants.status.UNKNOWN;\n    var details = 'Unknown Error';\n    var metadata = new Metadata();\n    if (err.hasOwnProperty('message')) {\n      details = err.message;\n    }\n    if (err.hasOwnProperty('code')) {\n      code = err.code;\n      if (err.hasOwnProperty('details')) {\n        details = err.details;\n      }\n    }\n    if (err.hasOwnProperty('metadata')) {\n      metadata = err.metadata;\n    }\n    stream.status = {code: code, details: details, metadata: metadata};\n  }\n  /**\n   * Terminate the call. This includes indicating that reads are done, draining\n   * all pending writes, and sending the given error as a status\n   * @param {Error} err The error object\n   * @this GrpcServerStream\n   */\n  function terminateCall(err) {\n    // Drain readable data\n    setStatus(err);\n    stream.end();\n  }\n  stream.on('error', terminateCall);\n  /**\n   * Override of Writable#end method that allows for sending metadata with a\n   * success status.\n   * @param {Metadata=} metadata Metadata to send with the status\n   */\n  stream.end = function(metadata) {\n    if (metadata) {\n      stream.status.metadata = metadata;\n    }\n    Writable.prototype.end.call(this);\n  };\n}\n\n/**\n * Initialize a readable stream. This is used for both the readable and duplex\n * stream constructors.\n * @private\n * @param {Readable} stream The stream to initialize\n * @param {grpc~deserialize} deserialize Deserialization function for\n *     incoming data.\n */\nfunction setUpReadable(stream, deserialize) {\n  stream.deserialize = common.wrapIgnoreNull(deserialize);\n  stream.finished = false;\n  stream.reading = false;\n\n  stream.terminate = function() {\n    stream.finished = true;\n    stream.on('data', function() {});\n  };\n\n  stream.on('cancelled', function() {\n    stream.terminate();\n  });\n}\n\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerUnaryCall~cancelled\n */\n\nutil.inherits(ServerUnaryCall, EventEmitter);\n\n/**\n * An EventEmitter. Used for unary calls.\n * @constructor grpc~ServerUnaryCall\n * @extends external:EventEmitter\n * @param {grpc.internal~Call} call The call object associated with the request\n * @param {grpc.Metadata} metadata The request metadata from the client\n */\nfunction ServerUnaryCall(call, metadata) {\n  EventEmitter.call(this);\n  this.call = call;\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerUnaryCall#cancelled\n   */\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerUnaryCall#metadata\n   */\n  this.metadata = metadata;\n  /**\n   * The request message from the client\n   * @member {*} grpc~ServerUnaryCall#request\n   */\n  this.request = undefined;\n}\n\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerWritableStream~cancelled\n */\n\nutil.inherits(ServerWritableStream, Writable);\n\n/**\n * A stream that the server can write to. Used for calls that are streaming from\n * the server side.\n * @constructor grpc~ServerWritableStream\n * @extends external:Writable\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerWritableStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerWritableStream#getPeer\n * @param {grpc.internal~Call} call The call object to send data with\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~serialize} serialize Serialization function for writes\n */\nfunction ServerWritableStream(call, metadata, serialize) {\n  Writable.call(this, {objectMode: true});\n  this.call = call;\n\n  this.finished = false;\n  setUpWritable(this, serialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerWritableStream#cancelled\n   */\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerWritableStream#metadata\n   */\n  this.metadata = metadata;\n  /**\n   * The request message from the client\n   * @member {*} grpc~ServerWritableStream#request\n   */\n  this.request = undefined;\n}\n\n/**\n * Start writing a chunk of data. This is an implementation of a method required\n * for implementing stream.Writable.\n * @private\n * @param {Buffer} chunk The chunk of data to write\n * @param {string} encoding Used to pass write flags\n * @param {function(Error=)} callback Callback to indicate that the write is\n *     complete\n */\nfunction _write(chunk, encoding, callback) {\n  /* jshint validthis: true */\n  var batch = {};\n  var self = this;\n  var message;\n  try {\n    message = this.serialize(chunk);\n  } catch (e) {\n    common.log(constants.logVerbosity.ERROR, e);\n    e.code = constants.status.INTERNAL;\n    callback(e);\n    return;\n  }\n  if (!this.call.metadataSent) {\n    batch[grpc.opType.SEND_INITIAL_METADATA] =\n        (new Metadata())._getCoreRepresentation();\n    this.call.metadataSent = true;\n  }\n  if (Number.isFinite(encoding)) {\n    /* Attach the encoding if it is a finite number. This is the closest we\n     * can get to checking that it is valid flags */\n    message.grpcWriteFlags = encoding;\n  }\n  batch[grpc.opType.SEND_MESSAGE] = message;\n  this.call.startBatch(batch, function(err, value) {\n    if (err) {\n      self.emit('error', err);\n      return;\n    }\n    callback();\n  });\n}\n\nServerWritableStream.prototype._write = _write;\n\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerReadableStream~cancelled\n */\n\nutil.inherits(ServerReadableStream, Readable);\n\n/**\n * A stream that the server can read from. Used for calls that are streaming\n * from the client side.\n * @constructor grpc~ServerReadableStream\n * @extends external:Readable\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerReadableStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerReadableStream#getPeer\n * @param {grpc.internal~Call} call The call object to read data with\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~deserialize} deserialize Deserialization function for reads\n */\nfunction ServerReadableStream(call, metadata, deserialize) {\n  Readable.call(this, {objectMode: true});\n  this.call = call;\n  setUpReadable(this, deserialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerReadableStream#cancelled\n   */\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerReadableStream#metadata\n   */\n  this.metadata = metadata;\n}\n\n/**\n * Start reading from the gRPC data source. This is an implementation of a\n * method required for implementing stream.Readable\n * @access private\n * @param {number} size Ignored\n */\nfunction _read(size) {\n  /* jshint validthis: true */\n  var self = this;\n  /**\n   * Callback to be called when a READ event is received. Pushes the data onto\n   * the read queue and starts reading again if applicable\n   * @param {grpc.Event} event READ event object\n   */\n  function readCallback(err, event) {\n    if (err) {\n      self.terminate();\n      return;\n    }\n    if (self.finished) {\n      self.push(null);\n      return;\n    }\n    var data = event.read;\n    var deserialized;\n    try {\n      deserialized = self.deserialize(data);\n    } catch (e) {\n      common.log(constants.logVerbosity.ERROR, e);\n      e.code = constants.status.INTERNAL;\n      self.emit('error', e);\n      return;\n    }\n    if (self.push(deserialized) && data !== null) {\n      var read_batch = {};\n      read_batch[grpc.opType.RECV_MESSAGE] = true;\n      self.call.startBatch(read_batch, readCallback);\n    } else {\n      self.reading = false;\n    }\n  }\n  if (self.finished) {\n    self.push(null);\n  } else {\n    if (!self.reading) {\n      self.reading = true;\n      var batch = {};\n      batch[grpc.opType.RECV_MESSAGE] = true;\n      self.call.startBatch(batch, readCallback);\n    }\n  }\n}\n\nServerReadableStream.prototype._read = _read;\n\n/**\n * Emitted when the call has been cancelled. After this has been emitted, the\n * call's `cancelled` property will be set to `true`.\n * @event grpc~ServerDuplexStream~cancelled\n */\n\nutil.inherits(ServerDuplexStream, Duplex);\n\n/**\n * A stream that the server can read from or write to. Used for calls with\n * duplex streaming.\n * @constructor grpc~ServerDuplexStream\n * @extends external:Duplex\n * @borrows grpc~ServerUnaryCall#sendMetadata as\n *     grpc~ServerDuplexStream#sendMetadata\n * @borrows grpc~ServerUnaryCall#getPeer as grpc~ServerDuplexStream#getPeer\n * @param {grpc.internal~Call} call Call object to proxy\n * @param {grpc.Metadata} metadata The request metadata from the client\n * @param {grpc~serialize} serialize Serialization function for requests\n * @param {grpc~deserialize} deserialize Deserialization function for\n *     responses\n */\nfunction ServerDuplexStream(call, metadata, serialize, deserialize) {\n  Duplex.call(this, {objectMode: true});\n  this.call = call;\n  setUpWritable(this, serialize);\n  setUpReadable(this, deserialize);\n  /**\n   * Indicates if the call has been cancelled\n   * @member {boolean} grpc~ServerReadableStream#cancelled\n   */\n  this.cancelled = false;\n  /**\n   * The request metadata from the client\n   * @member {grpc.Metadata} grpc~ServerReadableStream#metadata\n   */\n  this.metadata = metadata;\n}\n\nServerDuplexStream.prototype._read = _read;\nServerDuplexStream.prototype._write = _write;\n\n/**\n * Send the initial metadata for a writable stream.\n * @alias grpc~ServerUnaryCall#sendMetadata\n * @param {grpc.Metadata} responseMetadata Metadata to send\n */\nfunction sendMetadata(responseMetadata) {\n  /* jshint validthis: true */\n  var self = this;\n  if (!this.call.metadataSent) {\n    this.call.metadataSent = true;\n    var batch = {};\n    batch[grpc.opType.SEND_INITIAL_METADATA] =\n        responseMetadata._getCoreRepresentation();\n    this.call.startBatch(batch, function(err) {\n      if (err) {\n        self.emit('error', err);\n        return;\n      }\n    });\n  }\n}\n\nServerUnaryCall.prototype.sendMetadata = sendMetadata;\nServerWritableStream.prototype.sendMetadata = sendMetadata;\nServerReadableStream.prototype.sendMetadata = sendMetadata;\nServerDuplexStream.prototype.sendMetadata = sendMetadata;\n\n/**\n * Get the endpoint this call/stream is connected to.\n * @alias grpc~ServerUnaryCall#getPeer\n * @return {string} The URI of the endpoint\n */\nfunction getPeer() {\n  /* jshint validthis: true */\n  return this.call.getPeer();\n}\n\nServerUnaryCall.prototype.getPeer = getPeer;\nServerReadableStream.prototype.getPeer = getPeer;\nServerWritableStream.prototype.getPeer = getPeer;\nServerDuplexStream.prototype.getPeer = getPeer;\n\n/**\n * Wait for the client to close, then emit a cancelled event if the client\n * cancelled.\n * @private\n */\nfunction waitForCancel() {\n  /* jshint validthis: true */\n  var self = this;\n  var cancel_batch = {};\n  cancel_batch[grpc.opType.RECV_CLOSE_ON_SERVER] = true;\n  self.call.startBatch(cancel_batch, function(err, result) {\n    if (err) {\n      self.emit('error', err);\n    }\n    if (result.cancelled) {\n      self.cancelled = true;\n      self.emit('cancelled');\n    }\n  });\n}\n\nServerUnaryCall.prototype.waitForCancel = waitForCancel;\nServerReadableStream.prototype.waitForCancel = waitForCancel;\nServerWritableStream.prototype.waitForCancel = waitForCancel;\nServerDuplexStream.prototype.waitForCancel = waitForCancel;\n\n/**\n * Callback function passed to server handlers that handle methods with unary\n * responses.\n * @callback grpc.Server~sendUnaryData\n * @param {grpc~ServiceError} error An error, if the call failed\n * @param {*} value The response value. Must be a valid argument to the\n *     `responseSerialize` method of the method that is being handled\n * @param {grpc.Metadata=} trailer Trailing metadata to send, if applicable\n * @param {grpc.writeFlags=} flags Flags to modify writing the response\n */\n\n/**\n * User-provided method to handle unary requests on a server\n * @callback grpc.Server~handleUnaryCall\n * @param {grpc~ServerUnaryCall} call The call object\n * @param {grpc.Server~sendUnaryData} callback The callback to call to respond\n *     to the request\n */\n\n/**\n * Fully handle a unary call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleUnaryCall} handler.func The handler function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\nfunction handleUnary(call, handler, metadata) {\n  var emitter = new ServerUnaryCall(call, metadata);\n  emitter.on('error', function(error) {\n    handleError(call, error);\n  });\n  emitter.waitForCancel();\n  var batch = {};\n  batch[grpc.opType.RECV_MESSAGE] = true;\n  call.startBatch(batch, function(err, result) {\n    if (err) {\n      handleError(call, err);\n      return;\n    }\n    try {\n      emitter.request = handler.deserialize(result.read);\n    } catch (e) {\n      common.log(constants.logVerbosity.ERROR, e);\n      e.code = constants.status.INTERNAL;\n      handleError(call, e);\n      return;\n    }\n    if (emitter.cancelled) {\n      return;\n    }\n    handler.func(emitter, function sendUnaryData(err, value, trailer, flags) {\n      if (err) {\n        if (trailer) {\n          err.metadata = trailer;\n        }\n        handleError(call, err);\n      } else {\n        sendUnaryResponse(call, value, handler.serialize, trailer, flags);\n      }\n    });\n  });\n}\n\n/**\n * User provided method to handle server streaming methods on the server.\n * @callback grpc.Server~handleServerStreamingCall\n * @param {grpc~ServerWritableStream} call The call object\n */\n\n/**\n * Fully handle a server streaming call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleServerStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\nfunction handleServerStreaming(call, handler, metadata) {\n  var stream = new ServerWritableStream(call, metadata, handler.serialize);\n  stream.waitForCancel();\n  var batch = {};\n  batch[grpc.opType.RECV_MESSAGE] = true;\n  call.startBatch(batch, function(err, result) {\n    if (err) {\n      stream.emit('error', err);\n      return;\n    }\n    try {\n      stream.request = handler.deserialize(result.read);\n    } catch (e) {\n      common.log(constants.logVerbosity.ERROR, e);\n      e.code = constants.status.INTERNAL;\n      stream.emit('error', e);\n      return;\n    }\n    handler.func(stream);\n  });\n}\n\n/**\n * User provided method to handle client streaming methods on the server.\n * @callback grpc.Server~handleClientStreamingCall\n * @param {grpc~ServerReadableStream} call The call object\n * @param {grpc.Server~sendUnaryData} callback The callback to call to respond\n *     to the request\n */\n\n/**\n * Fully handle a client streaming call\n * @access private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleClientStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {grpc.Metadata} metadata Metadata from the client\n */\nfunction handleClientStreaming(call, handler, metadata) {\n  var stream = new ServerReadableStream(call, metadata, handler.deserialize);\n  stream.on('error', function(error) {\n    handleError(call, error);\n  });\n  stream.waitForCancel();\n  handler.func(stream, function(err, value, trailer, flags) {\n    stream.terminate();\n    if (err) {\n      if (trailer) {\n        err.metadata = trailer;\n      }\n      handleError(call, err);\n    } else {\n      sendUnaryResponse(call, value, handler.serialize, trailer, flags);\n    }\n  });\n}\n\n/**\n * User provided method to handle bidirectional streaming calls on the server.\n * @callback grpc.Server~handleBidiStreamingCall\n * @param {grpc~ServerDuplexStream} call The call object\n */\n\n/**\n * Fully handle a bidirectional streaming call\n * @private\n * @param {grpc.internal~Call} call The call to handle\n * @param {Object} handler Request handler object for the method that was called\n * @param {grpc~Server.handleBidiStreamingCall} handler.func The handler\n *     function\n * @param {grpc~deserialize} handler.deserialize The deserialization function\n *     for request data\n * @param {grpc~serialize} handler.serialize The serialization function for\n *     response data\n * @param {Metadata} metadata Metadata from the client\n */\nfunction handleBidiStreaming(call, handler, metadata) {\n  var stream = new ServerDuplexStream(call, metadata, handler.serialize,\n                                      handler.deserialize);\n  stream.waitForCancel();\n  handler.func(stream);\n}\n\nvar streamHandlers = {\n  unary: handleUnary,\n  server_stream: handleServerStreaming,\n  client_stream: handleClientStreaming,\n  bidi: handleBidiStreaming\n};\n\n/**\n * Constructs a server object that stores request handlers and delegates\n * incoming requests to those handlers\n * @memberof grpc\n * @constructor\n * @param {Object=} options Options that should be passed to the internal server\n *     implementation. The available options are listed in\n *     [this document]{@link https://grpc.github.io/grpc/core/group__grpc__arg__keys.html}.\n * @example\n * var server = new grpc.Server();\n * server.addProtoService(protobuf_service_descriptor, service_implementation);\n * server.bind('address:port', server_credential);\n * server.start();\n */\nfunction Server(options) {\n  this.handlers = {};\n  var server = new grpc.Server(options);\n  this._server = server;\n  this.started = false;\n}\n\n/**\n * Start the server and begin handling requests\n */\nServer.prototype.start = function() {\n  if (this.started) {\n    throw new Error('Server is already running');\n  }\n  var self = this;\n  this.started = true;\n  this._server.start();\n  /**\n   * Handles the SERVER_RPC_NEW event. If there is a handler associated with\n   * the requested method, use that handler to respond to the request. Then\n   * wait for the next request\n   * @param {grpc.internal~Event} event The event to handle with tag\n   *     SERVER_RPC_NEW\n   */\n  function handleNewCall(err, event) {\n    if (err) {\n      return;\n    }\n    var details = event.new_call;\n    var call = details.call;\n    var method = details.method;\n    var metadata = Metadata._fromCoreRepresentation(details.metadata);\n    if (method === null) {\n      return;\n    }\n    self._server.requestCall(handleNewCall);\n    var handler;\n    if (self.handlers.hasOwnProperty(method)) {\n      handler = self.handlers[method];\n    } else {\n      var batch = {};\n      batch[grpc.opType.SEND_INITIAL_METADATA] =\n          (new Metadata())._getCoreRepresentation();\n      batch[grpc.opType.SEND_STATUS_FROM_SERVER] = {\n        code: constants.status.UNIMPLEMENTED,\n        details: 'RPC method not implemented ' + method,\n        metadata: (new Metadata())._getCoreRepresentation()\n      };\n      batch[grpc.opType.RECV_CLOSE_ON_SERVER] = true;\n      call.startBatch(batch, function() {});\n      return;\n    }\n    streamHandlers[handler.type](call, handler, metadata);\n  }\n  this._server.requestCall(handleNewCall);\n};\n\n/**\n * Unified type for application handlers for all types of calls\n * @typedef {(grpc.Server~handleUnaryCall\n *            |grpc.Server~handleClientStreamingCall\n *            |grpc.Server~handleServerStreamingCall\n *            |grpc.Server~handleBidiStreamingCall)} grpc.Server~handleCall\n */\n\n/**\n * Registers a handler to handle the named method. Fails if there already is\n * a handler for the given method. Returns true on success\n * @param {string} name The name of the method that the provided function should\n *     handle/respond to.\n * @param {grpc.Server~handleCall} handler Function that takes a stream of\n *     request values and returns a stream of response values\n * @param {grpc~serialize} serialize Serialization function for responses\n * @param {grpc~deserialize} deserialize Deserialization function for requests\n * @param {('unary'|'client_stream'|'server_stream'|'bidi')} type The streaming type of method that this handles\n * @return {boolean} True if the handler was set. False if a handler was already\n *     set for that name.\n */\nServer.prototype.register = function(name, handler, serialize, deserialize,\n                                     type) {\n  if (this.handlers.hasOwnProperty(name)) {\n    return false;\n  }\n  this.handlers[name] = {\n    func: handler,\n    serialize: serialize,\n    deserialize: deserialize,\n    type: type\n  };\n  return true;\n};\n\n/**\n * Gracefully shuts down the server. The server will stop receiving new calls,\n * and any pending calls will complete. The callback will be called when all\n * pending calls have completed and the server is fully shut down. This method\n * is idempotent with itself and forceShutdown.\n * @param {function()} callback The shutdown complete callback\n */\nServer.prototype.tryShutdown = function(callback) {\n  this._server.tryShutdown(callback);\n};\n\n/**\n * Forcibly shuts down the server. The server will stop receiving new calls\n * and cancel all pending calls. When it returns, the server has shut down.\n * This method is idempotent with itself and tryShutdown, and it will trigger\n * any outstanding tryShutdown callbacks.\n */\nServer.prototype.forceShutdown = function() {\n  this._server.forceShutdown();\n};\n\nvar unimplementedStatusResponse = {\n  code: constants.status.UNIMPLEMENTED,\n  details: 'The server does not implement this method'\n};\n\nvar defaultHandler = {\n  unary: function(call, callback) {\n    callback(unimplementedStatusResponse);\n  },\n  client_stream: function(call, callback) {\n    callback(unimplementedStatusResponse);\n  },\n  server_stream: function(call) {\n    call.emit('error', unimplementedStatusResponse);\n  },\n  bidi: function(call) {\n    call.emit('error', unimplementedStatusResponse);\n  }\n};\n\nfunction isObject(thing) {\n  return (typeof thing === 'object' || typeof thing === 'function') && thing !== null;\n}\n\n/**\n * Add a service to the server, with a corresponding implementation.\n * @param {grpc~ServiceDefinition} service The service descriptor\n * @param {Object<String, grpc.Server~handleCall>} implementation Map of method\n *     names to method implementation for the provided service.\n */\nServer.prototype.addService = function(service, implementation) {\n  if (!isObject(service) || !isObject(implementation)) {\n    throw new Error('addService requires two objects as arguments');\n  }\n  if (Object.keys(service).length === 0) {\n    throw new Error('Cannot add an empty service to a server');\n  }\n  if (this.started) {\n    throw new Error('Can\\'t add a service to a started server.');\n  }\n  var self = this;\n  Object.keys(service).forEach(name => {\n    const attrs = service[name];\n    var method_type;\n    if (attrs.requestStream) {\n      if (attrs.responseStream) {\n        method_type = 'bidi';\n      } else {\n        method_type = 'client_stream';\n      }\n    } else {\n      if (attrs.responseStream) {\n        method_type = 'server_stream';\n      } else {\n        method_type = 'unary';\n      }\n    }\n    var impl;\n    if (implementation[name] === undefined) {\n      /* Handle the case where the method is passed with the name exactly as\n         written in the proto file, instead of using JavaScript function\n         naming style */\n      if (implementation[attrs.originalName] === undefined) {\n        common.log(constants.logVerbosity.ERROR, 'Method handler ' + name +\n            ' for ' + attrs.path + ' expected but not provided');\n        impl = defaultHandler[method_type];\n      } else {\n        impl = implementation[attrs.originalName].bind(implementation);\n      }\n    } else {\n      impl = implementation[name].bind(implementation);\n    }\n    var serialize = attrs.responseSerialize;\n    var deserialize = attrs.requestDeserialize;\n    var register_success = self.register(attrs.path, impl, serialize,\n                                         deserialize, method_type);\n    if (!register_success) {\n      throw new Error('Method handler for ' + attrs.path +\n          ' already provided.');\n    }\n  });\n};\n\n/**\n * Add a proto service to the server, with a corresponding implementation\n * @deprecated Use {@link grpc.Server#addService} instead\n * @param {Protobuf.Reflect.Service} service The proto service descriptor\n * @param {Object<String, grpc.Server~handleCall>} implementation Map of method\n *     names to method implementation for the provided service.\n */\nServer.prototype.addProtoService = util.deprecate(function(service,\n                                                           implementation) {\n  var options;\n  var protobuf_js_5_common = require('./protobuf_js_5_common');\n  var protobuf_js_6_common = require('./protobuf_js_6_common');\n  if (protobuf_js_5_common.isProbablyProtobufJs5(service)) {\n    options = Object.assign({}, common.defaultGrpcOptions, service.grpc_options);\n    this.addService(\n        protobuf_js_5_common.getProtobufServiceAttrs(service, options),\n        implementation);\n  } else if (protobuf_js_6_common.isProbablyProtobufJs6(service)) {\n    options = Object.assign({}, common.defaultGrpcOptions, service.grpc_options);\n    this.addService(\n        protobuf_js_6_common.getProtobufServiceAttrs(service, options),\n        implementation);\n  } else {\n    // We assume that this is a service attributes object\n    this.addService(service, implementation);\n  }\n}, 'Server#addProtoService: Use Server#addService instead');\n\n/**\n * Binds the server to the given port, with SSL disabled if creds is an\n * insecure credentials object\n * @param {string} port The port that the server should bind on, in the format\n *     \"address:port\"\n * @param {grpc.ServerCredentials} creds Server credential object to be used for\n *     SSL. Pass an insecure credentials object for an insecure port.\n * @return {number} The bound port number. Negative if binding the port failed.\n */\nServer.prototype.bind = function(port, creds) {\n  if (this.started) {\n    throw new Error('Can\\'t bind an already running server to an address');\n  }\n  return this._server.addHttp2Port(port, creds);\n};\n\n/**\n * Called with the result of attempting to bind a port\n * @callback grpc.Server~bindCallback\n * @param {Error=} error If non-null, indicates that binding the port failed.\n * @param {number} port The bound port number. If binding the port fails, this\n *     will be negative to match the output of bind.\n */\n\n/**\n * Binds the server to the given port, with SSL disabled if creds is an\n * insecure credentials object. Provides the result asynchronously.\n * @param {string} port The port that the server should bind on, in the format\n *     \"address:port\"\n * @param {grpc.ServerCredentials} creds Server credential object to be used for\n *     SSL. Pass an insecure credentials object for an insecure port.\n */\nServer.prototype.bindAsync = function(port, creds, callback) {\n  /* This can throw. We do not try to catch that error because it indicates an\n   * incorrect use of the function, which should not be surfaced asynchronously\n   */\n  const result = this.bind(port, creds)\n  if (result < 0) {\n    setImmediate(callback, new Error('Failed to bind port'), result);\n  } else {\n    setImmediate(callback, null, result);\n  }\n}\n\nexports.Server = Server;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}