{"ast":null,"code":"\"use strict\";\n\n// Copyright 2017, Google LLC All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst common_1 = require(\"@google-cloud/common\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst arrify = require(\"arrify\");\nconst extend = require(\"extend\");\nconst is = require(\"is\");\nconst isHtml = require('is-html');\nconst teeny_request_1 = require(\"teeny-request\");\nconst PKG = require('../../../package.json');\n/**\n * @typedef {object} ClientConfig\n * @memberof v2\n * @property {string} [projectId] The project ID from the Google Developer's\n *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n *     variable `GCLOUD_PROJECT` for your project ID. If your app is running in\n *     an environment which supports {@link\n * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n * Application Default Credentials}, your project ID will be detected\n * automatically.\n * @property {string} [key] An API key. You should prefer using a Service\n *     Account key file instead of an API key.\n * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\n *     downloaded from the Google Developers Console. If you provide a path to a\n *     JSON file, the `projectId` option above is not necessary. NOTE: .pem and\n *     .p12 require you to specify the `email` option as well.\n * @property {string} [email] Account email address. Required when using a .pem\n *     or .p12 keyFilename.\n * @property {object} [credentials] Credentials object.\n * @property {string} [credentials.client_email]\n * @property {string} [credentials.private_key]\n * @property {boolean} [autoRetry=true] Automatically retry requests if the\n *     response is related to rate limits or certain intermittent server errors.\n *     We will exponentially backoff subsequent requests by default.\n * @property {number} [maxRetries=3] Maximum number of automatic retries\n *     attempted before returning the error.\n * @property {Constructor} [promise] Custom promise module to use instead of\n *     native Promises.\n */\n/**\n * With [Google Translate](https://cloud.google.com/translate), you can\n * dynamically translate text between thousands of language pairs.\n *\n * The Google Cloud Translation API lets websites and programs integrate with\n * Google Translate programmatically.\n *\n * @class\n * @memberof v2\n *\n * @see [Getting Started]{@link https://cloud.google.com/translate/v2/getting_started}\n * @see [Identifying your application to Google]{@link https://cloud.google.com/translate/v2/using_rest#auth}\n *\n * @param {ClientConfig} [options] Configuration options.\n *\n * @example\n * //-\n * // <h3>Custom Translation API</h3>\n * //\n * // The environment variable, `GOOGLE_CLOUD_TRANSLATE_ENDPOINT`, is honored as\n * // a custom backend which our library will send requests to.\n * //-\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:translate_quickstart\n * Full quickstart example:\n */\nclass Translate extends common_1.Service {\n  constructor(options) {\n    let baseUrl = 'https://translation.googleapis.com/language/translate/v2';\n    if (process.env.GOOGLE_CLOUD_TRANSLATE_ENDPOINT) {\n      baseUrl = process.env.GOOGLE_CLOUD_TRANSLATE_ENDPOINT.replace(/\\/+$/, '');\n    }\n    const config = {\n      baseUrl,\n      scopes: ['https://www.googleapis.com/auth/cloud-platform'],\n      packageJson: require('../../../package.json'),\n      projectIdRequired: false,\n      requestModule: teeny_request_1.teenyRequest\n    };\n    super(config, options);\n    this.options = options || {};\n    this.options.request = config.requestModule;\n    if (this.options.key) {\n      this.key = this.options.key;\n    }\n  }\n  /**\n   * @typedef {object} DetectResult\n   * @memberof v2\n   * @property {string} 0.language The language code matched from the input.\n   * @property {number} [0.confidence] A float 0 - 1. The higher the number, the\n   *     higher the confidence in language detection. Note, this is not always\n   *     returned from the API.\n   * @property {object} 1 The full API response.\n   */\n  /**\n   * @callback DetectCallback\n   * @memberof v2\n   * @param {?Error} err Request error, if any.\n   * @param {object|object[]} results The detection results.\n   * @param {string} results.language The language code matched from the input.\n   * @param {number} [results.confidence] A float 0 - 1. The higher the number, the\n   *     higher the confidence in language detection. Note, this is not always\n   *     returned from the API.\n   * @param {object} apiResponse The full API response.\n   */\n  /**\n   * Detect the language used in a string or multiple strings.\n   *\n   * @see [Detect Language]{@link https://cloud.google.com/translate/v2/using_rest#detect-language}\n   *\n   * @param {string|string[]} input - The source string input.\n   * @param {DetectCallback} [callback] Callback function.\n   * @returns {Promise<DetectResponse>}\n   *\n   * @example\n   * const {Translate} = require('@google-cloud/translate');\n   *\n   * const translate = new Translate();\n   *\n   * //-\n   * // Detect the language from a single string input.\n   * //-\n   * translate.detect('Hello', (err, results) => {\n   *   if (!err) {\n   *     // results = {\n   *     //   language: 'en',\n   *     //   confidence: 1,\n   *     //   input: 'Hello'\n   *     // }\n   *   }\n   * });\n   *\n   * //-\n   * // Detect the languages used in multiple strings. Note that the results are\n   * // now provided as an array.\n   * //-\n   * translate.detect([\n   *   'Hello',\n   *   'Hola'\n   * ], (err, results) => {\n   *   if (!err) {\n   *     // results = [\n   *     //   {\n   *     //     language: 'en',\n   *     //     confidence: 1,\n   *     //     input: 'Hello'\n   *     //   },\n   *     //   {\n   *     //     language: 'es',\n   *     //     confidence: 1,\n   *     //     input: 'Hola'\n   *     //   }\n   *     // ]\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * translate.detect('Hello').then((data) => {\n   *   const results = data[0];\n   *   const apiResponse = data[2];\n   * });\n   *\n   * @example <caption>include:samples/translate.js</caption>\n   * region_tag:translate_detect_language\n   * Here's a full example:\n   */\n  detect(input, callback) {\n    const inputIsArray = Array.isArray(input);\n    input = arrify(input);\n    this.request({\n      method: 'POST',\n      uri: '/detect',\n      json: {\n        q: input\n      }\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n      let results = resp.data.detections.map((detection, index) => {\n        const result = extend({}, detection[0], {\n          input: input[index]\n        });\n        // Deprecated.\n        // tslint:disable-next-line no-any\n        delete result.isReliable;\n        return result;\n      });\n      if (input.length === 1 && !inputIsArray) {\n        results = results[0];\n      }\n      callback(null, results, resp);\n    });\n  }\n  /**\n   * @typedef {object} LanguageResult\n   * @memberof v2\n   * @property {string} code The [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1)\n   *     language code.\n   * @property {string} name The language name. This can be translated into your\n   *     preferred language with the `target` option.\n   */\n  /**\n   * @callback GetLanguagesCallback\n   * @memberof v2\n   * @param {?Error} err Request error, if any.\n   * @param {object[]} results The languages supported by the API.\n   * @param {string} results.code The [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1)\n   *     language code.\n   * @param {string} results.name The language name. This can be translated into your\n   *     preferred language with the `target` option.\n   * @param {object} apiResponse The full API response.\n   */\n  /**\n   * Get an array of all supported languages.\n   *\n   * @see [Discovering Supported Languages]{@link https://cloud.google.com/translate/v2/discovering-supported-languages-with-rest}\n   *\n   * @param {string} [target] Get the language names in a language other than\n   *     English.\n   * @param {GetLanguagesCallback} [callback] Callback function.\n   * @returns {Promise<GetLanguagesResponse>}\n   *\n   * @example <caption>include:samples/translate.js</caption>\n   * region_tag:translate_list_codes\n   * Gets the language names in English:\n   *\n   * @example <caption>include:samples/translate.js</caption>\n   * region_tag:translate_list_language_names\n   * Gets the language names in a language other than English:\n   */\n  getLanguages(targetOrCallback, callback) {\n    let target;\n    if (is.fn(targetOrCallback)) {\n      callback = targetOrCallback;\n      target = 'en';\n    } else {\n      target = targetOrCallback;\n    }\n    const reqOpts = {\n      uri: '/languages',\n      useQuerystring: true,\n      qs: {}\n    };\n    if (target && is.string(target)) {\n      reqOpts.qs.target = target;\n    }\n    this.request(reqOpts, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n      const languages = resp.data.languages.map(language => {\n        return {\n          code: language.language,\n          name: language.name\n        };\n      });\n      callback(null, languages, resp);\n    });\n  }\n  /**\n   * Translate request options.\n   *\n   * @typedef {object} TranslateRequest\n   * @memberof v2\n   * @property {string} [format] Set the text's format as `html` or `text`.\n   *     If not provided, we will try to auto-detect if the text given is HTML.\n   * If not, we set the format as `text`.\n   * @property {string} [from] The ISO 639-1 language code the source input\n   *     is written in.\n   * @property {string} [model] Set the model type requested for this\n   *     translation. Please refer to the upstream documentation for possible\n   *     values.\n   * @property {string} to The ISO 639-1 language code to translate the\n   *     input to.\n   */\n  /**\n   * @callback TranslateCallback\n   * @memberof v2\n   * @param {?Error} err Request error, if any.\n   * @param {object|object[]} translations If a single string input was given, a\n   *     single translation is given. Otherwise, it is an array of translations.\n   * @param {object} apiResponse The full API response.\n   */\n  /**\n   * Translate a string or multiple strings into another language.\n   *\n   * @see [Translate Text](https://cloud.google.com/translate/v2/using_rest#Translate)\n   *\n   * @throws {Error} If `options` is provided as an object without a `to`\n   *     property.\n   *\n   * @param {string|string[]} input The source string input.\n   * @param {string|TranslateRequest} [options] If a string, it is interpreted as the\n   *     target ISO 639-1 language code to translate the source input to. (e.g.\n   *     `en` for English). If an object, you may also specify the source\n   *     language.\n   * @param {TranslateCallback} [callback] Callback function.\n   * @returns {Promise<TranslateResponse>}\n   *\n   * @example\n   * //-\n   * // Pass a string and a language code to get the translation.\n   * //-\n   * translate.translate('Hello', 'es', (err, translation) => {\n   *   if (!err) {\n   *     // translation = 'Hola'\n   *   }\n   * });\n   *\n   * //-\n   * // The source language is auto-detected by default. To manually set it,\n   * // provide an object.\n   * //-\n   * const options = {\n   *   from: 'en',\n   *   to: 'es'\n   * };\n   *\n   * translate.translate('Hello', options, (err, translation) => {\n   *   if (!err) {\n   *     // translation = 'Hola'\n   *   }\n   * });\n   *\n   * //-\n   * // Translate multiple strings of input. Note that the results are\n   * // now provided as an array.\n   * //-\n   * const input = [\n   *   'Hello',\n   *   'How are you today?'\n   * ];\n   *\n   * translate.translate(input, 'es', (err, translations) => {\n   *   if (!err) {\n   *     // translations = [\n   *     //   'Hola',\n   *     //   'Como estas hoy?'\n   *     // ]\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * translate.translate('Hello', 'es').then((data) => {\n   *   const translation = data[0];\n   *   const apiResponse = data[1];\n   * });\n   *\n   * @example <caption>include:samples/translate.js</caption>\n   * region_tag:translate_translate_text\n   * Full translation example:\n   *\n   * @example <caption>include:samples/translate.js</caption>\n   * region_tag:translate_text_with_model\n   * Translation using the premium model:\n   */\n  translate(inputs, optionsOrTo, callback) {\n    const inputIsArray = Array.isArray(inputs);\n    const input = arrify(inputs);\n    let options = {};\n    if (typeof optionsOrTo === 'object') {\n      options = optionsOrTo;\n    } else if (typeof optionsOrTo === 'string') {\n      options = {\n        to: optionsOrTo\n      };\n    }\n    // tslint:disable-next-line no-any\n    const body = {\n      q: input,\n      format: options.format || (isHtml(input[0]) ? 'html' : 'text')\n    };\n    if (is.string(options)) {\n      body.target = options;\n    } else {\n      if (options.from) {\n        body.source = options.from;\n      }\n      if (options.to) {\n        body.target = options.to;\n      }\n      if (options.model) {\n        body.model = options.model;\n      }\n    }\n    if (!body.target) {\n      throw new Error('A target language is required to perform a translation.');\n    }\n    this.request({\n      method: 'POST',\n      uri: '',\n      json: body\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n      let translations = resp.data.translations.map(x => x.translatedText);\n      if (body.q.length === 1 && !inputIsArray) {\n        translations = translations[0];\n      }\n      callback(err, translations, resp);\n    });\n  }\n  /**\n   * A custom request implementation. Requests to this API may optionally use an\n   * API key for an application, not a bearer token from a service account. This\n   * means it is possible to skip the `makeAuthenticatedRequest` portion of the\n   * typical request lifecycle, and manually authenticate the request here.\n   *\n   * @private\n   *\n   * @param {object} reqOpts - Request options that are passed to `request`.\n   * @param {function} callback - The callback function passed to `request`.\n   */\n  request(reqOpts, callback) {\n    if (!this.key) {\n      super.request(reqOpts, callback);\n      return;\n    }\n    reqOpts.uri = this.baseUrl + reqOpts.uri;\n    reqOpts = extend(true, {}, reqOpts, {\n      qs: {\n        key: this.key\n      },\n      headers: {\n        'User-Agent': common_1.util.getUserAgentFromPackageJson(PKG)\n      }\n    });\n    common_1.util.makeRequest(reqOpts, this.options, callback);\n  }\n}\nexports.Translate = Translate;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\npromisify_1.promisifyAll(Translate, {\n  exclude: ['request']\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","common_1","require","promisify_1","arrify","extend","is","isHtml","teeny_request_1","PKG","Translate","Service","constructor","options","baseUrl","process","env","GOOGLE_CLOUD_TRANSLATE_ENDPOINT","replace","config","scopes","packageJson","projectIdRequired","requestModule","teenyRequest","request","key","detect","input","callback","inputIsArray","Array","isArray","method","uri","json","q","err","resp","results","data","detections","map","detection","index","result","isReliable","length","getLanguages","targetOrCallback","target","fn","reqOpts","useQuerystring","qs","string","languages","language","code","name","translate","inputs","optionsOrTo","to","body","format","from","source","model","Error","translations","x","translatedText","headers","util","getUserAgentFromPackageJson","makeRequest","promisifyAll","exclude"],"sources":["/var/www/html/project/Dash_Vuexy-master/node_modules/@google-cloud/translate/build/src/v2/index.js"],"sourcesContent":["\"use strict\";\n// Copyright 2017, Google LLC All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common_1 = require(\"@google-cloud/common\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\nconst arrify = require(\"arrify\");\nconst extend = require(\"extend\");\nconst is = require(\"is\");\nconst isHtml = require('is-html');\nconst teeny_request_1 = require(\"teeny-request\");\nconst PKG = require('../../../package.json');\n/**\n * @typedef {object} ClientConfig\n * @memberof v2\n * @property {string} [projectId] The project ID from the Google Developer's\n *     Console, e.g. 'grape-spaceship-123'. We will also check the environment\n *     variable `GCLOUD_PROJECT` for your project ID. If your app is running in\n *     an environment which supports {@link\n * https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application\n * Application Default Credentials}, your project ID will be detected\n * automatically.\n * @property {string} [key] An API key. You should prefer using a Service\n *     Account key file instead of an API key.\n * @property {string} [keyFilename] Full path to the a .json, .pem, or .p12 key\n *     downloaded from the Google Developers Console. If you provide a path to a\n *     JSON file, the `projectId` option above is not necessary. NOTE: .pem and\n *     .p12 require you to specify the `email` option as well.\n * @property {string} [email] Account email address. Required when using a .pem\n *     or .p12 keyFilename.\n * @property {object} [credentials] Credentials object.\n * @property {string} [credentials.client_email]\n * @property {string} [credentials.private_key]\n * @property {boolean} [autoRetry=true] Automatically retry requests if the\n *     response is related to rate limits or certain intermittent server errors.\n *     We will exponentially backoff subsequent requests by default.\n * @property {number} [maxRetries=3] Maximum number of automatic retries\n *     attempted before returning the error.\n * @property {Constructor} [promise] Custom promise module to use instead of\n *     native Promises.\n */\n/**\n * With [Google Translate](https://cloud.google.com/translate), you can\n * dynamically translate text between thousands of language pairs.\n *\n * The Google Cloud Translation API lets websites and programs integrate with\n * Google Translate programmatically.\n *\n * @class\n * @memberof v2\n *\n * @see [Getting Started]{@link https://cloud.google.com/translate/v2/getting_started}\n * @see [Identifying your application to Google]{@link https://cloud.google.com/translate/v2/using_rest#auth}\n *\n * @param {ClientConfig} [options] Configuration options.\n *\n * @example\n * //-\n * // <h3>Custom Translation API</h3>\n * //\n * // The environment variable, `GOOGLE_CLOUD_TRANSLATE_ENDPOINT`, is honored as\n * // a custom backend which our library will send requests to.\n * //-\n *\n * @example <caption>include:samples/quickstart.js</caption>\n * region_tag:translate_quickstart\n * Full quickstart example:\n */\nclass Translate extends common_1.Service {\n    constructor(options) {\n        let baseUrl = 'https://translation.googleapis.com/language/translate/v2';\n        if (process.env.GOOGLE_CLOUD_TRANSLATE_ENDPOINT) {\n            baseUrl = process.env.GOOGLE_CLOUD_TRANSLATE_ENDPOINT.replace(/\\/+$/, '');\n        }\n        const config = {\n            baseUrl,\n            scopes: ['https://www.googleapis.com/auth/cloud-platform'],\n            packageJson: require('../../../package.json'),\n            projectIdRequired: false,\n            requestModule: teeny_request_1.teenyRequest,\n        };\n        super(config, options);\n        this.options = options || {};\n        this.options.request = config.requestModule;\n        if (this.options.key) {\n            this.key = this.options.key;\n        }\n    }\n    /**\n     * @typedef {object} DetectResult\n     * @memberof v2\n     * @property {string} 0.language The language code matched from the input.\n     * @property {number} [0.confidence] A float 0 - 1. The higher the number, the\n     *     higher the confidence in language detection. Note, this is not always\n     *     returned from the API.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback DetectCallback\n     * @memberof v2\n     * @param {?Error} err Request error, if any.\n     * @param {object|object[]} results The detection results.\n     * @param {string} results.language The language code matched from the input.\n     * @param {number} [results.confidence] A float 0 - 1. The higher the number, the\n     *     higher the confidence in language detection. Note, this is not always\n     *     returned from the API.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Detect the language used in a string or multiple strings.\n     *\n     * @see [Detect Language]{@link https://cloud.google.com/translate/v2/using_rest#detect-language}\n     *\n     * @param {string|string[]} input - The source string input.\n     * @param {DetectCallback} [callback] Callback function.\n     * @returns {Promise<DetectResponse>}\n     *\n     * @example\n     * const {Translate} = require('@google-cloud/translate');\n     *\n     * const translate = new Translate();\n     *\n     * //-\n     * // Detect the language from a single string input.\n     * //-\n     * translate.detect('Hello', (err, results) => {\n     *   if (!err) {\n     *     // results = {\n     *     //   language: 'en',\n     *     //   confidence: 1,\n     *     //   input: 'Hello'\n     *     // }\n     *   }\n     * });\n     *\n     * //-\n     * // Detect the languages used in multiple strings. Note that the results are\n     * // now provided as an array.\n     * //-\n     * translate.detect([\n     *   'Hello',\n     *   'Hola'\n     * ], (err, results) => {\n     *   if (!err) {\n     *     // results = [\n     *     //   {\n     *     //     language: 'en',\n     *     //     confidence: 1,\n     *     //     input: 'Hello'\n     *     //   },\n     *     //   {\n     *     //     language: 'es',\n     *     //     confidence: 1,\n     *     //     input: 'Hola'\n     *     //   }\n     *     // ]\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * translate.detect('Hello').then((data) => {\n     *   const results = data[0];\n     *   const apiResponse = data[2];\n     * });\n     *\n     * @example <caption>include:samples/translate.js</caption>\n     * region_tag:translate_detect_language\n     * Here's a full example:\n     */\n    detect(input, callback) {\n        const inputIsArray = Array.isArray(input);\n        input = arrify(input);\n        this.request({\n            method: 'POST',\n            uri: '/detect',\n            json: {\n                q: input,\n            },\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            let results = resp.data.detections.map((detection, index) => {\n                const result = extend({}, detection[0], {\n                    input: input[index],\n                });\n                // Deprecated.\n                // tslint:disable-next-line no-any\n                delete result.isReliable;\n                return result;\n            });\n            if (input.length === 1 && !inputIsArray) {\n                results = results[0];\n            }\n            callback(null, results, resp);\n        });\n    }\n    /**\n     * @typedef {object} LanguageResult\n     * @memberof v2\n     * @property {string} code The [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1)\n     *     language code.\n     * @property {string} name The language name. This can be translated into your\n     *     preferred language with the `target` option.\n     */\n    /**\n     * @callback GetLanguagesCallback\n     * @memberof v2\n     * @param {?Error} err Request error, if any.\n     * @param {object[]} results The languages supported by the API.\n     * @param {string} results.code The [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1)\n     *     language code.\n     * @param {string} results.name The language name. This can be translated into your\n     *     preferred language with the `target` option.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Get an array of all supported languages.\n     *\n     * @see [Discovering Supported Languages]{@link https://cloud.google.com/translate/v2/discovering-supported-languages-with-rest}\n     *\n     * @param {string} [target] Get the language names in a language other than\n     *     English.\n     * @param {GetLanguagesCallback} [callback] Callback function.\n     * @returns {Promise<GetLanguagesResponse>}\n     *\n     * @example <caption>include:samples/translate.js</caption>\n     * region_tag:translate_list_codes\n     * Gets the language names in English:\n     *\n     * @example <caption>include:samples/translate.js</caption>\n     * region_tag:translate_list_language_names\n     * Gets the language names in a language other than English:\n     */\n    getLanguages(targetOrCallback, callback) {\n        let target;\n        if (is.fn(targetOrCallback)) {\n            callback = targetOrCallback;\n            target = 'en';\n        }\n        else {\n            target = targetOrCallback;\n        }\n        const reqOpts = {\n            uri: '/languages',\n            useQuerystring: true,\n            qs: {},\n        };\n        if (target && is.string(target)) {\n            reqOpts.qs.target = target;\n        }\n        this.request(reqOpts, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            const languages = resp.data.languages.map((language) => {\n                return {\n                    code: language.language,\n                    name: language.name,\n                };\n            });\n            callback(null, languages, resp);\n        });\n    }\n    /**\n     * Translate request options.\n     *\n     * @typedef {object} TranslateRequest\n     * @memberof v2\n     * @property {string} [format] Set the text's format as `html` or `text`.\n     *     If not provided, we will try to auto-detect if the text given is HTML.\n     * If not, we set the format as `text`.\n     * @property {string} [from] The ISO 639-1 language code the source input\n     *     is written in.\n     * @property {string} [model] Set the model type requested for this\n     *     translation. Please refer to the upstream documentation for possible\n     *     values.\n     * @property {string} to The ISO 639-1 language code to translate the\n     *     input to.\n     */\n    /**\n     * @callback TranslateCallback\n     * @memberof v2\n     * @param {?Error} err Request error, if any.\n     * @param {object|object[]} translations If a single string input was given, a\n     *     single translation is given. Otherwise, it is an array of translations.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Translate a string or multiple strings into another language.\n     *\n     * @see [Translate Text](https://cloud.google.com/translate/v2/using_rest#Translate)\n     *\n     * @throws {Error} If `options` is provided as an object without a `to`\n     *     property.\n     *\n     * @param {string|string[]} input The source string input.\n     * @param {string|TranslateRequest} [options] If a string, it is interpreted as the\n     *     target ISO 639-1 language code to translate the source input to. (e.g.\n     *     `en` for English). If an object, you may also specify the source\n     *     language.\n     * @param {TranslateCallback} [callback] Callback function.\n     * @returns {Promise<TranslateResponse>}\n     *\n     * @example\n     * //-\n     * // Pass a string and a language code to get the translation.\n     * //-\n     * translate.translate('Hello', 'es', (err, translation) => {\n     *   if (!err) {\n     *     // translation = 'Hola'\n     *   }\n     * });\n     *\n     * //-\n     * // The source language is auto-detected by default. To manually set it,\n     * // provide an object.\n     * //-\n     * const options = {\n     *   from: 'en',\n     *   to: 'es'\n     * };\n     *\n     * translate.translate('Hello', options, (err, translation) => {\n     *   if (!err) {\n     *     // translation = 'Hola'\n     *   }\n     * });\n     *\n     * //-\n     * // Translate multiple strings of input. Note that the results are\n     * // now provided as an array.\n     * //-\n     * const input = [\n     *   'Hello',\n     *   'How are you today?'\n     * ];\n     *\n     * translate.translate(input, 'es', (err, translations) => {\n     *   if (!err) {\n     *     // translations = [\n     *     //   'Hola',\n     *     //   'Como estas hoy?'\n     *     // ]\n     *   }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * translate.translate('Hello', 'es').then((data) => {\n     *   const translation = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * @example <caption>include:samples/translate.js</caption>\n     * region_tag:translate_translate_text\n     * Full translation example:\n     *\n     * @example <caption>include:samples/translate.js</caption>\n     * region_tag:translate_text_with_model\n     * Translation using the premium model:\n     */\n    translate(inputs, optionsOrTo, callback) {\n        const inputIsArray = Array.isArray(inputs);\n        const input = arrify(inputs);\n        let options = {};\n        if (typeof optionsOrTo === 'object') {\n            options = optionsOrTo;\n        }\n        else if (typeof optionsOrTo === 'string') {\n            options = { to: optionsOrTo };\n        }\n        // tslint:disable-next-line no-any\n        const body = {\n            q: input,\n            format: options.format || (isHtml(input[0]) ? 'html' : 'text'),\n        };\n        if (is.string(options)) {\n            body.target = options;\n        }\n        else {\n            if (options.from) {\n                body.source = options.from;\n            }\n            if (options.to) {\n                body.target = options.to;\n            }\n            if (options.model) {\n                body.model = options.model;\n            }\n        }\n        if (!body.target) {\n            throw new Error('A target language is required to perform a translation.');\n        }\n        this.request({\n            method: 'POST',\n            uri: '',\n            json: body,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            let translations = resp.data.translations.map((x) => x.translatedText);\n            if (body.q.length === 1 && !inputIsArray) {\n                translations = translations[0];\n            }\n            callback(err, translations, resp);\n        });\n    }\n    /**\n     * A custom request implementation. Requests to this API may optionally use an\n     * API key for an application, not a bearer token from a service account. This\n     * means it is possible to skip the `makeAuthenticatedRequest` portion of the\n     * typical request lifecycle, and manually authenticate the request here.\n     *\n     * @private\n     *\n     * @param {object} reqOpts - Request options that are passed to `request`.\n     * @param {function} callback - The callback function passed to `request`.\n     */\n    request(reqOpts, callback) {\n        if (!this.key) {\n            super.request(reqOpts, callback);\n            return;\n        }\n        reqOpts.uri = this.baseUrl + reqOpts.uri;\n        reqOpts = extend(true, {}, reqOpts, {\n            qs: {\n                key: this.key,\n            },\n            headers: {\n                'User-Agent': common_1.util.getUserAgentFromPackageJson(PKG),\n            },\n        });\n        common_1.util.makeRequest(reqOpts, this.options, callback);\n    }\n}\nexports.Translate = Translate;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\npromisify_1.promisifyAll(Translate, { exclude: ['request'] });\n//# sourceMappingURL=index.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,QAAQ,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAChD,MAAMC,WAAW,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AACtD,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMI,EAAE,GAAGJ,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMK,MAAM,GAAGL,OAAO,CAAC,SAAS,CAAC;AACjC,MAAMM,eAAe,GAAGN,OAAO,CAAC,eAAe,CAAC;AAChD,MAAMO,GAAG,GAAGP,OAAO,CAAC,uBAAuB,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMQ,SAAS,SAAST,QAAQ,CAACU,OAAO,CAAC;EACrCC,WAAWA,CAACC,OAAO,EAAE;IACjB,IAAIC,OAAO,GAAG,0DAA0D;IACxE,IAAIC,OAAO,CAACC,GAAG,CAACC,+BAA+B,EAAE;MAC7CH,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,+BAA+B,CAACC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;IAC7E;IACA,MAAMC,MAAM,GAAG;MACXL,OAAO;MACPM,MAAM,EAAE,CAAC,gDAAgD,CAAC;MAC1DC,WAAW,EAAEnB,OAAO,CAAC,uBAAuB,CAAC;MAC7CoB,iBAAiB,EAAE,KAAK;MACxBC,aAAa,EAAEf,eAAe,CAACgB;IACnC,CAAC;IACD,KAAK,CAACL,MAAM,EAAEN,OAAO,CAAC;IACtB,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IAC5B,IAAI,CAACA,OAAO,CAACY,OAAO,GAAGN,MAAM,CAACI,aAAa;IAC3C,IAAI,IAAI,CAACV,OAAO,CAACa,GAAG,EAAE;MAClB,IAAI,CAACA,GAAG,GAAG,IAAI,CAACb,OAAO,CAACa,GAAG;IAC/B;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,MAAMA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACpB,MAAMC,YAAY,GAAGC,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC;IACzCA,KAAK,GAAGxB,MAAM,CAACwB,KAAK,CAAC;IACrB,IAAI,CAACH,OAAO,CAAC;MACTQ,MAAM,EAAE,MAAM;MACdC,GAAG,EAAE,SAAS;MACdC,IAAI,EAAE;QACFC,CAAC,EAAER;MACP;IACJ,CAAC,EAAE,CAACS,GAAG,EAAEC,IAAI,KAAK;MACd,IAAID,GAAG,EAAE;QACLR,QAAQ,CAACQ,GAAG,EAAE,IAAI,EAAEC,IAAI,CAAC;QACzB;MACJ;MACA,IAAIC,OAAO,GAAGD,IAAI,CAACE,IAAI,CAACC,UAAU,CAACC,GAAG,CAAC,CAACC,SAAS,EAAEC,KAAK,KAAK;QACzD,MAAMC,MAAM,GAAGxC,MAAM,CAAC,CAAC,CAAC,EAAEsC,SAAS,CAAC,CAAC,CAAC,EAAE;UACpCf,KAAK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"},"metadata":{},"sourceType":"script","externalDependencies":[]}