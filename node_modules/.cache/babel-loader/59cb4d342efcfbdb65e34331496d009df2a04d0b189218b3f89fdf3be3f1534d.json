{"ast":null,"code":"export default {\n  data() {\n    return {\n      chartData: {\n        keys: [\"SAR\", \"JOD\", \"USD\", \"AED\", \"IQD\", \"EGP\", \"EUR\", \"OMR\", \"BHD\", \"KWD\", \"QAR\"],\n        values: [37738707360000, 56090919, 37979116, 33355799, 6324241, 114142, 60415, 39864, 20750, 10874, 439]\n      }\n    };\n  },\n  computed: {\n    chartOptions() {\n      const normalizedValues = this.chartData.values.map(value => Math.log(value + 1));\n      const maxLogValue = Math.max(...normalizedValues);\n      const minLogValue = Math.min(...normalizedValues);\n      return {\n        chart: {\n          type: \"bar\",\n          height: 400,\n          toolbar: {\n            show: false\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        plotOptions: {\n          bar: {\n            borderRadius: 4,\n            horizontal: false\n          }\n        },\n        xaxis: {\n          categories: this.chartData.keys\n        },\n        yaxis: {\n          min: 0,\n          max: Math.exp(maxLogValue) - 1,\n          logarithmic: true,\n          tickAmount: 4,\n          labels: {\n            formatter: value => {\n              if (value >= 1000000) {\n                return \"up to M\";\n              }\n            }\n          }\n        }\n      };\n    },\n    chartSeries() {\n      return [{\n        name: \"Data\",\n        data: this.chartData.values\n      }];\n    }\n  }\n};","map":{"version":3,"names":["data","chartData","keys","values","computed","chartOptions","normalizedValues","map","value","Math","log","maxLogValue","max","minLogValue","min","chart","type","height","toolbar","show","dataLabels","enabled","plotOptions","bar","borderRadius","horizontal","xaxis","categories","yaxis","exp","logarithmic","tickAmount","labels","formatter","chartSeries","name"],"sources":["/var/www/html/project/Dash_Vuexy-master/src/views/ecommerce/apexchart.vue"],"sourcesContent":["<template>\n  <div class=\"maindiv\">\n    <div class=\"chart\">\n      <div class=\"text-start p-2 pb-0\" style=\"font-size: 5px\">\n        <h6 style=\"color: rgba(255, 255, 255, 0.27)\">Orders</h6>\n        <h4 class=\" \">6,24k</h4>\n      </div>\n\n      <div id=\"chart\">\n        <apexchart\n          :options=\"chartOptions\"\n          :series=\"chartSeries\"\n          type=\"bar\"\n          height=\"400\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n  \n<script>\nexport default {\n  data() {\n    return {\n      chartData: {\n        keys: [\n          \"SAR\",\n          \"JOD\",\n          \"USD\",\n          \"AED\",\n          \"IQD\",\n          \"EGP\",\n          \"EUR\",\n          \"OMR\",\n          \"BHD\",\n          \"KWD\",\n          \"QAR\",\n        ],\n        values: [\n          37738707360000, 56090919, 37979116, 33355799, 6324241, 114142, 60415,\n          39864, 20750, 10874, 439,\n        ],\n      },\n    };\n  },\n  computed: {\n    chartOptions() {\n      const normalizedValues = this.chartData.values.map((value) =>\n        Math.log(value + 1)\n      );\n      const maxLogValue = Math.max(...normalizedValues);\n      const minLogValue = Math.min(...normalizedValues);\n\n      return {\n        chart: {\n          type: \"bar\",\n          height: 400,\n          toolbar: {\n            show: false,\n          },\n        },\n        dataLabels: {\n          enabled: false,\n        },\n        plotOptions: {\n          bar: {\n            borderRadius: 4,\n            horizontal: false,\n          },\n        },\n        xaxis: {\n          categories: this.chartData.keys,\n        },\n        yaxis: {\n          min: 0,\n          max: Math.exp(maxLogValue) - 1,\n          logarithmic: true,\n          tickAmount: 4,\n          labels: {\n            formatter: (value) => {\n              if (value >= 1000000) {\n                return \"up to M\"\n              }\n            },\n          },\n        },\n      };\n    },\n    chartSeries() {\n      return [\n        {\n          name: \"Data\",\n          data: this.chartData.values,\n        },\n      ];\n    },\n  },\n};\n</script>\n<style lang=\"scss\" scoped>\n.maindiv {\n  position: relative;\n  border-radius: 5px;\n  background: rgb(154, 155, 157);\n  color: black;\n  height: 100%;\n}\n</style>"],"mappings":"AAqBA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE;QACTC,IAAI,EAAE,CACJ,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,CACN;QACDC,MAAM,EAAE,CACN,cAAc,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,EACpE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG;MAE5B;IACF,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,YAAYA,CAAA,EAAG;MACb,MAAMC,gBAAe,GAAI,IAAI,CAACL,SAAS,CAACE,MAAM,CAACI,GAAG,CAAEC,KAAK,IACvDC,IAAI,CAACC,GAAG,CAACF,KAAI,GAAI,CAAC,EACnB;MACD,MAAMG,WAAU,GAAIF,IAAI,CAACG,GAAG,CAAC,GAAGN,gBAAgB,CAAC;MACjD,MAAMO,WAAU,GAAIJ,IAAI,CAACK,GAAG,CAAC,GAAGR,gBAAgB,CAAC;MAEjD,OAAO;QACLS,KAAK,EAAE;UACLC,IAAI,EAAE,KAAK;UACXC,MAAM,EAAE,GAAG;UACXC,OAAO,EAAE;YACPC,IAAI,EAAE;UACR;QACF,CAAC;QACDC,UAAU,EAAE;UACVC,OAAO,EAAE;QACX,CAAC;QACDC,WAAW,EAAE;UACXC,GAAG,EAAE;YACHC,YAAY,EAAE,CAAC;YACfC,UAAU,EAAE;UACd;QACF,CAAC;QACDC,KAAK,EAAE;UACLC,UAAU,EAAE,IAAI,CAAC1B,SAAS,CAACC;QAC7B,CAAC;QACD0B,KAAK,EAAE;UACLd,GAAG,EAAE,CAAC;UACNF,GAAG,EAAEH,IAAI,CAACoB,GAAG,CAAClB,WAAW,IAAI,CAAC;UAC9BmB,WAAW,EAAE,IAAI;UACjBC,UAAU,EAAE,CAAC;UACbC,MAAM,EAAE;YACNC,SAAS,EAAGzB,KAAK,IAAK;cACpB,IAAIA,KAAI,IAAK,OAAO,EAAE;gBACpB,OAAO,SAAQ;cACjB;YACF;UACF;QACF;MACF,CAAC;IACH,CAAC;IACD0B,WAAWA,CAAA,EAAG;MACZ,OAAO,CACL;QACEC,IAAI,EAAE,MAAM;QACZnC,IAAI,EAAE,IAAI,CAACC,SAAS,CAACE;MACvB,CAAC,CACF;IACH;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}