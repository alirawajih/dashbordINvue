{"ast":null,"code":"/**\n * @license\n * Copyright 2017 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * @module\n * @private\n */\n\n'use strict';\n\nvar camelCase = require('lodash.camelcase');\nvar client = require('./client');\nvar common = require('./common');\n\n/**\n * Get a function that deserializes a specific type of protobuf.\n * @param {function()} cls The constructor of the message type to deserialize\n * @param {bool=} binaryAsBase64 Deserialize bytes fields as base64 strings\n *     instead of Buffers. Defaults to false\n * @param {bool=} longsAsStrings Deserialize long values as strings instead of\n *     objects. Defaults to true\n * @return {function(Buffer):cls} The deserialization function\n */\nexports.deserializeCls = function deserializeCls(cls, options) {\n  var conversion_options = {\n    defaults: true,\n    bytes: options.binaryAsBase64 ? String : Buffer,\n    longs: options.longsAsStrings ? String : null,\n    enums: options.enumsAsStrings ? String : null,\n    oneofs: true\n  };\n  /**\n   * Deserialize a buffer to a message object\n   * @param {Buffer} arg_buf The buffer to deserialize\n   * @return {cls} The resulting object\n   */\n  return function deserialize(arg_buf) {\n    return cls.toObject(cls.decode(arg_buf), conversion_options);\n  };\n};\nvar deserializeCls = exports.deserializeCls;\n\n/**\n * Get a function that serializes objects to a buffer by protobuf class.\n * @param {function()} Cls The constructor of the message type to serialize\n * @return {function(Cls):Buffer} The serialization function\n */\nexports.serializeCls = function serializeCls(cls) {\n  /**\n   * Serialize an object to a Buffer\n   * @param {Object} arg The object to serialize\n   * @return {Buffer} The serialized object\n   */\n  return function serialize(arg) {\n    var message = cls.fromObject(arg);\n    return cls.encode(message).finish();\n  };\n};\nvar serializeCls = exports.serializeCls;\n\n/**\n * Get the fully qualified (dotted) name of a ProtoBuf.Reflect value.\n * @param {ProtoBuf.ReflectionObject} value The value to get the name of\n * @return {string} The fully qualified name of the value\n */\nexports.fullyQualifiedName = function fullyQualifiedName(value) {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  var name = value.name;\n  var parent_fqn = fullyQualifiedName(value.parent);\n  if (parent_fqn !== '') {\n    name = parent_fqn + '.' + name;\n  }\n  return name;\n};\nvar fullyQualifiedName = exports.fullyQualifiedName;\n\n/**\n * Return a map from method names to method attributes for the service.\n * @param {ProtoBuf.Service} service The service to get attributes for\n * @param {Object=} options Options to apply to these attributes\n * @return {Object} The attributes map\n */\nexports.getProtobufServiceAttrs = function getProtobufServiceAttrs(service, options) {\n  var prefix = '/' + fullyQualifiedName(service) + '/';\n  service.resolveAll();\n  return common.zipObject(service.methodsArray.map(function (method) {\n    return camelCase(method.name);\n  }), service.methodsArray.map(function (method) {\n    return {\n      originalName: method.name,\n      path: prefix + method.name,\n      requestStream: !!method.requestStream,\n      responseStream: !!method.responseStream,\n      requestType: method.resolvedRequestType,\n      responseType: method.resolvedResponseType,\n      requestSerialize: serializeCls(method.resolvedRequestType),\n      requestDeserialize: deserializeCls(method.resolvedRequestType, options),\n      responseSerialize: serializeCls(method.resolvedResponseType),\n      responseDeserialize: deserializeCls(method.resolvedResponseType, options)\n    };\n  }));\n};\nvar getProtobufServiceAttrs = exports.getProtobufServiceAttrs;\nexports.loadObject = function loadObject(value, options) {\n  var result = {};\n  if (!value) {\n    return value;\n  }\n  if (value.hasOwnProperty('methods')) {\n    // It's a service object\n    var service_attrs = getProtobufServiceAttrs(value, options);\n    return client.makeClientConstructor(service_attrs);\n  }\n  if (value.hasOwnProperty('nested')) {\n    // It's a namespace or root object\n    if (value.nested !== null && value.nested !== undefined) {\n      var values = Object.keys(value.nested).map(key => value.nested[key]);\n      values.forEach(nested => {\n        result[nested.name] = loadObject(nested, options);\n      });\n    }\n    return result;\n  }\n\n  // Otherwise, it's not something we need to change\n  return value;\n};\n\n/**\n * The primary purpose of this method is to distinguish between reflection\n * objects from different versions of ProtoBuf.js. This is just a heuristic,\n * checking for properties that are (currently) specific to this version of\n * ProtoBuf.js\n * @param {Object} obj The object to check\n * @return {boolean} Whether the object appears to be a Protobuf.js 6\n *   ReflectionObject\n */\nexports.isProbablyProtobufJs6 = function isProbablyProtobufJs6(obj) {\n  return typeof obj.root === 'object' && typeof obj.resolve === 'function';\n};","map":{"version":3,"names":["camelCase","require","client","common","exports","deserializeCls","cls","options","conversion_options","defaults","bytes","binaryAsBase64","String","Buffer","longs","longsAsStrings","enums","enumsAsStrings","oneofs","deserialize","arg_buf","toObject","decode","serializeCls","serialize","arg","message","fromObject","encode","finish","fullyQualifiedName","value","undefined","name","parent_fqn","parent","getProtobufServiceAttrs","service","prefix","resolveAll","zipObject","methodsArray","map","method","originalName","path","requestStream","responseStream","requestType","resolvedRequestType","responseType","resolvedResponseType","requestSerialize","requestDeserialize","responseSerialize","responseDeserialize","loadObject","result","hasOwnProperty","service_attrs","makeClientConstructor","nested","values","Object","keys","key","forEach","isProbablyProtobufJs6","obj","root","resolve"],"sources":["/var/www/html/project/Dash_Vuexy-master/node_modules/grpc/src/protobuf_js_6_common.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/**\n * @module\n * @private\n */\n\n'use strict';\n\nvar camelCase = require('lodash.camelcase');\nvar client = require('./client');\nvar common = require('./common');\n\n/**\n * Get a function that deserializes a specific type of protobuf.\n * @param {function()} cls The constructor of the message type to deserialize\n * @param {bool=} binaryAsBase64 Deserialize bytes fields as base64 strings\n *     instead of Buffers. Defaults to false\n * @param {bool=} longsAsStrings Deserialize long values as strings instead of\n *     objects. Defaults to true\n * @return {function(Buffer):cls} The deserialization function\n */\nexports.deserializeCls = function deserializeCls(cls, options) {\n  var conversion_options = {\n    defaults: true,\n    bytes: options.binaryAsBase64 ? String : Buffer,\n    longs: options.longsAsStrings ? String : null,\n    enums: options.enumsAsStrings ? String : null,\n    oneofs: true\n  };\n  /**\n   * Deserialize a buffer to a message object\n   * @param {Buffer} arg_buf The buffer to deserialize\n   * @return {cls} The resulting object\n   */\n  return function deserialize(arg_buf) {\n    return cls.toObject(cls.decode(arg_buf), conversion_options);\n  };\n};\n\nvar deserializeCls = exports.deserializeCls;\n\n/**\n * Get a function that serializes objects to a buffer by protobuf class.\n * @param {function()} Cls The constructor of the message type to serialize\n * @return {function(Cls):Buffer} The serialization function\n */\nexports.serializeCls = function serializeCls(cls) {\n  /**\n   * Serialize an object to a Buffer\n   * @param {Object} arg The object to serialize\n   * @return {Buffer} The serialized object\n   */\n  return function serialize(arg) {\n    var message = cls.fromObject(arg);\n    return cls.encode(message).finish();\n  };\n};\n\nvar serializeCls = exports.serializeCls;\n\n/**\n * Get the fully qualified (dotted) name of a ProtoBuf.Reflect value.\n * @param {ProtoBuf.ReflectionObject} value The value to get the name of\n * @return {string} The fully qualified name of the value\n */\nexports.fullyQualifiedName = function fullyQualifiedName(value) {\n  if (value === null || value === undefined) {\n    return '';\n  }\n  var name = value.name;\n  var parent_fqn = fullyQualifiedName(value.parent);\n  if (parent_fqn !== '') {\n    name = parent_fqn + '.' + name;\n  }\n  return name;\n};\n\nvar fullyQualifiedName = exports.fullyQualifiedName;\n\n/**\n * Return a map from method names to method attributes for the service.\n * @param {ProtoBuf.Service} service The service to get attributes for\n * @param {Object=} options Options to apply to these attributes\n * @return {Object} The attributes map\n */\nexports.getProtobufServiceAttrs = function getProtobufServiceAttrs(service,\n                                                                   options) {\n  var prefix = '/' + fullyQualifiedName(service) + '/';\n  service.resolveAll();\n  return common.zipObject(service.methodsArray.map(function(method) {\n    return camelCase(method.name);\n  }), service.methodsArray.map(function(method) {\n    return {\n      originalName: method.name,\n      path: prefix + method.name,\n      requestStream: !!method.requestStream,\n      responseStream: !!method.responseStream,\n      requestType: method.resolvedRequestType,\n      responseType: method.resolvedResponseType,\n      requestSerialize: serializeCls(method.resolvedRequestType),\n      requestDeserialize: deserializeCls(method.resolvedRequestType, options),\n      responseSerialize: serializeCls(method.resolvedResponseType),\n      responseDeserialize: deserializeCls(method.resolvedResponseType, options)\n    };\n  }));\n};\n\nvar getProtobufServiceAttrs = exports.getProtobufServiceAttrs;\n\nexports.loadObject = function loadObject(value, options) {\n  var result = {};\n  if (!value) {\n    return value;\n  }\n  if (value.hasOwnProperty('methods')) {\n    // It's a service object\n    var service_attrs = getProtobufServiceAttrs(value, options);\n    return client.makeClientConstructor(service_attrs);\n  }\n\n  if (value.hasOwnProperty('nested')) {\n    // It's a namespace or root object\n    if (value.nested !== null && value.nested !== undefined) {\n      var values = Object.keys(value.nested).map(key => value.nested[key]);\n      values.forEach(nested => {\n        result[nested.name] = loadObject(nested, options);\n      });\n    }\n    return result;\n  }\n\n  // Otherwise, it's not something we need to change\n  return value;\n};\n\n/**\n * The primary purpose of this method is to distinguish between reflection\n * objects from different versions of ProtoBuf.js. This is just a heuristic,\n * checking for properties that are (currently) specific to this version of\n * ProtoBuf.js\n * @param {Object} obj The object to check\n * @return {boolean} Whether the object appears to be a Protobuf.js 6\n *   ReflectionObject\n */\nexports.isProbablyProtobufJs6 = function isProbablyProtobufJs6(obj) {\n  return (typeof obj.root === 'object') && (typeof obj.resolve === 'function');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}