{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * A wrapper of real grpc channel. Also provides helper functions to\n * calculate affinity counts and active streams count.\n */\nclass ChannelRef {\n  /**\n   * @param channel The underlying grpc channel.\n   * @param channelId Id for creating unique channel.\n   * @param affinityCount Initial affinity count.\n   * @param activeStreamsCount Initial streams count.\n   */\n  constructor(channel, channelId, affinityCount, activeStreamsCount) {\n    this.channel = channel;\n    this.channelId = channelId;\n    this.affinityCount = affinityCount ? affinityCount : 0;\n    this.activeStreamsCount = activeStreamsCount ? activeStreamsCount : 0;\n  }\n  affinityCountIncr() {\n    this.affinityCount++;\n  }\n  activeStreamsCountIncr() {\n    this.activeStreamsCount++;\n  }\n  affinityCountDecr() {\n    this.affinityCount--;\n  }\n  activeStreamsCountDecr() {\n    this.activeStreamsCount--;\n  }\n  getAffinityCount() {\n    return this.affinityCount;\n  }\n  getActiveStreamsCount() {\n    return this.activeStreamsCount;\n  }\n  getChannel() {\n    return this.channel;\n  }\n}\nexports.ChannelRef = ChannelRef;","map":{"version":3,"names":["ChannelRef","constructor","channel","channelId","affinityCount","activeStreamsCount","affinityCountIncr","activeStreamsCountIncr","affinityCountDecr","activeStreamsCountDecr","getAffinityCount","getActiveStreamsCount","getChannel","exports"],"sources":["../../src/channel_ref.ts"],"sourcesContent":[null],"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;AAIA,MAAaA,UAAU;EAMrB;;;;;;EAMAC,YACEC,OAAgB,EAChBC,SAAiB,EACjBC,aAAsB,EACtBC,kBAA2B;IAE3B,IAAI,CAACH,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,aAAa,GAAGA,aAAa,GAAGA,aAAa,GAAG,CAAC;IACtD,IAAI,CAACC,kBAAkB,GAAGA,kBAAkB,GAAGA,kBAAkB,GAAG,CAAC;EACvE;EAEAC,iBAAiBA,CAAA;IACf,IAAI,CAACF,aAAa,EAAE;EACtB;EAEAG,sBAAsBA,CAAA;IACpB,IAAI,CAACF,kBAAkB,EAAE;EAC3B;EAEAG,iBAAiBA,CAAA;IACf,IAAI,CAACJ,aAAa,EAAE;EACtB;EAEAK,sBAAsBA,CAAA;IACpB,IAAI,CAACJ,kBAAkB,EAAE;EAC3B;EAEAK,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACN,aAAa;EAC3B;EAEAO,qBAAqBA,CAAA;IACnB,OAAO,IAAI,CAACN,kBAAkB;EAChC;EAEAO,UAAUA,CAAA;IACR,OAAO,IAAI,CAACV,OAAO;EACrB;;AAlDFW,OAAA,CAAAb,UAAA,GAAAA,UAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}