{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-aec424c6\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"maindiv\"\n};\nconst _hoisted_2 = {\n  id: \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_apexchart = _resolveComponent(\"apexchart\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_apexchart, {\n    type: \"line\",\n    height: \"350\",\n    options: _ctx.chartOptions,\n    series: _ctx.series\n  }, null, 8 /* PROPS */, [\"options\", \"series\"])])]);\n}","map":{"version":3,"names":["class","id","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_apexchart","type","height","options","_ctx","chartOptions","series"],"sources":["/var/www/html/project/Dash_Vuexy-master/src/views/apexchart/LineANDbar.vue"],"sourcesContent":["<template>\n    <div class=\"maindiv\">\n        <div id=\"chart\">\n        <apexchart type=\"line\" height=\"350\" :options=\"chartOptions\" :series=\"series\"></apexchart>\n      </div>\n    </div>\n  </template>\n      \n      <script>\n  export default {\n    data: function () {\n      return {\n        series: [\n          {\n            name: \"Q1 Budget\",\n            group: \"budget\",\n            data: [\n              3773870736, 56090919, 37979116, 33355799, 6324241, 114142, 60415,\n              39864, 20750, 10874, 439,\n            ],\n          },\n        ],\n        chartOptions: {\n          chart: {\n            type: \"bar\",\n            stacked: false,\n            toolbar: {\n              show: false,\n            },\n          },\n          dataLabels: {\n            enabled: true,\n            textAnchor: \"middle\",\n          },\n  \n          stroke: {\n            show: true,\n            lineCap: \"square\",\n            width: 10,\n            colors: [\"#00796B\"],\n          },\n  \n          plotOptions: {\n            bar: {\n              horizontal: false,\n              // columnWidth: \"15%\",\n  \n              distributed: false,\n              dataLabels: {\n                hideOverflowingLabels: true,\n              },\n              // colors: {\n              //   // backgroundBarColors: [\"gray\"],\n  \n              // },\n            },\n          },\n          xaxis: {\n            categories: [\n              \"SAR\",\n              \"JOD\",\n              \"USD\",\n              \"AED\",\n              \"IQD\",\n              \"EGP\",\n              \"EUR\",\n              \"Hyperpay_via_ConnectIn\",\n              \"HyperPay_via_ConnectIn_CLIQ\",\n              \"HyperPay1_via_ConnectIn\",\n              \"HyperPay_via_ConnectIn_CLIQ\",\n            ],\n            crosshairs: {\n              show: false,\n            },\n            labels: {\n              show: true,\n              // trim: true,\n              formatter: function (value, opts) {\n                if (value.length >= 10) {\n                  return value.slice(0, 10) + \"...\";\n                }\n                return value;\n              },\n            },\n            axisBorder: {\n              show: false,\n            },\n          },\n  \n          yaxis: {\n            labels: {\n              formatter: (val) => {\n                if (val > 1000 && val < 1000000) {\n                  return val / 1000 + \"K\";\n                }\n                if (val > 1000000 && val < 1000000000) {\n                  return val / 1000000 + \"M\";\n                }\n                if (val > 1000000000 && val < 1000000000000) {\n                  return val / 1000000000 + \"B\";\n                }\n                return val;\n              },\n            },\n          },\n          legend: {\n            show: false,\n          },\n          fill: {\n            colors: [\"#00796B\"],\n            opacity: 1,\n          },\n          tooltip: {\n            theme: \"dark\",\n            x: {\n              show: true,\n              formatter: function (val) {\n                return val;\n              },\n            },\n            y: {\n              title: {\n                formatter: function () {\n                  return \"value\";\n                },\n              },\n            },\n          },\n        },\n      };\n    },\n  };\n  </script>\n      \n      <style lang=\"scss\" scoped>\n  @import \"../../assets/style_scss/Partials/variables\";\n  @import \"../../assets/style_scss/Partials/mixin\";\n  \n  .chart {\n    @include card;\n    @include font;\n  }\n  .maindiv {\n    position: relative;\n    border-radius: 5px;\n    background: rgb(154, 155, 157);\n    color: black;\n    height: 100%;\n  }\n  .apexcharts-tooltip {\n    background: #f3f3f3;\n    color: orange;\n  }\n  </style>\n      "],"mappings":";;;EACSA,KAAK,EAAC;AAAS;;EACXC,EAAE,EAAC;AAAO;;;uBADnBC,mBAAA,CAIM,OAJNC,UAIM,GAHFC,mBAAA,CAEI,OAFJC,UAEI,GADJC,YAAA,CAAyFC,oBAAA;IAA9EC,IAAI,EAAC,MAAM;IAACC,MAAM,EAAC,KAAK;IAAEC,OAAO,EAAEC,IAAA,CAAAC,YAAY;IAAGC,MAAM,EAAEF,IAAA,CAAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}