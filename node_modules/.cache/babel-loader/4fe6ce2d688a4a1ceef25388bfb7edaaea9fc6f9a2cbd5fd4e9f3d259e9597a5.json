{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst child_process_1 = require(\"child_process\");\nconst fs = require(\"fs\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst isbrowser_1 = require(\"../isbrowser\");\nconst messages = require(\"../messages\");\nconst transporters_1 = require(\"../transporters\");\nconst computeclient_1 = require(\"./computeclient\");\nconst envDetect_1 = require(\"./envDetect\");\nconst jwtclient_1 = require(\"./jwtclient\");\nconst refreshclient_1 = require(\"./refreshclient\");\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\nclass GoogleAuth {\n  constructor(opts) {\n    /**\n     * Caches a value indicating whether the auth layer is running on Google\n     * Compute Engine.\n     * @private\n     */\n    this.checkIsGCE = undefined;\n    // To save the contents of the JSON credential file\n    this.jsonContent = null;\n    this.cachedCredential = null;\n    opts = opts || {};\n    this._cachedProjectId = opts.projectId || null;\n    this.keyFilename = opts.keyFilename || opts.keyFile;\n    this.scopes = opts.scopes;\n    this.jsonContent = opts.credentials || null;\n    this.clientOptions = opts.clientOptions;\n  }\n  // Note:  this properly is only public to satisify unit tests.\n  // https://github.com/Microsoft/TypeScript/issues/5228\n  get isGCE() {\n    return this.checkIsGCE;\n  }\n  getDefaultProjectId(callback) {\n    messages.warn(messages.DEFAULT_PROJECT_ID_DEPRECATED);\n    if (callback) {\n      this.getProjectIdAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.getProjectIdAsync();\n    }\n  }\n  getProjectId(callback) {\n    if (callback) {\n      this.getProjectIdAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.getProjectIdAsync();\n    }\n  }\n  getProjectIdAsync() {\n    if (this._cachedProjectId) {\n      return Promise.resolve(this._cachedProjectId);\n    }\n    // In implicit case, supports three environments. In order of precedence,\n    // the implicit environments are:\n    // - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n    // - GOOGLE_APPLICATION_CREDENTIALS JSON file\n    // - Cloud SDK: `gcloud config config-helper --format json`\n    // - GCE project ID from metadata server)\n    if (!this._getDefaultProjectIdPromise) {\n      this._getDefaultProjectIdPromise = new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n        try {\n          const projectId = this.getProductionProjectId() || (yield this.getFileProjectId()) || (yield this.getDefaultServiceProjectId()) || (yield this.getGCEProjectId());\n          this._cachedProjectId = projectId;\n          resolve(projectId);\n        } catch (e) {\n          reject(e);\n        }\n      }));\n    }\n    return this._getDefaultProjectIdPromise;\n  }\n  getApplicationDefault(optionsOrCallback = {}, callback) {\n    let options;\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else {\n      options = optionsOrCallback;\n    }\n    if (callback) {\n      this.getApplicationDefaultAsync(options).then(r => callback(null, r.credential, r.projectId), callback);\n    } else {\n      return this.getApplicationDefaultAsync(options);\n    }\n  }\n  getApplicationDefaultAsync(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // If we've already got a cached credential, just return it.\n      if (this.cachedCredential) {\n        return {\n          credential: this.cachedCredential,\n          projectId: yield this.getProjectIdAsync()\n        };\n      }\n      let credential;\n      let projectId;\n      // Check for the existence of a local environment variable pointing to the\n      // location of the credential file. This is typically used in local\n      // developer scenarios.\n      credential = yield this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n      if (credential) {\n        if (credential instanceof jwtclient_1.JWT) {\n          credential.scopes = this.scopes;\n        }\n        this.cachedCredential = credential;\n        projectId = yield this.getProjectId();\n        return {\n          credential,\n          projectId\n        };\n      }\n      // Look in the well-known credential file location.\n      credential = yield this._tryGetApplicationCredentialsFromWellKnownFile(options);\n      if (credential) {\n        if (credential instanceof jwtclient_1.JWT) {\n          credential.scopes = this.scopes;\n        }\n        this.cachedCredential = credential;\n        projectId = yield this.getProjectId();\n        return {\n          credential,\n          projectId\n        };\n      }\n      // Determine if we're running on GCE.\n      let isGCE;\n      try {\n        isGCE = yield this._checkIsGCE();\n      } catch (e) {\n        throw new Error('Unexpected error determining execution environment: ' + e.message);\n      }\n      if (!isGCE) {\n        // We failed to find the default credentials. Bail out with an error.\n        throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n      }\n      // For GCE, just return a default ComputeClient. It will take care of\n      // the rest.\n      this.cachedCredential = new computeclient_1.Compute(options);\n      projectId = yield this.getProjectId();\n      return {\n        projectId,\n        credential: this.cachedCredential\n      };\n    });\n  }\n  /**\n   * Determines whether the auth layer is running on Google Compute Engine.\n   * @returns A promise that resolves with the boolean.\n   * @api private\n   */\n  _checkIsGCE() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.checkIsGCE === undefined) {\n        this.checkIsGCE = yield gcpMetadata.isAvailable();\n      }\n      return this.checkIsGCE;\n    });\n  }\n  /**\n   * Attempts to load default credentials from the environment variable path..\n   * @returns Promise that resolves with the OAuth2Client or null.\n   * @api private\n   */\n  _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] || process.env['google_application_credentials'];\n      if (!credentialsPath || credentialsPath.length === 0) {\n        return null;\n      }\n      try {\n        return this._getApplicationCredentialsFromFilePath(credentialsPath, options);\n      } catch (e) {\n        throw this.createError('Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable.', e);\n      }\n    });\n  }\n  /**\n   * Attempts to load default credentials from a well-known file location\n   * @return Promise that resolves with the OAuth2Client or null.\n   * @api private\n   */\n  _tryGetApplicationCredentialsFromWellKnownFile(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // First, figure out the location of the file, depending upon the OS type.\n      let location = null;\n      if (this._isWindows()) {\n        // Windows\n        location = process.env['APPDATA'];\n      } else {\n        // Linux or Mac\n        const home = process.env['HOME'];\n        if (home) {\n          location = this._pathJoin(home, '.config');\n        }\n      }\n      // If we found the root path, expand it.\n      if (location) {\n        location = this._pathJoin(location, 'gcloud');\n        location = this._pathJoin(location, 'application_default_credentials.json');\n        location = this._mockWellKnownFilePath(location);\n        // Check whether the file exists.\n        if (!this._fileExists(location)) {\n          location = null;\n        }\n      }\n      // The file does not exist.\n      if (!location) {\n        return null;\n      }\n      // The file seems to exist. Try to use it.\n      const client = yield this._getApplicationCredentialsFromFilePath(location, options);\n      this.warnOnProblematicCredentials(client);\n      return client;\n    });\n  }\n  /**\n   * Attempts to load default credentials from a file at the given path..\n   * @param filePath The path to the file to read.\n   * @returns Promise that resolves with the OAuth2Client\n   * @api private\n   */\n  _getApplicationCredentialsFromFilePath(filePath, options = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Make sure the path looks like a string.\n      if (!filePath || filePath.length === 0) {\n        throw new Error('The file path is invalid.');\n      }\n      // Make sure there is a file at the path. lstatSync will throw if there is\n      // nothing there.\n      try {\n        // Resolve path to actual file in case of symlink. Expect a thrown error\n        // if not resolvable.\n        filePath = fs.realpathSync(filePath);\n        if (!fs.lstatSync(filePath).isFile()) {\n          throw new Error();\n        }\n      } catch (err) {\n        throw this.createError(`The file at ${filePath} does not exist, or it is not a file.`, err);\n      }\n      // Now open a read stream on the file, and parse it.\n      try {\n        const readStream = this._createReadStream(filePath);\n        return this.fromStream(readStream, options);\n      } catch (err) {\n        throw this.createError(`Unable to read the file at ${filePath}.`, err);\n      }\n    });\n  }\n  /**\n   * Credentials from the Cloud SDK that are associated with Cloud SDK's project\n   * are problematic because they may not have APIs enabled and have limited\n   * quota. If this is the case, warn about it.\n   */\n  warnOnProblematicCredentials(client) {\n    if (client.email === exports.CLOUD_SDK_CLIENT_ID) {\n      messages.warn(messages.PROBLEMATIC_CREDENTIALS_WARNING);\n    }\n  }\n  /**\n   * Create a credentials instance using the given input options.\n   * @param json The input object.\n   * @param options The JWT or UserRefresh options for the client\n   * @returns JWT or UserRefresh Client with data\n   */\n  fromJSON(json, options) {\n    let client;\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the Google auth settings.');\n    }\n    this.jsonContent = json;\n    options = options || {};\n    if (json.type === 'authorized_user') {\n      client = new refreshclient_1.UserRefreshClient(options);\n    } else {\n      options.scopes = this.scopes;\n      client = new jwtclient_1.JWT(options);\n    }\n    client.fromJSON(json);\n    return client;\n  }\n  fromStream(inputStream, optionsOrCallback = {}, callback) {\n    let options = {};\n    if (typeof optionsOrCallback === 'function') {\n      callback = optionsOrCallback;\n    } else {\n      options = optionsOrCallback;\n    }\n    if (callback) {\n      this.fromStreamAsync(inputStream, options).then(r => callback(null, r), callback);\n    } else {\n      return this.fromStreamAsync(inputStream, options);\n    }\n  }\n  fromStreamAsync(inputStream, options) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        throw new Error('Must pass in a stream containing the Google auth settings.');\n      }\n      let s = '';\n      inputStream.setEncoding('utf8').on('error', reject).on('data', chunk => s += chunk).on('end', () => {\n        try {\n          const data = JSON.parse(s);\n          const r = this.fromJSON(data, options);\n          return resolve(r);\n        } catch (err) {\n          return reject(err);\n        }\n      });\n    });\n  }\n  /**\n   * Create a credentials instance using the given API key string.\n   * @param apiKey The API key string\n   * @param options An optional options object.\n   * @returns A JWT loaded from the key\n   */\n  fromAPIKey(apiKey, options) {\n    options = options || {};\n    const client = new jwtclient_1.JWT(options);\n    client.fromAPIKey(apiKey);\n    return client;\n  }\n  /**\n   * Determines whether the current operating system is Windows.\n   * @api private\n   */\n  _isWindows() {\n    const sys = this._osPlatform();\n    if (sys && sys.length >= 3) {\n      if (sys.substring(0, 3).toLowerCase() === 'win') {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Creates a file stream. Allows mocking.\n   * @api private\n   */\n  _createReadStream(filePath) {\n    return fs.createReadStream(filePath);\n  }\n  /**\n   * Gets the current operating system platform. Allows mocking.\n   * @api private\n   */\n  _osPlatform() {\n    return os.platform();\n  }\n  /**\n   * Determines whether a file exists. Allows mocking.\n   * @api private\n   */\n  _fileExists(filePath) {\n    return fs.existsSync(filePath);\n  }\n  /**\n   * Joins two parts of a path. Allows mocking.\n   * @api private\n   */\n  _pathJoin(item1, item2) {\n    return path.join(item1, item2);\n  }\n  /**\n   * Allows mocking of the path to a well-known file.\n   * @api private\n   */\n  _mockWellKnownFilePath(filePath) {\n    return filePath;\n  }\n  // Creates an Error containing the given message, and includes the message\n  // from the optional err passed in.\n  createError(message, err) {\n    let s = message || '';\n    if (err) {\n      const errorMessage = String(err);\n      if (errorMessage && errorMessage.length > 0) {\n        if (s.length > 0) {\n          s += ' ';\n        }\n        s += errorMessage;\n      }\n    }\n    return Error(s);\n  }\n  /**\n   * Run the Google Cloud SDK command that prints the default project ID\n   */\n  getDefaultServiceProjectId() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise(resolve => {\n        child_process_1.exec('gcloud config config-helper --format json', (err, stdout, stderr) => {\n          if (!err && stdout) {\n            try {\n              const projectId = JSON.parse(stdout).configuration.properties.core.project;\n              resolve(projectId);\n              return;\n            } catch (e) {\n              // ignore errors\n            }\n          }\n          resolve(null);\n        });\n      });\n    });\n  }\n  /**\n   * Loads the project id from environment variables.\n   * @api private\n   */\n  getProductionProjectId() {\n    return process.env['GCLOUD_PROJECT'] || process.env['GOOGLE_CLOUD_PROJECT'] || process.env['gcloud_project'] || process.env['google_cloud_project'];\n  }\n  /**\n   * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n   * @api private\n   */\n  getFileProjectId() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.cachedCredential) {\n        // Try to read the project ID from the cached credentials file\n        return this.cachedCredential.projectId;\n      }\n      // Ensure the projectId is loaded from the keyFile if available.\n      if (this.keyFilename) {\n        const creds = yield this.getClient();\n        if (creds && creds.projectId) {\n          return creds.projectId;\n        }\n      }\n      // Try to load a credentials file and read its project ID\n      const r = yield this._tryGetApplicationCredentialsFromEnvironmentVariable();\n      if (r) {\n        return r.projectId;\n      } else {\n        return null;\n      }\n    });\n  }\n  /**\n   * Gets the Compute Engine project ID if it can be inferred.\n   */\n  getGCEProjectId() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const r = yield gcpMetadata.project('project-id');\n        return r;\n      } catch (e) {\n        // Ignore any errors\n        return null;\n      }\n    });\n  }\n  getCredentials(callback) {\n    if (callback) {\n      this.getCredentialsAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.getCredentialsAsync();\n    }\n  }\n  getCredentialsAsync() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.getClient();\n      if (this.jsonContent) {\n        const credential = {\n          client_email: this.jsonContent.client_email,\n          private_key: this.jsonContent.private_key\n        };\n        return credential;\n      }\n      const isGCE = yield this._checkIsGCE();\n      if (!isGCE) {\n        throw new Error('Unknown error.');\n      }\n      // For GCE, return the service account details from the metadata server\n      // NOTE: The trailing '/' at the end of service-accounts/ is very important!\n      // The GCF metadata server doesn't respect querystring params if this / is\n      // not included.\n      const data = yield gcpMetadata.instance({\n        property: 'service-accounts/',\n        params: {\n          recursive: 'true'\n        }\n      });\n      if (!data || !data.default || !data.default.email) {\n        throw new Error('Failure from metadata server.');\n      }\n      return {\n        client_email: data.default.email\n      };\n    });\n  }\n  /**\n   * Automatically obtain a client based on the provided configuration.  If no\n   * options were passed, use Application Default Credentials.\n   */\n  getClient(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (options) {\n        this.keyFilename = options.keyFilename || options.keyFile || this.keyFilename;\n        this.scopes = options.scopes || this.scopes;\n        this.jsonContent = options.credentials || this.jsonContent;\n        this.clientOptions = options.clientOptions;\n      }\n      if (!this.cachedCredential) {\n        if (this.jsonContent) {\n          this.cachedCredential = yield this.fromJSON(this.jsonContent, this.clientOptions);\n        } else if (this.keyFilename) {\n          const filePath = path.resolve(this.keyFilename);\n          const stream = fs.createReadStream(filePath);\n          this.cachedCredential = yield this.fromStreamAsync(stream, this.clientOptions);\n        } else {\n          yield this.getApplicationDefaultAsync(this.clientOptions);\n        }\n      }\n      return this.cachedCredential;\n    });\n  }\n  /**\n   * Automatically obtain application default credentials, and return\n   * an access token for making requests.\n   */\n  getAccessToken() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const client = yield this.getClient();\n      return (yield client.getAccessToken()).token;\n    });\n  }\n  /**\n   * Obtain the HTTP headers that will provide authorization for a given\n   * request.\n   */\n  getRequestHeaders(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const client = yield this.getClient();\n      return client.getRequestHeaders(url);\n    });\n  }\n  /**\n   * Obtain credentials for a request, then attach the appropriate headers to\n   * the request options.\n   * @param opts Axios or Request options on which to attach the headers\n   */\n  authorizeRequest(opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      opts = opts || {};\n      const url = opts.url || opts.uri;\n      const client = yield this.getClient();\n      const headers = yield client.getRequestHeaders(url);\n      opts.headers = Object.assign(opts.headers || {}, headers);\n      return opts;\n    });\n  }\n  /**\n   * Automatically obtain application default credentials, and make an\n   * HTTP request using the given options.\n   * @param opts Axios request options for the HTTP request.\n   */\n  // tslint:disable-next-line no-any\n  request(opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const client = yield this.getClient();\n      return client.request(opts);\n    });\n  }\n  /**\n   * Determine the compute environment in which the code is running.\n   */\n  getEnv() {\n    return envDetect_1.getEnv();\n  }\n  /**\n   * Sign the given data with the current private key, or go out\n   * to the IAM API to sign it.\n   * @param data The data to be signed.\n   */\n  sign(data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const client = yield this.getClient();\n      const crypto = crypto_1.createCrypto();\n      if (client instanceof jwtclient_1.JWT && client.key && !isbrowser_1.isBrowser()) {\n        const sign = crypto.createSign('RSA-SHA256');\n        sign.update(data);\n        return sign.sign(client.key, 'base64');\n      }\n      const projectId = yield this.getProjectId();\n      if (!projectId) {\n        throw new Error('Cannot sign data without a project ID.');\n      }\n      const creds = yield this.getCredentials();\n      if (!creds.client_email) {\n        throw new Error('Cannot sign data without `client_email`.');\n      }\n      const id = `projects/${projectId}/serviceAccounts/${creds.client_email}`;\n      const res = yield this.request({\n        method: 'POST',\n        url: `https://iam.googleapis.com/v1/${id}:signBlob`,\n        data: {\n          bytesToSign: crypto.encodeBase64StringUtf8(data)\n        }\n      });\n      return res.data.signature;\n    });\n  }\n}\n/**\n * Export DefaultTransporter as a static property of the class.\n */\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;\nexports.GoogleAuth = GoogleAuth;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","child_process_1","require","fs","gcpMetadata","os","path","crypto_1","isbrowser_1","messages","transporters_1","computeclient_1","envDetect_1","jwtclient_1","refreshclient_1","CLOUD_SDK_CLIENT_ID","GoogleAuth","constructor","opts","checkIsGCE","undefined","jsonContent","cachedCredential","_cachedProjectId","projectId","keyFilename","keyFile","scopes","credentials","clientOptions","isGCE","getDefaultProjectId","callback","warn","DEFAULT_PROJECT_ID_DEPRECATED","getProjectIdAsync","r","getProjectId","_getDefaultProjectIdPromise","getProductionProjectId","getFileProjectId","getDefaultServiceProjectId","getGCEProjectId","getApplicationDefault","optionsOrCallback","options","getApplicationDefaultAsync","credential","_tryGetApplicationCredentialsFromEnvironmentVariable","JWT","_tryGetApplicationCredentialsFromWellKnownFile","_checkIsGCE","Error","message","Compute","isAvailable","credentialsPath","process","env","length","_getApplicationCredentialsFromFilePath","createError","location","_isWindows","home","_pathJoin","_mockWellKnownFilePath","_fileExists","client","warnOnProblematicCredentials","filePath","realpathSync","lstatSync","isFile","err","readStream","_createReadStream","fromStream","email","PROBLEMATIC_CREDENTIALS_WARNING","fromJSON","json","type","UserRefreshClient","inputStream","fromStreamAsync","s","setEncoding","on","chunk","data","JSON","parse","fromAPIKey","apiKey","sys","_osPlatform","substring","toLowerCase","createReadStream","platform","existsSync","item1","item2","join","errorMessage","String","exec","stdout","stderr","configuration","properties","core","project","creds","getClient","getCredentials","getCredentialsAsync","client_email","private_key","instance","property","params","recursive","default","stream","getAccessToken","token","getRequestHeaders","url","authorizeRequest","uri","headers","assign","request","getEnv","sign","crypto","createCrypto","key","isBrowser","createSign","update","id","res","method","bytesToSign","encodeBase64StringUtf8","signature","DefaultTransporter"],"sources":["/var/www/html/project/Dash_Vuexy-master/node_modules/google-auth-library/build/src/auth/googleauth.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst child_process_1 = require(\"child_process\");\nconst fs = require(\"fs\");\nconst gcpMetadata = require(\"gcp-metadata\");\nconst os = require(\"os\");\nconst path = require(\"path\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst isbrowser_1 = require(\"../isbrowser\");\nconst messages = require(\"../messages\");\nconst transporters_1 = require(\"../transporters\");\nconst computeclient_1 = require(\"./computeclient\");\nconst envDetect_1 = require(\"./envDetect\");\nconst jwtclient_1 = require(\"./jwtclient\");\nconst refreshclient_1 = require(\"./refreshclient\");\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\nclass GoogleAuth {\n    constructor(opts) {\n        /**\n         * Caches a value indicating whether the auth layer is running on Google\n         * Compute Engine.\n         * @private\n         */\n        this.checkIsGCE = undefined;\n        // To save the contents of the JSON credential file\n        this.jsonContent = null;\n        this.cachedCredential = null;\n        opts = opts || {};\n        this._cachedProjectId = opts.projectId || null;\n        this.keyFilename = opts.keyFilename || opts.keyFile;\n        this.scopes = opts.scopes;\n        this.jsonContent = opts.credentials || null;\n        this.clientOptions = opts.clientOptions;\n    }\n    // Note:  this properly is only public to satisify unit tests.\n    // https://github.com/Microsoft/TypeScript/issues/5228\n    get isGCE() {\n        return this.checkIsGCE;\n    }\n    getDefaultProjectId(callback) {\n        messages.warn(messages.DEFAULT_PROJECT_ID_DEPRECATED);\n        if (callback) {\n            this.getProjectIdAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getProjectIdAsync();\n        }\n    }\n    getProjectId(callback) {\n        if (callback) {\n            this.getProjectIdAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getProjectIdAsync();\n        }\n    }\n    getProjectIdAsync() {\n        if (this._cachedProjectId) {\n            return Promise.resolve(this._cachedProjectId);\n        }\n        // In implicit case, supports three environments. In order of precedence,\n        // the implicit environments are:\n        // - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n        // - GOOGLE_APPLICATION_CREDENTIALS JSON file\n        // - Cloud SDK: `gcloud config config-helper --format json`\n        // - GCE project ID from metadata server)\n        if (!this._getDefaultProjectIdPromise) {\n            this._getDefaultProjectIdPromise =\n                new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                    try {\n                        const projectId = this.getProductionProjectId() ||\n                            (yield this.getFileProjectId()) ||\n                            (yield this.getDefaultServiceProjectId()) ||\n                            (yield this.getGCEProjectId());\n                        this._cachedProjectId = projectId;\n                        resolve(projectId);\n                    }\n                    catch (e) {\n                        reject(e);\n                    }\n                }));\n        }\n        return this._getDefaultProjectIdPromise;\n    }\n    getApplicationDefault(optionsOrCallback = {}, callback) {\n        let options;\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.getApplicationDefaultAsync(options).then(r => callback(null, r.credential, r.projectId), callback);\n        }\n        else {\n            return this.getApplicationDefaultAsync(options);\n        }\n    }\n    getApplicationDefaultAsync(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // If we've already got a cached credential, just return it.\n            if (this.cachedCredential) {\n                return {\n                    credential: this.cachedCredential,\n                    projectId: yield this.getProjectIdAsync()\n                };\n            }\n            let credential;\n            let projectId;\n            // Check for the existence of a local environment variable pointing to the\n            // location of the credential file. This is typically used in local\n            // developer scenarios.\n            credential =\n                yield this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n            if (credential) {\n                if (credential instanceof jwtclient_1.JWT) {\n                    credential.scopes = this.scopes;\n                }\n                this.cachedCredential = credential;\n                projectId = yield this.getProjectId();\n                return { credential, projectId };\n            }\n            // Look in the well-known credential file location.\n            credential =\n                yield this._tryGetApplicationCredentialsFromWellKnownFile(options);\n            if (credential) {\n                if (credential instanceof jwtclient_1.JWT) {\n                    credential.scopes = this.scopes;\n                }\n                this.cachedCredential = credential;\n                projectId = yield this.getProjectId();\n                return { credential, projectId };\n            }\n            // Determine if we're running on GCE.\n            let isGCE;\n            try {\n                isGCE = yield this._checkIsGCE();\n            }\n            catch (e) {\n                throw new Error('Unexpected error determining execution environment: ' + e.message);\n            }\n            if (!isGCE) {\n                // We failed to find the default credentials. Bail out with an error.\n                throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n            }\n            // For GCE, just return a default ComputeClient. It will take care of\n            // the rest.\n            this.cachedCredential = new computeclient_1.Compute(options);\n            projectId = yield this.getProjectId();\n            return { projectId, credential: this.cachedCredential };\n        });\n    }\n    /**\n     * Determines whether the auth layer is running on Google Compute Engine.\n     * @returns A promise that resolves with the boolean.\n     * @api private\n     */\n    _checkIsGCE() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.checkIsGCE === undefined) {\n                this.checkIsGCE = yield gcpMetadata.isAvailable();\n            }\n            return this.checkIsGCE;\n        });\n    }\n    /**\n     * Attempts to load default credentials from the environment variable path..\n     * @returns Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    _tryGetApplicationCredentialsFromEnvironmentVariable(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] ||\n                process.env['google_application_credentials'];\n            if (!credentialsPath || credentialsPath.length === 0) {\n                return null;\n            }\n            try {\n                return this._getApplicationCredentialsFromFilePath(credentialsPath, options);\n            }\n            catch (e) {\n                throw this.createError('Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable.', e);\n            }\n        });\n    }\n    /**\n     * Attempts to load default credentials from a well-known file location\n     * @return Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n    _tryGetApplicationCredentialsFromWellKnownFile(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // First, figure out the location of the file, depending upon the OS type.\n            let location = null;\n            if (this._isWindows()) {\n                // Windows\n                location = process.env['APPDATA'];\n            }\n            else {\n                // Linux or Mac\n                const home = process.env['HOME'];\n                if (home) {\n                    location = this._pathJoin(home, '.config');\n                }\n            }\n            // If we found the root path, expand it.\n            if (location) {\n                location = this._pathJoin(location, 'gcloud');\n                location =\n                    this._pathJoin(location, 'application_default_credentials.json');\n                location = this._mockWellKnownFilePath(location);\n                // Check whether the file exists.\n                if (!this._fileExists(location)) {\n                    location = null;\n                }\n            }\n            // The file does not exist.\n            if (!location) {\n                return null;\n            }\n            // The file seems to exist. Try to use it.\n            const client = yield this._getApplicationCredentialsFromFilePath(location, options);\n            this.warnOnProblematicCredentials(client);\n            return client;\n        });\n    }\n    /**\n     * Attempts to load default credentials from a file at the given path..\n     * @param filePath The path to the file to read.\n     * @returns Promise that resolves with the OAuth2Client\n     * @api private\n     */\n    _getApplicationCredentialsFromFilePath(filePath, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Make sure the path looks like a string.\n            if (!filePath || filePath.length === 0) {\n                throw new Error('The file path is invalid.');\n            }\n            // Make sure there is a file at the path. lstatSync will throw if there is\n            // nothing there.\n            try {\n                // Resolve path to actual file in case of symlink. Expect a thrown error\n                // if not resolvable.\n                filePath = fs.realpathSync(filePath);\n                if (!fs.lstatSync(filePath).isFile()) {\n                    throw new Error();\n                }\n            }\n            catch (err) {\n                throw this.createError(`The file at ${filePath} does not exist, or it is not a file.`, err);\n            }\n            // Now open a read stream on the file, and parse it.\n            try {\n                const readStream = this._createReadStream(filePath);\n                return this.fromStream(readStream, options);\n            }\n            catch (err) {\n                throw this.createError(`Unable to read the file at ${filePath}.`, err);\n            }\n        });\n    }\n    /**\n     * Credentials from the Cloud SDK that are associated with Cloud SDK's project\n     * are problematic because they may not have APIs enabled and have limited\n     * quota. If this is the case, warn about it.\n     */\n    warnOnProblematicCredentials(client) {\n        if (client.email === exports.CLOUD_SDK_CLIENT_ID) {\n            messages.warn(messages.PROBLEMATIC_CREDENTIALS_WARNING);\n        }\n    }\n    /**\n     * Create a credentials instance using the given input options.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n    fromJSON(json, options) {\n        let client;\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the Google auth settings.');\n        }\n        this.jsonContent = json;\n        options = options || {};\n        if (json.type === 'authorized_user') {\n            client = new refreshclient_1.UserRefreshClient(options);\n        }\n        else {\n            options.scopes = this.scopes;\n            client = new jwtclient_1.JWT(options);\n        }\n        client.fromJSON(json);\n        return client;\n    }\n    fromStream(inputStream, optionsOrCallback = {}, callback) {\n        let options = {};\n        if (typeof optionsOrCallback === 'function') {\n            callback = optionsOrCallback;\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        if (callback) {\n            this.fromStreamAsync(inputStream, options)\n                .then(r => callback(null, r), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream, options);\n        }\n    }\n    fromStreamAsync(inputStream, options) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the Google auth settings.');\n            }\n            let s = '';\n            inputStream.setEncoding('utf8')\n                .on('error', reject)\n                .on('data', (chunk) => s += chunk)\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    const r = this.fromJSON(data, options);\n                    return resolve(r);\n                }\n                catch (err) {\n                    return reject(err);\n                }\n            });\n        });\n    }\n    /**\n     * Create a credentials instance using the given API key string.\n     * @param apiKey The API key string\n     * @param options An optional options object.\n     * @returns A JWT loaded from the key\n     */\n    fromAPIKey(apiKey, options) {\n        options = options || {};\n        const client = new jwtclient_1.JWT(options);\n        client.fromAPIKey(apiKey);\n        return client;\n    }\n    /**\n     * Determines whether the current operating system is Windows.\n     * @api private\n     */\n    _isWindows() {\n        const sys = this._osPlatform();\n        if (sys && sys.length >= 3) {\n            if (sys.substring(0, 3).toLowerCase() === 'win') {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Creates a file stream. Allows mocking.\n     * @api private\n     */\n    _createReadStream(filePath) {\n        return fs.createReadStream(filePath);\n    }\n    /**\n     * Gets the current operating system platform. Allows mocking.\n     * @api private\n     */\n    _osPlatform() {\n        return os.platform();\n    }\n    /**\n     * Determines whether a file exists. Allows mocking.\n     * @api private\n     */\n    _fileExists(filePath) {\n        return fs.existsSync(filePath);\n    }\n    /**\n     * Joins two parts of a path. Allows mocking.\n     * @api private\n     */\n    _pathJoin(item1, item2) {\n        return path.join(item1, item2);\n    }\n    /**\n     * Allows mocking of the path to a well-known file.\n     * @api private\n     */\n    _mockWellKnownFilePath(filePath) {\n        return filePath;\n    }\n    // Creates an Error containing the given message, and includes the message\n    // from the optional err passed in.\n    createError(message, err) {\n        let s = message || '';\n        if (err) {\n            const errorMessage = String(err);\n            if (errorMessage && errorMessage.length > 0) {\n                if (s.length > 0) {\n                    s += ' ';\n                }\n                s += errorMessage;\n            }\n        }\n        return Error(s);\n    }\n    /**\n     * Run the Google Cloud SDK command that prints the default project ID\n     */\n    getDefaultServiceProjectId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise(resolve => {\n                child_process_1.exec('gcloud config config-helper --format json', (err, stdout, stderr) => {\n                    if (!err && stdout) {\n                        try {\n                            const projectId = JSON.parse(stdout).configuration.properties.core.project;\n                            resolve(projectId);\n                            return;\n                        }\n                        catch (e) {\n                            // ignore errors\n                        }\n                    }\n                    resolve(null);\n                });\n            });\n        });\n    }\n    /**\n     * Loads the project id from environment variables.\n     * @api private\n     */\n    getProductionProjectId() {\n        return process.env['GCLOUD_PROJECT'] ||\n            process.env['GOOGLE_CLOUD_PROJECT'] || process.env['gcloud_project'] ||\n            process.env['google_cloud_project'];\n    }\n    /**\n     * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n     * @api private\n     */\n    getFileProjectId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.cachedCredential) {\n                // Try to read the project ID from the cached credentials file\n                return this.cachedCredential.projectId;\n            }\n            // Ensure the projectId is loaded from the keyFile if available.\n            if (this.keyFilename) {\n                const creds = yield this.getClient();\n                if (creds && creds.projectId) {\n                    return creds.projectId;\n                }\n            }\n            // Try to load a credentials file and read its project ID\n            const r = yield this._tryGetApplicationCredentialsFromEnvironmentVariable();\n            if (r) {\n                return r.projectId;\n            }\n            else {\n                return null;\n            }\n        });\n    }\n    /**\n     * Gets the Compute Engine project ID if it can be inferred.\n     */\n    getGCEProjectId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const r = yield gcpMetadata.project('project-id');\n                return r;\n            }\n            catch (e) {\n                // Ignore any errors\n                return null;\n            }\n        });\n    }\n    getCredentials(callback) {\n        if (callback) {\n            this.getCredentialsAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.getCredentialsAsync();\n        }\n    }\n    getCredentialsAsync() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.getClient();\n            if (this.jsonContent) {\n                const credential = {\n                    client_email: this.jsonContent.client_email,\n                    private_key: this.jsonContent.private_key\n                };\n                return credential;\n            }\n            const isGCE = yield this._checkIsGCE();\n            if (!isGCE) {\n                throw new Error('Unknown error.');\n            }\n            // For GCE, return the service account details from the metadata server\n            // NOTE: The trailing '/' at the end of service-accounts/ is very important!\n            // The GCF metadata server doesn't respect querystring params if this / is\n            // not included.\n            const data = yield gcpMetadata.instance({ property: 'service-accounts/', params: { recursive: 'true' } });\n            if (!data || !data.default || !data.default.email) {\n                throw new Error('Failure from metadata server.');\n            }\n            return { client_email: data.default.email };\n        });\n    }\n    /**\n     * Automatically obtain a client based on the provided configuration.  If no\n     * options were passed, use Application Default Credentials.\n     */\n    getClient(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (options) {\n                this.keyFilename =\n                    options.keyFilename || options.keyFile || this.keyFilename;\n                this.scopes = options.scopes || this.scopes;\n                this.jsonContent = options.credentials || this.jsonContent;\n                this.clientOptions = options.clientOptions;\n            }\n            if (!this.cachedCredential) {\n                if (this.jsonContent) {\n                    this.cachedCredential =\n                        yield this.fromJSON(this.jsonContent, this.clientOptions);\n                }\n                else if (this.keyFilename) {\n                    const filePath = path.resolve(this.keyFilename);\n                    const stream = fs.createReadStream(filePath);\n                    this.cachedCredential =\n                        yield this.fromStreamAsync(stream, this.clientOptions);\n                }\n                else {\n                    yield this.getApplicationDefaultAsync(this.clientOptions);\n                }\n            }\n            return this.cachedCredential;\n        });\n    }\n    /**\n     * Automatically obtain application default credentials, and return\n     * an access token for making requests.\n     */\n    getAccessToken() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = yield this.getClient();\n            return (yield client.getAccessToken()).token;\n        });\n    }\n    /**\n     * Obtain the HTTP headers that will provide authorization for a given\n     * request.\n     */\n    getRequestHeaders(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = yield this.getClient();\n            return client.getRequestHeaders(url);\n        });\n    }\n    /**\n     * Obtain credentials for a request, then attach the appropriate headers to\n     * the request options.\n     * @param opts Axios or Request options on which to attach the headers\n     */\n    authorizeRequest(opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            opts = opts || {};\n            const url = opts.url || opts.uri;\n            const client = yield this.getClient();\n            const headers = yield client.getRequestHeaders(url);\n            opts.headers = Object.assign(opts.headers || {}, headers);\n            return opts;\n        });\n    }\n    /**\n     * Automatically obtain application default credentials, and make an\n     * HTTP request using the given options.\n     * @param opts Axios request options for the HTTP request.\n     */\n    // tslint:disable-next-line no-any\n    request(opts) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = yield this.getClient();\n            return client.request(opts);\n        });\n    }\n    /**\n     * Determine the compute environment in which the code is running.\n     */\n    getEnv() {\n        return envDetect_1.getEnv();\n    }\n    /**\n     * Sign the given data with the current private key, or go out\n     * to the IAM API to sign it.\n     * @param data The data to be signed.\n     */\n    sign(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const client = yield this.getClient();\n            const crypto = crypto_1.createCrypto();\n            if (client instanceof jwtclient_1.JWT && client.key && !isbrowser_1.isBrowser()) {\n                const sign = crypto.createSign('RSA-SHA256');\n                sign.update(data);\n                return sign.sign(client.key, 'base64');\n            }\n            const projectId = yield this.getProjectId();\n            if (!projectId) {\n                throw new Error('Cannot sign data without a project ID.');\n            }\n            const creds = yield this.getCredentials();\n            if (!creds.client_email) {\n                throw new Error('Cannot sign data without `client_email`.');\n            }\n            const id = `projects/${projectId}/serviceAccounts/${creds.client_email}`;\n            const res = yield this.request({\n                method: 'POST',\n                url: `https://iam.googleapis.com/v1/${id}:signBlob`,\n                data: { bytesToSign: crypto.encodeBase64StringUtf8(data) }\n            });\n            return res.data.signature;\n        });\n    }\n}\n/**\n * Export DefaultTransporter as a static property of the class.\n */\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;\nexports.GoogleAuth = GoogleAuth;\n//# sourceMappingURL=googleauth.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}