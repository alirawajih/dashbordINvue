{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst events_1 = require(\"events\");\nconst http2 = require(\"http2\");\nconst {\n  HTTP2_HEADER_AUTHORITY,\n  HTTP2_HEADER_CONTENT_TYPE,\n  HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_PATH,\n  HTTP2_HEADER_TE,\n  HTTP2_HEADER_USER_AGENT\n} = http2.constants;\n/* setInterval and setTimeout only accept signed 32 bit integers. JS doesn't\n * have a constant for the max signed 32 bit integer, so this is a simple way\n * to calculate it */\nconst KEEPALIVE_TIME_MS = ~(1 << 31);\nconst KEEPALIVE_TIMEOUT_MS = 20000;\nclass Http2SubChannel extends events_1.EventEmitter {\n  constructor(target, connectionOptions, userAgent, channelArgs) {\n    super();\n    this.refCount = 0;\n    this.keepaliveTimeMs = KEEPALIVE_TIME_MS;\n    this.keepaliveTimeoutMs = KEEPALIVE_TIMEOUT_MS;\n    this.session = http2.connect(target, connectionOptions);\n    this.session.unref();\n    this.session.on('connect', () => {\n      this.emit('connect');\n    });\n    this.session.on('close', () => {\n      this.stopKeepalivePings();\n      this.emit('close');\n    });\n    this.session.on('error', () => {\n      this.stopKeepalivePings();\n      this.emit('close');\n    });\n    this.userAgent = userAgent;\n    if (channelArgs['grpc.keepalive_time_ms']) {\n      this.keepaliveTimeMs = channelArgs['grpc.keepalive_time_ms'];\n    }\n    if (channelArgs['grpc.keepalive_timeout_ms']) {\n      this.keepaliveTimeoutMs = channelArgs['grpc.keepalive_timeout_ms'];\n    }\n    this.keepaliveIntervalId = setTimeout(() => {}, 0);\n    clearTimeout(this.keepaliveIntervalId);\n    this.keepaliveTimeoutId = setTimeout(() => {}, 0);\n    clearTimeout(this.keepaliveTimeoutId);\n  }\n  ref() {\n    if (this.refCount === 0) {\n      this.session.ref();\n      this.startKeepalivePings();\n    }\n    this.refCount += 1;\n  }\n  unref() {\n    this.refCount -= 1;\n    if (this.refCount === 0) {\n      this.session.unref();\n      this.stopKeepalivePings();\n    }\n  }\n  sendPing() {\n    this.keepaliveTimeoutId = setTimeout(() => {\n      this.emit('close');\n    }, this.keepaliveTimeoutMs);\n    this.session.ping((err, duration, payload) => {\n      clearTimeout(this.keepaliveTimeoutId);\n    });\n  }\n  /* TODO(murgatroid99): refactor subchannels so that keepalives can be handled\n   * per subchannel */\n  startKeepalivePings() {\n    this.keepaliveIntervalId = setInterval(() => {\n      this.sendPing();\n    }, this.keepaliveTimeMs);\n    this.sendPing();\n  }\n  stopKeepalivePings() {\n    clearInterval(this.keepaliveIntervalId);\n    clearTimeout(this.keepaliveTimeoutId);\n  }\n  // Prerequisite: this subchannel is connected\n  startCallStream(metadata, callStream) {\n    const headers = metadata.toHttp2Headers();\n    headers[HTTP2_HEADER_AUTHORITY] = callStream.getHost();\n    headers[HTTP2_HEADER_USER_AGENT] = this.userAgent;\n    headers[HTTP2_HEADER_CONTENT_TYPE] = 'application/grpc';\n    headers[HTTP2_HEADER_METHOD] = 'POST';\n    headers[HTTP2_HEADER_PATH] = callStream.getMethod();\n    headers[HTTP2_HEADER_TE] = 'trailers';\n    const http2Stream = this.session.request(headers);\n    this.ref();\n    http2Stream.on('close', () => {\n      this.unref();\n    });\n    callStream.attachHttp2Stream(http2Stream);\n  }\n  close() {\n    this.session.close();\n  }\n}\nexports.Http2SubChannel = Http2SubChannel;","map":{"version":3,"names":["Object","defineProperty","exports","value","events_1","require","http2","HTTP2_HEADER_AUTHORITY","HTTP2_HEADER_CONTENT_TYPE","HTTP2_HEADER_METHOD","HTTP2_HEADER_PATH","HTTP2_HEADER_TE","HTTP2_HEADER_USER_AGENT","constants","KEEPALIVE_TIME_MS","KEEPALIVE_TIMEOUT_MS","Http2SubChannel","EventEmitter","constructor","target","connectionOptions","userAgent","channelArgs","refCount","keepaliveTimeMs","keepaliveTimeoutMs","session","connect","unref","on","emit","stopKeepalivePings","keepaliveIntervalId","setTimeout","clearTimeout","keepaliveTimeoutId","ref","startKeepalivePings","sendPing","ping","err","duration","payload","setInterval","clearInterval","startCallStream","metadata","callStream","headers","toHttp2Headers","getHost","getMethod","http2Stream","request","attachHttp2Stream","close"],"sources":["/var/www/html/project/Dash_Vuexy-master/node_modules/@grpc/grpc-js/build/src/subchannel.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nconst http2 = require(\"http2\");\nconst { HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_TE, HTTP2_HEADER_USER_AGENT } = http2.constants;\n/* setInterval and setTimeout only accept signed 32 bit integers. JS doesn't\n * have a constant for the max signed 32 bit integer, so this is a simple way\n * to calculate it */\nconst KEEPALIVE_TIME_MS = ~(1 << 31);\nconst KEEPALIVE_TIMEOUT_MS = 20000;\nclass Http2SubChannel extends events_1.EventEmitter {\n    constructor(target, connectionOptions, userAgent, channelArgs) {\n        super();\n        this.refCount = 0;\n        this.keepaliveTimeMs = KEEPALIVE_TIME_MS;\n        this.keepaliveTimeoutMs = KEEPALIVE_TIMEOUT_MS;\n        this.session = http2.connect(target, connectionOptions);\n        this.session.unref();\n        this.session.on('connect', () => {\n            this.emit('connect');\n        });\n        this.session.on('close', () => {\n            this.stopKeepalivePings();\n            this.emit('close');\n        });\n        this.session.on('error', () => {\n            this.stopKeepalivePings();\n            this.emit('close');\n        });\n        this.userAgent = userAgent;\n        if (channelArgs['grpc.keepalive_time_ms']) {\n            this.keepaliveTimeMs = channelArgs['grpc.keepalive_time_ms'];\n        }\n        if (channelArgs['grpc.keepalive_timeout_ms']) {\n            this.keepaliveTimeoutMs = channelArgs['grpc.keepalive_timeout_ms'];\n        }\n        this.keepaliveIntervalId = setTimeout(() => { }, 0);\n        clearTimeout(this.keepaliveIntervalId);\n        this.keepaliveTimeoutId = setTimeout(() => { }, 0);\n        clearTimeout(this.keepaliveTimeoutId);\n    }\n    ref() {\n        if (this.refCount === 0) {\n            this.session.ref();\n            this.startKeepalivePings();\n        }\n        this.refCount += 1;\n    }\n    unref() {\n        this.refCount -= 1;\n        if (this.refCount === 0) {\n            this.session.unref();\n            this.stopKeepalivePings();\n        }\n    }\n    sendPing() {\n        this.keepaliveTimeoutId = setTimeout(() => {\n            this.emit('close');\n        }, this.keepaliveTimeoutMs);\n        this.session.ping((err, duration, payload) => {\n            clearTimeout(this.keepaliveTimeoutId);\n        });\n    }\n    /* TODO(murgatroid99): refactor subchannels so that keepalives can be handled\n     * per subchannel */\n    startKeepalivePings() {\n        this.keepaliveIntervalId = setInterval(() => {\n            this.sendPing();\n        }, this.keepaliveTimeMs);\n        this.sendPing();\n    }\n    stopKeepalivePings() {\n        clearInterval(this.keepaliveIntervalId);\n        clearTimeout(this.keepaliveTimeoutId);\n    }\n    // Prerequisite: this subchannel is connected\n    startCallStream(metadata, callStream) {\n        const headers = metadata.toHttp2Headers();\n        headers[HTTP2_HEADER_AUTHORITY] = callStream.getHost();\n        headers[HTTP2_HEADER_USER_AGENT] = this.userAgent;\n        headers[HTTP2_HEADER_CONTENT_TYPE] = 'application/grpc';\n        headers[HTTP2_HEADER_METHOD] = 'POST';\n        headers[HTTP2_HEADER_PATH] = callStream.getMethod();\n        headers[HTTP2_HEADER_TE] = 'trailers';\n        const http2Stream = this.session.request(headers);\n        this.ref();\n        http2Stream.on('close', () => {\n            this.unref();\n        });\n        callStream.attachHttp2Stream(http2Stream);\n    }\n    close() {\n        this.session.close();\n    }\n}\nexports.Http2SubChannel = Http2SubChannel;\n//# sourceMappingURL=subchannel.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}