{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2016, Google Inc.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *     * Redistributions of source code must retain the above copyright\n * notice, this list of conditions and the following disclaimer.\n *     * Redistributions in binary form must reproduce the above\n * copyright notice, this list of conditions and the following disclaimer\n * in the documentation and/or other materials provided with the\n * distribution.\n *     * Neither the name of Google Inc. nor the names of its\n * contributors may be used to endorse or promote products derived from\n * this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n */\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.array.unshift.js\");\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst grpcProtoLoaderTypes = require(\"@grpc/proto-loader\"); // for types only\nconst fs = require(\"fs\");\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst google_proto_files_1 = require(\"google-proto-files\");\nconst grpcTypes = require(\"grpc\"); // for types only\nconst grpcGcp = require(\"grpc-gcp\");\nconst path = require(\"path\");\nconst protobuf = require(\"protobufjs\");\nconst semver = require(\"semver\");\nconst walk = require(\"walkdir\");\nconst gax = require(\"./gax\");\nconst googleProtoFilesDir = path.normalize(google_proto_files_1.getProtoPath('..'));\n// INCLUDE_DIRS is passed to @grpc/proto-loader\nconst INCLUDE_DIRS = [];\nINCLUDE_DIRS.push(googleProtoFilesDir);\n// COMMON_PROTO_FILES logic is here for protobufjs loads (see\n// GoogleProtoFilesRoot below)\nconst COMMON_PROTO_DIRS = [\n// This list of directories is defined here:\n// https://github.com/googleapis/googleapis/blob/master/gapic/packaging/common_protos.yaml\n'api', path.join('iam', 'v1'), path.join('logging', 'type'), path.join('monitoring', 'v3'), 'longrunning', 'protobuf', 'rpc', 'type'].map(dir => path.join(googleProtoFilesDir, 'google', dir));\nINCLUDE_DIRS.push(...COMMON_PROTO_DIRS);\nconst COMMON_PROTO_FILES = COMMON_PROTO_DIRS.map(dir => {\n  return walk.sync(dir).filter(f => path.extname(f) === '.proto').map(f => path.normalize(f).substring(googleProtoFilesDir.length + 1));\n}).reduce((a, c) => a.concat(c), []);\nclass ClientStub extends grpcTypes.Client {}\nexports.ClientStub = ClientStub;\nclass GrpcClient {\n  /**\n   * A class which keeps the context of gRPC and auth for the gRPC.\n   *\n   * @param {Object=} options - The optional parameters. It will be directly\n   *   passed to google-auth-library library, so parameters like keyFile or\n   *   credentials will be valid.\n   * @param {Object=} options.auth - An instance of google-auth-library.\n   *   When specified, this auth instance will be used instead of creating\n   *   a new one.\n   * @param {Object=} options.grpc - When specified, this will be used\n   *   for the 'grpc' module in this context. By default, it will load the grpc\n   *   module in the standard way.\n   * @param {Function=} options.promise - A constructor for a promise that\n   * implements the ES6 specification of promise. If not provided, native\n   * promises will be used.\n   * @constructor\n   */\n  constructor(options = {}) {\n    this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);\n    this.promise = options.promise || Promise;\n    if ('grpc' in options) {\n      this.grpc = options.grpc;\n      this.grpcVersion = '';\n    } else {\n      // EXPERIMENTAL: If GOOGLE_CLOUD_USE_GRPC_JS is set, use the JS-based\n      // implementation of the gRPC client instead. Requires http2 (Node 8+).\n      if (semver.gte(process.version, '8.13.0') && !!process.env.GOOGLE_CLOUD_USE_GRPC_JS) {\n        this.grpc = require('@grpc/grpc-js');\n        this.grpc.isLegacy = false;\n        this.grpcVersion = require('@grpc/grpc-js/package.json').version;\n      } else {\n        this.grpc = require('grpc');\n        this.grpc.isLegacy = true;\n        this.grpcVersion = require('grpc/package.json').version;\n      }\n    }\n    this.grpcProtoLoader = require('@grpc/proto-loader');\n  }\n  /**\n   * Creates a gRPC credentials. It asks the auth data if necessary.\n   * @private\n   * @param {Object} opts - options values for configuring credentials.\n   * @param {Object=} opts.sslCreds - when specified, this is used instead\n   *   of default channel credentials.\n   * @return {Promise} The promise which will be resolved to the gRPC credential.\n   */\n  _getCredentials(opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (opts.sslCreds) {\n        return opts.sslCreds;\n      }\n      const grpc = this.grpc;\n      const sslCreds = grpc.credentials.createSsl();\n      const client = yield this.auth.getClient();\n      const credentials = grpc.credentials.combineChannelCredentials(sslCreds, grpc.credentials.createFromGoogleCredential(client));\n      return credentials;\n    });\n  }\n  /**\n   * Loads the gRPC service from the proto file at the given path and with the\n   * given options.\n   * @param filename The path to the proto file.\n   * @param options Options for loading the proto file.\n   */\n  loadFromProto(filename, options) {\n    const packageDef = grpcProtoLoaderTypes.loadSync(filename, options);\n    return this.grpc.loadPackageDefinition(packageDef);\n  }\n  /**\n   * Load grpc proto service from a filename hooking in googleapis common protos\n   * when necessary. Uses legacy grpc.loadObject.\n   * @param {String} protoPath - The directory to search for the protofile.\n   * @param {String} filename - The filename of the proto to be loaded.\n   * @return {Object<string, *>} The gRPC loaded result (the toplevel namespace\n   *   object).\n   */\n  loadProtoLegacy(protoPath, filename) {\n    const resolvedPath = GrpcClient._resolveFile(protoPath, filename);\n    const retval = this.grpc.loadObject(protobuf.loadSync(resolvedPath, new GoogleProtoFilesRoot()));\n    return retval;\n  }\n  /**\n   * Load grpc proto service from a filename hooking in googleapis common protos\n   * when necessary. Uses the new shiny @grpc/proto-loader.\n   * @param {String} protoPath - The directory to search for the protofile.\n   * @param {String} filename - The filename of the proto to be loaded.\n   * @return {Object<string, *>} The gRPC loaded result (the toplevel namespace\n   *   object).\n   */\n  loadProtoGrpcJs(protoPath, filename) {\n    // This set of @grpc/proto-loader options\n    // 'closely approximates the existing behavior of grpc.load'\n    const includeDirs = INCLUDE_DIRS.slice();\n    includeDirs.unshift(protoPath);\n    const options = {\n      keepCase: false,\n      longs: String,\n      enums: String,\n      defaults: true,\n      oneofs: true,\n      includeDirs\n    };\n    return this.loadFromProto(filename, options);\n  }\n  /**\n   * Load grpc proto service from a filename hooking in googleapis common protos\n   * when necessary. Can use either legacy grpc.loadProto, or new\n   * @grpc/proto-loader, depending on which gRPC backend is used.\n   * @param {String} protoPath - The directory to search for the protofile.\n   * @param {String} filename - The filename of the proto to be loaded.\n   * @return {Object<string, *>} The gRPC loaded result (the toplevel namespace\n   *   object).\n   */\n  loadProto(protoPath, filename) {\n    return this.grpc.isLegacy ? this.loadProtoLegacy(protoPath, filename) : this.loadProtoGrpcJs(protoPath, filename);\n  }\n  static _resolveFile(protoPath, filename) {\n    if (fs.existsSync(path.join(protoPath, filename))) {\n      return path.join(protoPath, filename);\n    } else if (COMMON_PROTO_FILES.indexOf(filename) > -1) {\n      return path.join(googleProtoFilesDir, filename);\n    }\n    throw new Error(filename + ' could not be found in ' + protoPath);\n  }\n  metadataBuilder(headers) {\n    const Metadata = this.grpc.Metadata;\n    const baseMetadata = new Metadata();\n    // tslint:disable-next-line forin\n    for (const key in headers) {\n      const value = headers[key];\n      if (Array.isArray(value)) {\n        value.forEach(v => baseMetadata.add(key, v));\n      } else {\n        baseMetadata.set(key, `${value}`);\n      }\n    }\n    return function buildMetadata(abTests, moreHeaders) {\n      // TODO: bring the A/B testing info into the metadata.\n      let copied = false;\n      let metadata = baseMetadata;\n      if (moreHeaders) {\n        for (const key in moreHeaders) {\n          if (key.toLowerCase() !== 'x-goog-api-client' && moreHeaders.hasOwnProperty(key)) {\n            if (!copied) {\n              copied = true;\n              metadata = metadata.clone();\n            }\n            const value = moreHeaders[key];\n            if (Array.isArray(value)) {\n              value.forEach(v => metadata.add(key, v));\n            } else {\n              metadata.set(key, `${value}`);\n            }\n          }\n        }\n      }\n      return metadata;\n    };\n  }\n  /**\n   * A wrapper of {@link constructSettings} function under the gRPC context.\n   *\n   * Most of parameters are common among constructSettings, please take a look.\n   * @param {string} serviceName - The fullly-qualified name of the service.\n   * @param {Object} clientConfig - A dictionary of the client config.\n   * @param {Object} configOverrides - A dictionary of overriding configs.\n   * @param {Object} headers - A dictionary of additional HTTP header name to\n   *   its value.\n   * @return {Object} A mapping of method names to CallSettings.\n   */\n  constructSettings(serviceName, clientConfig, configOverrides, headers) {\n    return gax.constructSettings(serviceName, clientConfig, configOverrides, this.grpc.status, {\n      metadataBuilder: this.metadataBuilder(headers)\n    }, this.promise);\n  }\n  /**\n   * Creates a gRPC stub with current gRPC and auth.\n   * @param {function} CreateStub - The constructor function of the stub.\n   * @param {Object} options - The optional arguments to customize\n   *   gRPC connection. This options will be passed to the constructor of\n   *   gRPC client too.\n   * @param {string} options.servicePath - The name of the server of the service.\n   * @param {number} options.port - The port of the service.\n   * @param {grpcTypes.ClientCredentials=} options.sslCreds - The credentials to be used\n   *   to set up gRPC connection.\n   * @return {Promise} A promse which resolves to a gRPC stub instance.\n   */\n  // tslint:disable-next-line variable-name\n  createStub(CreateStub, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const serviceAddress = options.servicePath + ':' + options.port;\n      const creds = yield this._getCredentials(options);\n      const grpcOptions = {};\n      Object.keys(options).forEach(key => {\n        if (key.indexOf('grpc.') === 0) {\n          grpcOptions[key] = options[key];\n        }\n      });\n      const apiConfigDefinition = options['grpc_gcp.apiConfig'];\n      if (apiConfigDefinition) {\n        const apiConfig = grpcGcp.createGcpApiConfig(apiConfigDefinition);\n        grpcOptions['channelFactoryOverride'] = grpcGcp.gcpChannelFactoryOverride;\n        grpcOptions['callInvocationTransformer'] = grpcGcp.gcpCallInvocationTransformer;\n        grpcOptions['gcpApiConfig'] = apiConfig;\n      }\n      const stub = new CreateStub(serviceAddress, creds, grpcOptions);\n      return stub;\n    });\n  }\n  /**\n   * Creates a 'bytelength' function for a given proto message class.\n   *\n   * See {@link BundleDescriptor} about the meaning of the return value.\n   *\n   * @param {function} message - a constructor function that is generated by\n   *   protobuf.js. Assumes 'encoder' field in the message.\n   * @return {function(Object):number} - a function to compute the byte length\n   *   for an object.\n   */\n  static createByteLengthFunction(message) {\n    return function getByteLength(obj) {\n      return message.encode(obj).finish().length;\n    };\n  }\n}\nexports.GrpcClient = GrpcClient;\nclass GoogleProtoFilesRoot extends protobuf.Root {\n  constructor(...args) {\n    super(...args);\n  }\n  // Causes the loading of an included proto to check if it is a common\n  // proto. If it is a common proto, use the google-proto-files proto.\n  resolvePath(originPath, includePath) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n    // Fully qualified paths don't need to be resolved.\n    if (path.isAbsolute(includePath)) {\n      if (!fs.existsSync(includePath)) {\n        throw new Error('The include `' + includePath + '` was not found.');\n      }\n      return includePath;\n    }\n    if (COMMON_PROTO_FILES.indexOf(includePath) > -1) {\n      return path.join(googleProtoFilesDir, includePath);\n    }\n    return GoogleProtoFilesRoot._findIncludePath(originPath, includePath);\n  }\n  static _findIncludePath(originPath, includePath) {\n    originPath = path.normalize(originPath);\n    includePath = path.normalize(includePath);\n    let current = originPath;\n    let found = fs.existsSync(path.join(current, includePath));\n    while (!found && current.length > 0) {\n      current = current.substring(0, current.lastIndexOf(path.sep));\n      found = fs.existsSync(path.join(current, includePath));\n    }\n    if (!found) {\n      throw new Error('The include `' + includePath + '` was not found.');\n    }\n    return path.join(current, includePath);\n  }\n}\nexports.GoogleProtoFilesRoot = GoogleProtoFilesRoot;","map":{"version":3,"names":["require","grpcProtoLoaderTypes","fs","google_auth_library_1","google_proto_files_1","grpcTypes","grpcGcp","path","protobuf","semver","walk","gax","googleProtoFilesDir","normalize","getProtoPath","INCLUDE_DIRS","push","COMMON_PROTO_DIRS","join","map","dir","COMMON_PROTO_FILES","sync","filter","f","extname","substring","length","reduce","a","c","concat","ClientStub","Client","exports","GrpcClient","constructor","options","auth","GoogleAuth","promise","Promise","grpc","grpcVersion","gte","process","version","env","GOOGLE_CLOUD_USE_GRPC_JS","isLegacy","grpcProtoLoader","_getCredentials","opts","sslCreds","credentials","createSsl","client","getClient","combineChannelCredentials","createFromGoogleCredential","loadFromProto","filename","packageDef","loadSync","loadPackageDefinition","loadProtoLegacy","protoPath","resolvedPath","_resolveFile","retval","loadObject","GoogleProtoFilesRoot","loadProtoGrpcJs","includeDirs","slice","unshift","keepCase","longs","String","enums","defaults","oneofs","loadProto","existsSync","indexOf","Error","metadataBuilder","headers","Metadata","baseMetadata","key","value","Array","isArray","forEach","v","add","set","buildMetadata","abTests","moreHeaders","copied","metadata","toLowerCase","hasOwnProperty","clone","constructSettings","serviceName","clientConfig","configOverrides","status","createStub","CreateStub","serviceAddress","servicePath","port","creds","grpcOptions","Object","keys","apiConfigDefinition","apiConfig","createGcpApiConfig","gcpChannelFactoryOverride","gcpCallInvocationTransformer","stub","createByteLengthFunction","message","getByteLength","obj","encode","finish","Root","args","resolvePath","originPath","includePath","isAbsolute","_findIncludePath","current","found","lastIndexOf","sep"],"sources":["../../src/grpc.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}