{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*!\n * @module common/operation\n */\nconst pify = require(\"pify\");\nconst service_object_1 = require(\"./service-object\");\n// tslint:disable-next-line no-any\nclass Operation extends service_object_1.ServiceObject {\n  /**\n   * An Operation object allows you to interact with APIs that take longer to\n   * process things.\n   *\n   * @constructor\n   * @alias module:common/operation\n   *\n   * @param {object} config - Configuration object.\n   * @param {module:common/service|module:common/serviceObject|module:common/grpcService|module:common/grpcServiceObject} config.parent - The parent object.\n   */\n  constructor(config) {\n    const methods = {\n      /**\n       * Checks to see if an operation exists.\n       */\n      exists: true,\n      /**\n       * Retrieves the operation.\n       */\n      get: true,\n      /**\n       * Retrieves metadata for the operation.\n       */\n      getMetadata: {\n        reqOpts: {\n          name: config.id\n        }\n      }\n    };\n    config = Object.assign({\n      baseUrl: ''\n    }, config);\n    // tslint:disable-next-line:no-any\n    config.methods = config.methods || methods;\n    super(config);\n    this.completeListeners = 0;\n    this.hasActiveListeners = false;\n    this.listenForEvents_();\n  }\n  /**\n   * Wraps the `complete` and `error` events in a Promise.\n   *\n   * @return {promise}\n   */\n  promise() {\n    return new this.Promise((resolve, reject) => {\n      this.on('error', reject).on('complete', metadata => {\n        resolve([metadata]);\n      });\n    });\n  }\n  /**\n   * Begin listening for events on the operation. This method keeps track of how\n   * many \"complete\" listeners are registered and removed, making sure polling\n   * is handled automatically.\n   *\n   * As long as there is one active \"complete\" listener, the connection is open.\n   * When there are no more listeners, the polling stops.\n   *\n   * @private\n   */\n  listenForEvents_() {\n    this.on('newListener', event => {\n      if (event === 'complete') {\n        this.completeListeners++;\n        if (!this.hasActiveListeners) {\n          this.hasActiveListeners = true;\n          this.startPolling_();\n        }\n      }\n    });\n    this.on('removeListener', event => {\n      if (event === 'complete' && --this.completeListeners === 0) {\n        this.hasActiveListeners = false;\n      }\n    });\n  }\n  /**\n   * Poll for a status update. Returns null for an incomplete\n   * status, and metadata for a complete status.\n   *\n   * @private\n   */\n  poll_(callback) {\n    this.getMetadata((err, body) => {\n      if (err || body.error) {\n        callback(err || body.error);\n        return;\n      }\n      if (!body.done) {\n        callback(null);\n        return;\n      }\n      callback(null, body);\n    });\n  }\n  /**\n   * Poll `getMetadata` to check the operation's status. This runs a loop to\n   * ping the API on an interval.\n   *\n   * Note: This method is automatically called once a \"complete\" event handler\n   * is registered on the operation.\n   *\n   * @private\n   */\n  startPolling_() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.hasActiveListeners) {\n        return;\n      }\n      try {\n        const metadata = yield pify(this.poll_.bind(this))();\n        if (!metadata) {\n          setTimeout(this.startPolling_.bind(this), 500);\n          return;\n        }\n        this.emit('complete', metadata);\n      } catch (err) {\n        this.emit('error', err);\n      }\n    });\n  }\n}\nexports.Operation = Operation;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","pify","require","service_object_1","Operation","ServiceObject","constructor","config","methods","exists","get","getMetadata","reqOpts","name","id","assign","baseUrl","completeListeners","hasActiveListeners","listenForEvents_","promise","on","metadata","event","startPolling_","poll_","callback","err","body","error","bind","setTimeout","emit"],"sources":["/var/www/html/project/Dash_Vuexy-master/node_modules/@google-cloud/common/build/src/operation.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*!\n * @module common/operation\n */\nconst pify = require(\"pify\");\nconst service_object_1 = require(\"./service-object\");\n// tslint:disable-next-line no-any\nclass Operation extends service_object_1.ServiceObject {\n    /**\n     * An Operation object allows you to interact with APIs that take longer to\n     * process things.\n     *\n     * @constructor\n     * @alias module:common/operation\n     *\n     * @param {object} config - Configuration object.\n     * @param {module:common/service|module:common/serviceObject|module:common/grpcService|module:common/grpcServiceObject} config.parent - The parent object.\n     */\n    constructor(config) {\n        const methods = {\n            /**\n             * Checks to see if an operation exists.\n             */\n            exists: true,\n            /**\n             * Retrieves the operation.\n             */\n            get: true,\n            /**\n             * Retrieves metadata for the operation.\n             */\n            getMetadata: {\n                reqOpts: {\n                    name: config.id,\n                },\n            },\n        };\n        config = Object.assign({\n            baseUrl: '',\n        }, config);\n        // tslint:disable-next-line:no-any\n        config.methods = (config.methods || methods);\n        super(config);\n        this.completeListeners = 0;\n        this.hasActiveListeners = false;\n        this.listenForEvents_();\n    }\n    /**\n     * Wraps the `complete` and `error` events in a Promise.\n     *\n     * @return {promise}\n     */\n    promise() {\n        return new this.Promise((resolve, reject) => {\n            this.on('error', reject).on('complete', (metadata) => {\n                resolve([metadata]);\n            });\n        });\n    }\n    /**\n     * Begin listening for events on the operation. This method keeps track of how\n     * many \"complete\" listeners are registered and removed, making sure polling\n     * is handled automatically.\n     *\n     * As long as there is one active \"complete\" listener, the connection is open.\n     * When there are no more listeners, the polling stops.\n     *\n     * @private\n     */\n    listenForEvents_() {\n        this.on('newListener', (event) => {\n            if (event === 'complete') {\n                this.completeListeners++;\n                if (!this.hasActiveListeners) {\n                    this.hasActiveListeners = true;\n                    this.startPolling_();\n                }\n            }\n        });\n        this.on('removeListener', (event) => {\n            if (event === 'complete' && --this.completeListeners === 0) {\n                this.hasActiveListeners = false;\n            }\n        });\n    }\n    /**\n     * Poll for a status update. Returns null for an incomplete\n     * status, and metadata for a complete status.\n     *\n     * @private\n     */\n    poll_(callback) {\n        this.getMetadata((err, body) => {\n            if (err || body.error) {\n                callback(err || body.error);\n                return;\n            }\n            if (!body.done) {\n                callback(null);\n                return;\n            }\n            callback(null, body);\n        });\n    }\n    /**\n     * Poll `getMetadata` to check the operation's status. This runs a loop to\n     * ping the API on an interval.\n     *\n     * Note: This method is automatically called once a \"complete\" event handler\n     * is registered on the operation.\n     *\n     * @private\n     */\n    startPolling_() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.hasActiveListeners) {\n                return;\n            }\n            try {\n                const metadata = yield pify(this.poll_.bind(this))();\n                if (!metadata) {\n                    setTimeout(this.startPolling_.bind(this), 500);\n                    return;\n                }\n                this.emit('complete', metadata);\n            }\n            catch (err) {\n                this.emit('error', err);\n            }\n        });\n    }\n}\nexports.Operation = Operation;\n//# sourceMappingURL=operation.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}