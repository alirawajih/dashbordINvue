{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst querystring = require(\"querystring\");\nconst stream = require(\"stream\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst isbrowser_1 = require(\"../isbrowser\");\nconst messages = require(\"../messages\");\nconst authclient_1 = require(\"./authclient\");\nconst loginticket_1 = require(\"./loginticket\");\nvar CodeChallengeMethod;\n(function (CodeChallengeMethod) {\n  CodeChallengeMethod[\"Plain\"] = \"plain\";\n  CodeChallengeMethod[\"S256\"] = \"S256\";\n})(CodeChallengeMethod = exports.CodeChallengeMethod || (exports.CodeChallengeMethod = {}));\nvar CertificateFormat;\n(function (CertificateFormat) {\n  CertificateFormat[\"PEM\"] = \"PEM\";\n  CertificateFormat[\"JWK\"] = \"JWK\";\n})(CertificateFormat = exports.CertificateFormat || (exports.CertificateFormat = {}));\nclass OAuth2Client extends authclient_1.AuthClient {\n  constructor(optionsOrClientId, clientSecret, redirectUri) {\n    super();\n    this.certificateCache = {};\n    this.certificateExpiry = null;\n    this.certificateCacheFormat = CertificateFormat.PEM;\n    this.refreshTokenPromises = new Map();\n    const opts = optionsOrClientId && typeof optionsOrClientId === 'object' ? optionsOrClientId : {\n      clientId: optionsOrClientId,\n      clientSecret,\n      redirectUri\n    };\n    this._clientId = opts.clientId;\n    this._clientSecret = opts.clientSecret;\n    this.redirectUri = opts.redirectUri;\n    this.eagerRefreshThresholdMillis = opts.eagerRefreshThresholdMillis || 5 * 60 * 1000;\n  }\n  /**\n   * Generates URL for consent page landing.\n   * @param opts Options.\n   * @return URL to consent page.\n   */\n  generateAuthUrl(opts = {}) {\n    if (opts.code_challenge_method && !opts.code_challenge) {\n      throw new Error('If a code_challenge_method is provided, code_challenge must be included.');\n    }\n    opts.response_type = opts.response_type || 'code';\n    opts.client_id = opts.client_id || this._clientId;\n    opts.redirect_uri = opts.redirect_uri || this.redirectUri;\n    // Allow scopes to be passed either as array or a string\n    if (opts.scope instanceof Array) {\n      opts.scope = opts.scope.join(' ');\n    }\n    const rootUrl = OAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_;\n    return rootUrl + '?' + querystring.stringify(opts);\n  }\n  generateCodeVerifier() {\n    // To make the code compatible with browser SubtleCrypto we need to make\n    // this method async.\n    throw new Error('generateCodeVerifier is removed, please use generateCodeVerifierAsync instead.');\n  }\n  /**\n   * Convenience method to automatically generate a code_verifier, and it's\n   * resulting SHA256. If used, this must be paired with a S256\n   * code_challenge_method.\n   */\n  generateCodeVerifierAsync() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // base64 encoding uses 6 bits per character, and we want to generate128\n      // characters. 6*128/8 = 96.\n      const crypto = crypto_1.createCrypto();\n      const randomString = crypto.randomBytesBase64(96);\n      // The valid characters in the code_verifier are [A-Z]/[a-z]/[0-9]/\n      // \"-\"/\".\"/\"_\"/\"~\". Base64 encoded strings are pretty close, so we're just\n      // swapping out a few chars.\n      const codeVerifier = randomString.replace(/\\+/g, '~').replace(/=/g, '_').replace(/\\//g, '-');\n      // Generate the base64 encoded SHA256\n      const unencodedCodeChallenge = yield crypto.sha256DigestBase64(codeVerifier);\n      // We need to use base64UrlEncoding instead of standard base64\n      const codeChallenge = unencodedCodeChallenge.split('=')[0].replace(/\\+/g, '-').replace(/\\//g, '_');\n      return {\n        codeVerifier,\n        codeChallenge\n      };\n    });\n  }\n  getToken(codeOrOptions, callback) {\n    const options = typeof codeOrOptions === 'string' ? {\n      code: codeOrOptions\n    } : codeOrOptions;\n    if (callback) {\n      this.getTokenAsync(options).then(r => callback(null, r.tokens, r.res), e => callback(e, null, e.response));\n    } else {\n      return this.getTokenAsync(options);\n    }\n  }\n  getTokenAsync(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;\n      const values = {\n        code: options.code,\n        client_id: options.client_id || this._clientId,\n        client_secret: this._clientSecret,\n        redirect_uri: options.redirect_uri || this.redirectUri,\n        grant_type: 'authorization_code',\n        code_verifier: options.codeVerifier\n      };\n      const res = yield this.transporter.request({\n        method: 'POST',\n        url,\n        data: querystring.stringify(values),\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      const tokens = res.data;\n      if (res.data && res.data.expires_in) {\n        tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n        delete tokens.expires_in;\n      }\n      this.emit('tokens', tokens);\n      return {\n        tokens,\n        res\n      };\n    });\n  }\n  /**\n   * Refreshes the access token.\n   * @param refresh_token Existing refresh token.\n   * @private\n   */\n  refreshToken(refreshToken) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!refreshToken) {\n        return this.refreshTokenNoCache(refreshToken);\n      }\n      // If a request to refresh using the same token has started,\n      // return the same promise.\n      if (this.refreshTokenPromises.has(refreshToken)) {\n        return this.refreshTokenPromises.get(refreshToken);\n      }\n      const p = this.refreshTokenNoCache(refreshToken).then(r => {\n        this.refreshTokenPromises.delete(refreshToken);\n        return r;\n      }, e => {\n        this.refreshTokenPromises.delete(refreshToken);\n        throw e;\n      });\n      this.refreshTokenPromises.set(refreshToken, p);\n      return p;\n    });\n  }\n  refreshTokenNoCache(refreshToken) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;\n      const data = {\n        refresh_token: refreshToken,\n        client_id: this._clientId,\n        client_secret: this._clientSecret,\n        grant_type: 'refresh_token'\n      };\n      // request for new token\n      const res = yield this.transporter.request({\n        method: 'POST',\n        url,\n        data: querystring.stringify(data),\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      const tokens = res.data;\n      // TODO: de-duplicate this code from a few spots\n      if (res.data && res.data.expires_in) {\n        tokens.expiry_date = new Date().getTime() + res.data.expires_in * 1000;\n        delete tokens.expires_in;\n      }\n      this.emit('tokens', tokens);\n      return {\n        tokens,\n        res\n      };\n    });\n  }\n  refreshAccessToken(callback) {\n    messages.warn(messages.REFRESH_ACCESS_TOKEN_DEPRECATED);\n    if (callback) {\n      this.refreshAccessTokenAsync().then(r => callback(null, r.credentials, r.res), callback);\n    } else {\n      return this.refreshAccessTokenAsync();\n    }\n  }\n  refreshAccessTokenAsync() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.credentials.refresh_token) {\n        throw new Error('No refresh token is set.');\n      }\n      const r = yield this.refreshToken(this.credentials.refresh_token);\n      const tokens = r.tokens;\n      tokens.refresh_token = this.credentials.refresh_token;\n      this.credentials = tokens;\n      return {\n        credentials: this.credentials,\n        res: r.res\n      };\n    });\n  }\n  getAccessToken(callback) {\n    if (callback) {\n      this.getAccessTokenAsync().then(r => callback(null, r.token, r.res), callback);\n    } else {\n      return this.getAccessTokenAsync();\n    }\n  }\n  getAccessTokenAsync() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const shouldRefresh = !this.credentials.access_token || this.isTokenExpiring();\n      if (shouldRefresh) {\n        if (!this.credentials.refresh_token) {\n          throw new Error('No refresh token is set.');\n        }\n        const r = yield this.refreshAccessTokenAsync();\n        if (!r.credentials || r.credentials && !r.credentials.access_token) {\n          throw new Error('Could not refresh access token.');\n        }\n        return {\n          token: r.credentials.access_token,\n          res: r.res\n        };\n      } else {\n        return {\n          token: this.credentials.access_token\n        };\n      }\n    });\n  }\n  getRequestMetadata(url, callback) {\n    messages.warn(messages.OAUTH_GET_REQUEST_METADATA_DEPRECATED);\n    if (callback) {\n      this.getRequestMetadataAsync(url).then(r => callback(null, r.headers, r.res), callback);\n    } else {\n      return this.getRequestMetadataAsync();\n    }\n  }\n  /**\n   * The main authentication interface.  It takes an optional url which when\n   * present is the endpoint being accessed, and returns a Promise which\n   * resolves with authorization header fields.\n   *\n   * In OAuth2Client, the result has the form:\n   * { Authorization: 'Bearer <access_token_value>' }\n   * @param url The optional url being authorized\n   */\n  getRequestHeaders(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const res = yield this.getRequestMetadataAsync(url);\n      return res.headers;\n    });\n  }\n  getRequestMetadataAsync(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const thisCreds = this.credentials;\n      if (!thisCreds.access_token && !thisCreds.refresh_token && !this.apiKey) {\n        throw new Error('No access, refresh token or API key is set.');\n      }\n      if (thisCreds.access_token && !this.isTokenExpiring()) {\n        thisCreds.token_type = thisCreds.token_type || 'Bearer';\n        const headers = {\n          Authorization: thisCreds.token_type + ' ' + thisCreds.access_token\n        };\n        return {\n          headers\n        };\n      }\n      if (this.apiKey) {\n        return {\n          headers: {}\n        };\n      }\n      let r = null;\n      let tokens = null;\n      try {\n        r = yield this.refreshToken(thisCreds.refresh_token);\n        tokens = r.tokens;\n      } catch (err) {\n        const e = err;\n        if (e.response && (e.response.status === 403 || e.response.status === 404)) {\n          e.message = 'Could not refresh access token.';\n        }\n        throw e;\n      }\n      const credentials = this.credentials;\n      credentials.token_type = credentials.token_type || 'Bearer';\n      tokens.refresh_token = credentials.refresh_token;\n      this.credentials = tokens;\n      const headers = {\n        Authorization: credentials.token_type + ' ' + tokens.access_token\n      };\n      return {\n        headers,\n        res: r.res\n      };\n    });\n  }\n  /**\n   * Generates an URL to revoke the given token.\n   * @param token The existing token to be revoked.\n   */\n  static getRevokeTokenUrl(token) {\n    const parameters = querystring.stringify({\n      token\n    });\n    return `${OAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_}?${parameters}`;\n  }\n  revokeToken(token, callback) {\n    const opts = {\n      url: OAuth2Client.getRevokeTokenUrl(token),\n      method: 'POST'\n    };\n    if (callback) {\n      this.transporter.request(opts).then(r => callback(null, r), callback);\n    } else {\n      return this.transporter.request(opts);\n    }\n  }\n  revokeCredentials(callback) {\n    if (callback) {\n      this.revokeCredentialsAsync().then(res => callback(null, res), callback);\n    } else {\n      return this.revokeCredentialsAsync();\n    }\n  }\n  revokeCredentialsAsync() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const token = this.credentials.access_token;\n      this.credentials = {};\n      if (token) {\n        return this.revokeToken(token);\n      } else {\n        throw new Error('No access token to revoke.');\n      }\n    });\n  }\n  request(opts, callback) {\n    if (callback) {\n      this.requestAsync(opts).then(r => callback(null, r), e => {\n        return callback(e, e.response);\n      });\n    } else {\n      return this.requestAsync(opts);\n    }\n  }\n  requestAsync(opts, retry = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let r2;\n      try {\n        const r = yield this.getRequestMetadataAsync(opts.url);\n        if (r.headers && r.headers.Authorization) {\n          opts.headers = opts.headers || {};\n          opts.headers.Authorization = r.headers.Authorization;\n        }\n        if (this.apiKey) {\n          opts.params = Object.assign(opts.params || {}, {\n            key: this.apiKey\n          });\n        }\n        r2 = yield this.transporter.request(opts);\n      } catch (e) {\n        const res = e.response;\n        if (res) {\n          const statusCode = res.status;\n          // Retry the request for metadata if the following criteria are true:\n          // - We haven't already retried.  It only makes sense to retry once.\n          // - The response was a 401 or a 403\n          // - The request didn't send a readableStream\n          // - An access_token and refresh_token were available, but no\n          //   expiry_date was availabe. This can happen when developers stash\n          //   the access_token and refresh_token for later use, but the\n          //   access_token fails on the first try because it's expired.\n          const mayRequireRefresh = this.credentials && this.credentials.access_token && this.credentials.refresh_token && !this.credentials.expiry_date;\n          const isReadableStream = res.config.data instanceof stream.Readable;\n          const isAuthErr = statusCode === 401 || statusCode === 403;\n          if (!retry && isAuthErr && !isReadableStream && mayRequireRefresh) {\n            yield this.refreshAccessTokenAsync();\n            return this.requestAsync(opts, true);\n          }\n        }\n        throw e;\n      }\n      return r2;\n    });\n  }\n  verifyIdToken(options, callback) {\n    // This function used to accept two arguments instead of an options object.\n    // Check the types to help users upgrade with less pain.\n    // This check can be removed after a 2.0 release.\n    if (callback && typeof callback !== 'function') {\n      throw new Error('This method accepts an options object as the first parameter, which includes the idToken, audience, and maxExpiry.');\n    }\n    if (callback) {\n      this.verifyIdTokenAsync(options).then(r => callback(null, r), callback);\n    } else {\n      return this.verifyIdTokenAsync(options);\n    }\n  }\n  verifyIdTokenAsync(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!options.idToken) {\n        throw new Error('The verifyIdToken method requires an ID Token');\n      }\n      const response = yield this.getFederatedSignonCertsAsync();\n      const login = yield this.verifySignedJwtWithCertsAsync(options.idToken, response.certs, options.audience, OAuth2Client.ISSUERS_, options.maxExpiry);\n      return login;\n    });\n  }\n  /**\n   * Obtains information about the provisioned access token.  Especially useful\n   * if you want to check the scopes that were provisioned to a given token.\n   *\n   * @param accessToken Required.  The Access Token for which you want to get\n   * user info.\n   */\n  getTokenInfo(accessToken) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data\n      } = yield this.transporter.request({\n        method: 'GET',\n        url: OAuth2Client.GOOGLE_TOKEN_INFO_URL,\n        params: {\n          access_token: accessToken\n        }\n      });\n      const info = Object.assign({\n        expiry_date: new Date().getTime() + data.expires_in * 1000,\n        scopes: data.scope.split(' ')\n      }, data);\n      delete info.expires_in;\n      delete info.scope;\n      return info;\n    });\n  }\n  getFederatedSignonCerts(callback) {\n    if (callback) {\n      this.getFederatedSignonCertsAsync().then(r => callback(null, r.certs, r.res), callback);\n    } else {\n      return this.getFederatedSignonCertsAsync();\n    }\n  }\n  getFederatedSignonCertsAsync() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const nowTime = new Date().getTime();\n      const format = isbrowser_1.isBrowser() ? CertificateFormat.JWK : CertificateFormat.PEM;\n      if (this.certificateExpiry && nowTime < this.certificateExpiry.getTime() && this.certificateCacheFormat === format) {\n        return {\n          certs: this.certificateCache,\n          format\n        };\n      }\n      let res;\n      let url;\n      switch (format) {\n        case CertificateFormat.PEM:\n          url = OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_;\n          break;\n        case CertificateFormat.JWK:\n          url = OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_;\n          break;\n        default:\n          throw new Error(`Unsupported certificate format ${format}`);\n      }\n      try {\n        res = yield this.transporter.request({\n          url\n        });\n      } catch (e) {\n        throw new Error('Failed to retrieve verification certificates: ' + e);\n      }\n      const cacheControl = res ? res.headers['cache-control'] : undefined;\n      let cacheAge = -1;\n      if (cacheControl) {\n        const pattern = new RegExp('max-age=([0-9]*)');\n        const regexResult = pattern.exec(cacheControl);\n        if (regexResult && regexResult.length === 2) {\n          // Cache results with max-age (in seconds)\n          cacheAge = Number(regexResult[1]) * 1000; // milliseconds\n        }\n      }\n\n      let certificates = {};\n      switch (format) {\n        case CertificateFormat.PEM:\n          certificates = res.data;\n          break;\n        case CertificateFormat.JWK:\n          for (const key of res.data.keys) {\n            certificates[key.kid] = key;\n          }\n          break;\n        default:\n          throw new Error(`Unsupported certificate format ${format}`);\n      }\n      const now = new Date();\n      this.certificateExpiry = cacheAge === -1 ? null : new Date(now.getTime() + cacheAge);\n      this.certificateCache = certificates;\n      this.certificateCacheFormat = format;\n      return {\n        certs: certificates,\n        format,\n        res\n      };\n    });\n  }\n  verifySignedJwtWithCerts() {\n    // To make the code compatible with browser SubtleCrypto we need to make\n    // this method async.\n    throw new Error('verifySignedJwtWithCerts is removed, please use verifySignedJwtWithCertsAsync instead.');\n  }\n  /**\n   * Verify the id token is signed with the correct certificate\n   * and is from the correct audience.\n   * @param jwt The jwt to verify (The ID Token in this case).\n   * @param certs The array of certs to test the jwt against.\n   * @param requiredAudience The audience to test the jwt against.\n   * @param issuers The allowed issuers of the jwt (Optional).\n   * @param maxExpiry The max expiry the certificate can be (Optional).\n   * @return Returns a promise resolving to LoginTicket on verification.\n   */\n  verifySignedJwtWithCertsAsync(jwt, certs, requiredAudience, issuers, maxExpiry) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const crypto = crypto_1.createCrypto();\n      if (!maxExpiry) {\n        maxExpiry = OAuth2Client.MAX_TOKEN_LIFETIME_SECS_;\n      }\n      const segments = jwt.split('.');\n      if (segments.length !== 3) {\n        throw new Error('Wrong number of segments in token: ' + jwt);\n      }\n      const signed = segments[0] + '.' + segments[1];\n      const signature = segments[2];\n      let envelope;\n      let payload;\n      try {\n        envelope = JSON.parse(crypto.decodeBase64StringUtf8(segments[0]));\n      } catch (err) {\n        throw new Error('Can\\'t parse token envelope: ' + segments[0]);\n      }\n      if (!envelope) {\n        throw new Error('Can\\'t parse token envelope: ' + segments[0]);\n      }\n      try {\n        payload = JSON.parse(crypto.decodeBase64StringUtf8(segments[1]));\n      } catch (err) {\n        throw new Error('Can\\'t parse token payload: ' + segments[0]);\n      }\n      if (!payload) {\n        throw new Error('Can\\'t parse token payload: ' + segments[1]);\n      }\n      if (!certs.hasOwnProperty(envelope.kid)) {\n        // If this is not present, then there's no reason to attempt verification\n        throw new Error('No pem found for envelope: ' + JSON.stringify(envelope));\n      }\n      const cert = certs[envelope.kid];\n      const verified = yield crypto.verify(cert, signed, signature);\n      if (!verified) {\n        throw new Error('Invalid token signature: ' + jwt);\n      }\n      if (!payload.iat) {\n        throw new Error('No issue time in token: ' + JSON.stringify(payload));\n      }\n      if (!payload.exp) {\n        throw new Error('No expiration time in token: ' + JSON.stringify(payload));\n      }\n      const iat = Number(payload.iat);\n      if (isNaN(iat)) throw new Error('iat field using invalid format');\n      const exp = Number(payload.exp);\n      if (isNaN(exp)) throw new Error('exp field using invalid format');\n      const now = new Date().getTime() / 1000;\n      if (exp >= now + maxExpiry) {\n        throw new Error('Expiration time too far in future: ' + JSON.stringify(payload));\n      }\n      const earliest = iat - OAuth2Client.CLOCK_SKEW_SECS_;\n      const latest = exp + OAuth2Client.CLOCK_SKEW_SECS_;\n      if (now < earliest) {\n        throw new Error('Token used too early, ' + now + ' < ' + earliest + ': ' + JSON.stringify(payload));\n      }\n      if (now > latest) {\n        throw new Error('Token used too late, ' + now + ' > ' + latest + ': ' + JSON.stringify(payload));\n      }\n      if (issuers && issuers.indexOf(payload.iss) < 0) {\n        throw new Error('Invalid issuer, expected one of [' + issuers + '], but got ' + payload.iss);\n      }\n      // Check the audience matches if we have one\n      if (typeof requiredAudience !== 'undefined' && requiredAudience !== null) {\n        const aud = payload.aud;\n        let audVerified = false;\n        // If the requiredAudience is an array, check if it contains token\n        // audience\n        if (requiredAudience.constructor === Array) {\n          audVerified = requiredAudience.indexOf(aud) > -1;\n        } else {\n          audVerified = aud === requiredAudience;\n        }\n        if (!audVerified) {\n          throw new Error('Wrong recipient, payload audience != requiredAudience');\n        }\n      }\n      return new loginticket_1.LoginTicket(envelope, payload);\n    });\n  }\n  /**\n   * Returns true if a token is expired or will expire within\n   * eagerRefreshThresholdMillismilliseconds.\n   * If there is no expiry time, assumes the token is not expired or expiring.\n   */\n  isTokenExpiring() {\n    const expiryDate = this.credentials.expiry_date;\n    return expiryDate ? expiryDate <= new Date().getTime() + this.eagerRefreshThresholdMillis : false;\n  }\n}\nOAuth2Client.GOOGLE_TOKEN_INFO_URL = 'https://oauth2.googleapis.com/tokeninfo';\n/**\n * The base URL for auth endpoints.\n */\nOAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_ = 'https://accounts.google.com/o/oauth2/v2/auth';\n/**\n * The base endpoint for token retrieval.\n */\nOAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_ = 'https://oauth2.googleapis.com/token';\n/**\n * The base endpoint to revoke tokens.\n */\nOAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_ = 'https://oauth2.googleapis.com/revoke';\n/**\n * Google Sign on certificates in PEM format.\n */\nOAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_ = 'https://www.googleapis.com/oauth2/v1/certs';\n/**\n * Google Sign on certificates in JWK format.\n */\nOAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_ = 'https://www.googleapis.com/oauth2/v3/certs';\n/**\n * Clock skew - five minutes in seconds\n */\nOAuth2Client.CLOCK_SKEW_SECS_ = 300;\n/**\n * Max Token Lifetime is one day in seconds\n */\nOAuth2Client.MAX_TOKEN_LIFETIME_SECS_ = 86400;\n/**\n * The allowed oauth token issuers.\n */\nOAuth2Client.ISSUERS_ = ['accounts.google.com', 'https://accounts.google.com'];\nexports.OAuth2Client = OAuth2Client;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","querystring","require","stream","crypto_1","isbrowser_1","messages","authclient_1","loginticket_1","CodeChallengeMethod","CertificateFormat","OAuth2Client","AuthClient","constructor","optionsOrClientId","clientSecret","redirectUri","certificateCache","certificateExpiry","certificateCacheFormat","PEM","refreshTokenPromises","Map","opts","clientId","_clientId","_clientSecret","eagerRefreshThresholdMillis","generateAuthUrl","code_challenge_method","code_challenge","Error","response_type","client_id","redirect_uri","scope","Array","join","rootUrl","GOOGLE_OAUTH2_AUTH_BASE_URL_","stringify","generateCodeVerifier","generateCodeVerifierAsync","crypto","createCrypto","randomString","randomBytesBase64","codeVerifier","replace","unencodedCodeChallenge","sha256DigestBase64","codeChallenge","split","getToken","codeOrOptions","callback","options","code","getTokenAsync","r","tokens","res","response","url","GOOGLE_OAUTH2_TOKEN_URL_","values","client_secret","grant_type","code_verifier","transporter","request","method","data","headers","expires_in","expiry_date","Date","getTime","emit","refreshToken","refreshTokenNoCache","has","get","p","delete","set","refresh_token","refreshAccessToken","warn","REFRESH_ACCESS_TOKEN_DEPRECATED","refreshAccessTokenAsync","credentials","getAccessToken","getAccessTokenAsync","token","shouldRefresh","access_token","isTokenExpiring","getRequestMetadata","OAUTH_GET_REQUEST_METADATA_DEPRECATED","getRequestMetadataAsync","getRequestHeaders","thisCreds","apiKey","token_type","Authorization","err","status","message","getRevokeTokenUrl","parameters","GOOGLE_OAUTH2_REVOKE_URL_","revokeToken","revokeCredentials","revokeCredentialsAsync","requestAsync","retry","r2","params","assign","key","statusCode","mayRequireRefresh","isReadableStream","config","Readable","isAuthErr","verifyIdToken","verifyIdTokenAsync","idToken","getFederatedSignonCertsAsync","login","verifySignedJwtWithCertsAsync","certs","audience","ISSUERS_","maxExpiry","getTokenInfo","accessToken","GOOGLE_TOKEN_INFO_URL","info","scopes","getFederatedSignonCerts","nowTime","format","isBrowser","JWK","GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_","GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_","cacheControl","undefined","cacheAge","pattern","RegExp","regexResult","exec","length","Number","certificates","keys","kid","now","verifySignedJwtWithCerts","jwt","requiredAudience","issuers","MAX_TOKEN_LIFETIME_SECS_","segments","signed","signature","envelope","payload","JSON","parse","decodeBase64StringUtf8","hasOwnProperty","cert","verified","verify","iat","exp","isNaN","earliest","CLOCK_SKEW_SECS_","latest","indexOf","iss","aud","audVerified","LoginTicket","expiryDate"],"sources":["/var/www/html/project/Dash_Vuexy-master/node_modules/google-auth-library/build/src/auth/oauth2client.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst querystring = require(\"querystring\");\nconst stream = require(\"stream\");\nconst crypto_1 = require(\"../crypto/crypto\");\nconst isbrowser_1 = require(\"../isbrowser\");\nconst messages = require(\"../messages\");\nconst authclient_1 = require(\"./authclient\");\nconst loginticket_1 = require(\"./loginticket\");\nvar CodeChallengeMethod;\n(function (CodeChallengeMethod) {\n    CodeChallengeMethod[\"Plain\"] = \"plain\";\n    CodeChallengeMethod[\"S256\"] = \"S256\";\n})(CodeChallengeMethod = exports.CodeChallengeMethod || (exports.CodeChallengeMethod = {}));\nvar CertificateFormat;\n(function (CertificateFormat) {\n    CertificateFormat[\"PEM\"] = \"PEM\";\n    CertificateFormat[\"JWK\"] = \"JWK\";\n})(CertificateFormat = exports.CertificateFormat || (exports.CertificateFormat = {}));\nclass OAuth2Client extends authclient_1.AuthClient {\n    constructor(optionsOrClientId, clientSecret, redirectUri) {\n        super();\n        this.certificateCache = {};\n        this.certificateExpiry = null;\n        this.certificateCacheFormat = CertificateFormat.PEM;\n        this.refreshTokenPromises = new Map();\n        const opts = (optionsOrClientId && typeof optionsOrClientId === 'object') ?\n            optionsOrClientId :\n            { clientId: optionsOrClientId, clientSecret, redirectUri };\n        this._clientId = opts.clientId;\n        this._clientSecret = opts.clientSecret;\n        this.redirectUri = opts.redirectUri;\n        this.eagerRefreshThresholdMillis =\n            opts.eagerRefreshThresholdMillis || 5 * 60 * 1000;\n    }\n    /**\n     * Generates URL for consent page landing.\n     * @param opts Options.\n     * @return URL to consent page.\n     */\n    generateAuthUrl(opts = {}) {\n        if (opts.code_challenge_method && !opts.code_challenge) {\n            throw new Error('If a code_challenge_method is provided, code_challenge must be included.');\n        }\n        opts.response_type = opts.response_type || 'code';\n        opts.client_id = opts.client_id || this._clientId;\n        opts.redirect_uri = opts.redirect_uri || this.redirectUri;\n        // Allow scopes to be passed either as array or a string\n        if (opts.scope instanceof Array) {\n            opts.scope = opts.scope.join(' ');\n        }\n        const rootUrl = OAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_;\n        return rootUrl + '?' + querystring.stringify(opts);\n    }\n    generateCodeVerifier() {\n        // To make the code compatible with browser SubtleCrypto we need to make\n        // this method async.\n        throw new Error('generateCodeVerifier is removed, please use generateCodeVerifierAsync instead.');\n    }\n    /**\n     * Convenience method to automatically generate a code_verifier, and it's\n     * resulting SHA256. If used, this must be paired with a S256\n     * code_challenge_method.\n     */\n    generateCodeVerifierAsync() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // base64 encoding uses 6 bits per character, and we want to generate128\n            // characters. 6*128/8 = 96.\n            const crypto = crypto_1.createCrypto();\n            const randomString = crypto.randomBytesBase64(96);\n            // The valid characters in the code_verifier are [A-Z]/[a-z]/[0-9]/\n            // \"-\"/\".\"/\"_\"/\"~\". Base64 encoded strings are pretty close, so we're just\n            // swapping out a few chars.\n            const codeVerifier = randomString.replace(/\\+/g, '~').replace(/=/g, '_').replace(/\\//g, '-');\n            // Generate the base64 encoded SHA256\n            const unencodedCodeChallenge = yield crypto.sha256DigestBase64(codeVerifier);\n            // We need to use base64UrlEncoding instead of standard base64\n            const codeChallenge = unencodedCodeChallenge.split('=')[0]\n                .replace(/\\+/g, '-')\n                .replace(/\\//g, '_');\n            return { codeVerifier, codeChallenge };\n        });\n    }\n    getToken(codeOrOptions, callback) {\n        const options = (typeof codeOrOptions === 'string') ?\n            { code: codeOrOptions } :\n            codeOrOptions;\n        if (callback) {\n            this.getTokenAsync(options).then(r => callback(null, r.tokens, r.res), e => callback(e, null, e.response));\n        }\n        else {\n            return this.getTokenAsync(options);\n        }\n    }\n    getTokenAsync(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const url = OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;\n            const values = {\n                code: options.code,\n                client_id: options.client_id || this._clientId,\n                client_secret: this._clientSecret,\n                redirect_uri: options.redirect_uri || this.redirectUri,\n                grant_type: 'authorization_code',\n                code_verifier: options.codeVerifier\n            };\n            const res = yield this.transporter.request({\n                method: 'POST',\n                url,\n                data: querystring.stringify(values),\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n            });\n            const tokens = res.data;\n            if (res.data && res.data.expires_in) {\n                tokens.expiry_date =\n                    ((new Date()).getTime() + (res.data.expires_in * 1000));\n                delete tokens.expires_in;\n            }\n            this.emit('tokens', tokens);\n            return { tokens, res };\n        });\n    }\n    /**\n     * Refreshes the access token.\n     * @param refresh_token Existing refresh token.\n     * @private\n     */\n    refreshToken(refreshToken) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!refreshToken) {\n                return this.refreshTokenNoCache(refreshToken);\n            }\n            // If a request to refresh using the same token has started,\n            // return the same promise.\n            if (this.refreshTokenPromises.has(refreshToken)) {\n                return this.refreshTokenPromises.get(refreshToken);\n            }\n            const p = this.refreshTokenNoCache(refreshToken)\n                .then(r => {\n                this.refreshTokenPromises.delete(refreshToken);\n                return r;\n            }, e => {\n                this.refreshTokenPromises.delete(refreshToken);\n                throw e;\n            });\n            this.refreshTokenPromises.set(refreshToken, p);\n            return p;\n        });\n    }\n    refreshTokenNoCache(refreshToken) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const url = OAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_;\n            const data = {\n                refresh_token: refreshToken,\n                client_id: this._clientId,\n                client_secret: this._clientSecret,\n                grant_type: 'refresh_token'\n            };\n            // request for new token\n            const res = yield this.transporter.request({\n                method: 'POST',\n                url,\n                data: querystring.stringify(data),\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' }\n            });\n            const tokens = res.data;\n            // TODO: de-duplicate this code from a few spots\n            if (res.data && res.data.expires_in) {\n                tokens.expiry_date =\n                    ((new Date()).getTime() + (res.data.expires_in * 1000));\n                delete tokens.expires_in;\n            }\n            this.emit('tokens', tokens);\n            return { tokens, res };\n        });\n    }\n    refreshAccessToken(callback) {\n        messages.warn(messages.REFRESH_ACCESS_TOKEN_DEPRECATED);\n        if (callback) {\n            this.refreshAccessTokenAsync().then(r => callback(null, r.credentials, r.res), callback);\n        }\n        else {\n            return this.refreshAccessTokenAsync();\n        }\n    }\n    refreshAccessTokenAsync() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.credentials.refresh_token) {\n                throw new Error('No refresh token is set.');\n            }\n            const r = yield this.refreshToken(this.credentials.refresh_token);\n            const tokens = r.tokens;\n            tokens.refresh_token = this.credentials.refresh_token;\n            this.credentials = tokens;\n            return { credentials: this.credentials, res: r.res };\n        });\n    }\n    getAccessToken(callback) {\n        if (callback) {\n            this.getAccessTokenAsync().then(r => callback(null, r.token, r.res), callback);\n        }\n        else {\n            return this.getAccessTokenAsync();\n        }\n    }\n    getAccessTokenAsync() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const shouldRefresh = !this.credentials.access_token || this.isTokenExpiring();\n            if (shouldRefresh) {\n                if (!this.credentials.refresh_token) {\n                    throw new Error('No refresh token is set.');\n                }\n                const r = yield this.refreshAccessTokenAsync();\n                if (!r.credentials || (r.credentials && !r.credentials.access_token)) {\n                    throw new Error('Could not refresh access token.');\n                }\n                return { token: r.credentials.access_token, res: r.res };\n            }\n            else {\n                return { token: this.credentials.access_token };\n            }\n        });\n    }\n    getRequestMetadata(url, callback) {\n        messages.warn(messages.OAUTH_GET_REQUEST_METADATA_DEPRECATED);\n        if (callback) {\n            this.getRequestMetadataAsync(url).then(r => callback(null, r.headers, r.res), callback);\n        }\n        else {\n            return this.getRequestMetadataAsync();\n        }\n    }\n    /**\n     * The main authentication interface.  It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * In OAuth2Client, the result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     * @param url The optional url being authorized\n     */\n    getRequestHeaders(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const res = yield this.getRequestMetadataAsync(url);\n            return res.headers;\n        });\n    }\n    getRequestMetadataAsync(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const thisCreds = this.credentials;\n            if (!thisCreds.access_token && !thisCreds.refresh_token && !this.apiKey) {\n                throw new Error('No access, refresh token or API key is set.');\n            }\n            if (thisCreds.access_token && !this.isTokenExpiring()) {\n                thisCreds.token_type = thisCreds.token_type || 'Bearer';\n                const headers = {\n                    Authorization: thisCreds.token_type + ' ' + thisCreds.access_token\n                };\n                return { headers };\n            }\n            if (this.apiKey) {\n                return { headers: {} };\n            }\n            let r = null;\n            let tokens = null;\n            try {\n                r = yield this.refreshToken(thisCreds.refresh_token);\n                tokens = r.tokens;\n            }\n            catch (err) {\n                const e = err;\n                if (e.response &&\n                    (e.response.status === 403 || e.response.status === 404)) {\n                    e.message = 'Could not refresh access token.';\n                }\n                throw e;\n            }\n            const credentials = this.credentials;\n            credentials.token_type = credentials.token_type || 'Bearer';\n            tokens.refresh_token = credentials.refresh_token;\n            this.credentials = tokens;\n            const headers = {\n                Authorization: credentials.token_type + ' ' + tokens.access_token\n            };\n            return { headers, res: r.res };\n        });\n    }\n    /**\n     * Generates an URL to revoke the given token.\n     * @param token The existing token to be revoked.\n     */\n    static getRevokeTokenUrl(token) {\n        const parameters = querystring.stringify({ token });\n        return `${OAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_}?${parameters}`;\n    }\n    revokeToken(token, callback) {\n        const opts = {\n            url: OAuth2Client.getRevokeTokenUrl(token),\n            method: 'POST'\n        };\n        if (callback) {\n            this.transporter.request(opts).then(r => callback(null, r), callback);\n        }\n        else {\n            return this.transporter.request(opts);\n        }\n    }\n    revokeCredentials(callback) {\n        if (callback) {\n            this.revokeCredentialsAsync().then(res => callback(null, res), callback);\n        }\n        else {\n            return this.revokeCredentialsAsync();\n        }\n    }\n    revokeCredentialsAsync() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const token = this.credentials.access_token;\n            this.credentials = {};\n            if (token) {\n                return this.revokeToken(token);\n            }\n            else {\n                throw new Error('No access token to revoke.');\n            }\n        });\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then(r => callback(null, r), e => {\n                return callback(e, e.response);\n            });\n        }\n        else {\n            return this.requestAsync(opts);\n        }\n    }\n    requestAsync(opts, retry = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let r2;\n            try {\n                const r = yield this.getRequestMetadataAsync(opts.url);\n                if (r.headers && r.headers.Authorization) {\n                    opts.headers = opts.headers || {};\n                    opts.headers.Authorization = r.headers.Authorization;\n                }\n                if (this.apiKey) {\n                    opts.params = Object.assign(opts.params || {}, { key: this.apiKey });\n                }\n                r2 = yield this.transporter.request(opts);\n            }\n            catch (e) {\n                const res = e.response;\n                if (res) {\n                    const statusCode = res.status;\n                    // Retry the request for metadata if the following criteria are true:\n                    // - We haven't already retried.  It only makes sense to retry once.\n                    // - The response was a 401 or a 403\n                    // - The request didn't send a readableStream\n                    // - An access_token and refresh_token were available, but no\n                    //   expiry_date was availabe. This can happen when developers stash\n                    //   the access_token and refresh_token for later use, but the\n                    //   access_token fails on the first try because it's expired.\n                    const mayRequireRefresh = this.credentials &&\n                        this.credentials.access_token && this.credentials.refresh_token &&\n                        !this.credentials.expiry_date;\n                    const isReadableStream = res.config.data instanceof stream.Readable;\n                    const isAuthErr = statusCode === 401 || statusCode === 403;\n                    if (!retry && isAuthErr && !isReadableStream && mayRequireRefresh) {\n                        yield this.refreshAccessTokenAsync();\n                        return this.requestAsync(opts, true);\n                    }\n                }\n                throw e;\n            }\n            return r2;\n        });\n    }\n    verifyIdToken(options, callback) {\n        // This function used to accept two arguments instead of an options object.\n        // Check the types to help users upgrade with less pain.\n        // This check can be removed after a 2.0 release.\n        if (callback && typeof callback !== 'function') {\n            throw new Error('This method accepts an options object as the first parameter, which includes the idToken, audience, and maxExpiry.');\n        }\n        if (callback) {\n            this.verifyIdTokenAsync(options).then(r => callback(null, r), callback);\n        }\n        else {\n            return this.verifyIdTokenAsync(options);\n        }\n    }\n    verifyIdTokenAsync(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!options.idToken) {\n                throw new Error('The verifyIdToken method requires an ID Token');\n            }\n            const response = yield this.getFederatedSignonCertsAsync();\n            const login = yield this.verifySignedJwtWithCertsAsync(options.idToken, response.certs, options.audience, OAuth2Client.ISSUERS_, options.maxExpiry);\n            return login;\n        });\n    }\n    /**\n     * Obtains information about the provisioned access token.  Especially useful\n     * if you want to check the scopes that were provisioned to a given token.\n     *\n     * @param accessToken Required.  The Access Token for which you want to get\n     * user info.\n     */\n    getTokenInfo(accessToken) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { data } = yield this.transporter.request({\n                method: 'GET',\n                url: OAuth2Client.GOOGLE_TOKEN_INFO_URL,\n                params: { access_token: accessToken }\n            });\n            const info = Object.assign({\n                expiry_date: ((new Date()).getTime() + (data.expires_in * 1000)),\n                scopes: data.scope.split(' ')\n            }, data);\n            delete info.expires_in;\n            delete info.scope;\n            return info;\n        });\n    }\n    getFederatedSignonCerts(callback) {\n        if (callback) {\n            this.getFederatedSignonCertsAsync().then(r => callback(null, r.certs, r.res), callback);\n        }\n        else {\n            return this.getFederatedSignonCertsAsync();\n        }\n    }\n    getFederatedSignonCertsAsync() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const nowTime = (new Date()).getTime();\n            const format = isbrowser_1.isBrowser() ? CertificateFormat.JWK : CertificateFormat.PEM;\n            if (this.certificateExpiry &&\n                (nowTime < this.certificateExpiry.getTime()) &&\n                this.certificateCacheFormat === format) {\n                return { certs: this.certificateCache, format };\n            }\n            let res;\n            let url;\n            switch (format) {\n                case CertificateFormat.PEM:\n                    url = OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_;\n                    break;\n                case CertificateFormat.JWK:\n                    url = OAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_;\n                    break;\n                default:\n                    throw new Error(`Unsupported certificate format ${format}`);\n            }\n            try {\n                res = yield this.transporter.request({ url });\n            }\n            catch (e) {\n                throw new Error('Failed to retrieve verification certificates: ' + e);\n            }\n            const cacheControl = res ? res.headers['cache-control'] : undefined;\n            let cacheAge = -1;\n            if (cacheControl) {\n                const pattern = new RegExp('max-age=([0-9]*)');\n                const regexResult = pattern.exec(cacheControl);\n                if (regexResult && regexResult.length === 2) {\n                    // Cache results with max-age (in seconds)\n                    cacheAge = Number(regexResult[1]) * 1000; // milliseconds\n                }\n            }\n            let certificates = {};\n            switch (format) {\n                case CertificateFormat.PEM:\n                    certificates = res.data;\n                    break;\n                case CertificateFormat.JWK:\n                    for (const key of res.data.keys) {\n                        certificates[key.kid] = key;\n                    }\n                    break;\n                default:\n                    throw new Error(`Unsupported certificate format ${format}`);\n            }\n            const now = new Date();\n            this.certificateExpiry =\n                cacheAge === -1 ? null : new Date(now.getTime() + cacheAge);\n            this.certificateCache = certificates;\n            this.certificateCacheFormat = format;\n            return { certs: certificates, format, res };\n        });\n    }\n    verifySignedJwtWithCerts() {\n        // To make the code compatible with browser SubtleCrypto we need to make\n        // this method async.\n        throw new Error('verifySignedJwtWithCerts is removed, please use verifySignedJwtWithCertsAsync instead.');\n    }\n    /**\n     * Verify the id token is signed with the correct certificate\n     * and is from the correct audience.\n     * @param jwt The jwt to verify (The ID Token in this case).\n     * @param certs The array of certs to test the jwt against.\n     * @param requiredAudience The audience to test the jwt against.\n     * @param issuers The allowed issuers of the jwt (Optional).\n     * @param maxExpiry The max expiry the certificate can be (Optional).\n     * @return Returns a promise resolving to LoginTicket on verification.\n     */\n    verifySignedJwtWithCertsAsync(jwt, certs, requiredAudience, issuers, maxExpiry) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const crypto = crypto_1.createCrypto();\n            if (!maxExpiry) {\n                maxExpiry = OAuth2Client.MAX_TOKEN_LIFETIME_SECS_;\n            }\n            const segments = jwt.split('.');\n            if (segments.length !== 3) {\n                throw new Error('Wrong number of segments in token: ' + jwt);\n            }\n            const signed = segments[0] + '.' + segments[1];\n            const signature = segments[2];\n            let envelope;\n            let payload;\n            try {\n                envelope = JSON.parse(crypto.decodeBase64StringUtf8(segments[0]));\n            }\n            catch (err) {\n                throw new Error('Can\\'t parse token envelope: ' + segments[0]);\n            }\n            if (!envelope) {\n                throw new Error('Can\\'t parse token envelope: ' + segments[0]);\n            }\n            try {\n                payload = JSON.parse(crypto.decodeBase64StringUtf8(segments[1]));\n            }\n            catch (err) {\n                throw new Error('Can\\'t parse token payload: ' + segments[0]);\n            }\n            if (!payload) {\n                throw new Error('Can\\'t parse token payload: ' + segments[1]);\n            }\n            if (!certs.hasOwnProperty(envelope.kid)) {\n                // If this is not present, then there's no reason to attempt verification\n                throw new Error('No pem found for envelope: ' + JSON.stringify(envelope));\n            }\n            const cert = certs[envelope.kid];\n            const verified = yield crypto.verify(cert, signed, signature);\n            if (!verified) {\n                throw new Error('Invalid token signature: ' + jwt);\n            }\n            if (!payload.iat) {\n                throw new Error('No issue time in token: ' + JSON.stringify(payload));\n            }\n            if (!payload.exp) {\n                throw new Error('No expiration time in token: ' + JSON.stringify(payload));\n            }\n            const iat = Number(payload.iat);\n            if (isNaN(iat))\n                throw new Error('iat field using invalid format');\n            const exp = Number(payload.exp);\n            if (isNaN(exp))\n                throw new Error('exp field using invalid format');\n            const now = new Date().getTime() / 1000;\n            if (exp >= now + maxExpiry) {\n                throw new Error('Expiration time too far in future: ' + JSON.stringify(payload));\n            }\n            const earliest = iat - OAuth2Client.CLOCK_SKEW_SECS_;\n            const latest = exp + OAuth2Client.CLOCK_SKEW_SECS_;\n            if (now < earliest) {\n                throw new Error('Token used too early, ' + now + ' < ' + earliest + ': ' +\n                    JSON.stringify(payload));\n            }\n            if (now > latest) {\n                throw new Error('Token used too late, ' + now + ' > ' + latest + ': ' +\n                    JSON.stringify(payload));\n            }\n            if (issuers && issuers.indexOf(payload.iss) < 0) {\n                throw new Error('Invalid issuer, expected one of [' + issuers + '], but got ' +\n                    payload.iss);\n            }\n            // Check the audience matches if we have one\n            if (typeof requiredAudience !== 'undefined' && requiredAudience !== null) {\n                const aud = payload.aud;\n                let audVerified = false;\n                // If the requiredAudience is an array, check if it contains token\n                // audience\n                if (requiredAudience.constructor === Array) {\n                    audVerified = (requiredAudience.indexOf(aud) > -1);\n                }\n                else {\n                    audVerified = (aud === requiredAudience);\n                }\n                if (!audVerified) {\n                    throw new Error('Wrong recipient, payload audience != requiredAudience');\n                }\n            }\n            return new loginticket_1.LoginTicket(envelope, payload);\n        });\n    }\n    /**\n     * Returns true if a token is expired or will expire within\n     * eagerRefreshThresholdMillismilliseconds.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     */\n    isTokenExpiring() {\n        const expiryDate = this.credentials.expiry_date;\n        return expiryDate ? expiryDate <=\n            ((new Date()).getTime() + this.eagerRefreshThresholdMillis) :\n            false;\n    }\n}\nOAuth2Client.GOOGLE_TOKEN_INFO_URL = 'https://oauth2.googleapis.com/tokeninfo';\n/**\n * The base URL for auth endpoints.\n */\nOAuth2Client.GOOGLE_OAUTH2_AUTH_BASE_URL_ = 'https://accounts.google.com/o/oauth2/v2/auth';\n/**\n * The base endpoint for token retrieval.\n */\nOAuth2Client.GOOGLE_OAUTH2_TOKEN_URL_ = 'https://oauth2.googleapis.com/token';\n/**\n * The base endpoint to revoke tokens.\n */\nOAuth2Client.GOOGLE_OAUTH2_REVOKE_URL_ = 'https://oauth2.googleapis.com/revoke';\n/**\n * Google Sign on certificates in PEM format.\n */\nOAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_PEM_CERTS_URL_ = 'https://www.googleapis.com/oauth2/v1/certs';\n/**\n * Google Sign on certificates in JWK format.\n */\nOAuth2Client.GOOGLE_OAUTH2_FEDERATED_SIGNON_JWK_CERTS_URL_ = 'https://www.googleapis.com/oauth2/v3/certs';\n/**\n * Clock skew - five minutes in seconds\n */\nOAuth2Client.CLOCK_SKEW_SECS_ = 300;\n/**\n * Max Token Lifetime is one day in seconds\n */\nOAuth2Client.MAX_TOKEN_LIFETIME_SECS_ = 86400;\n/**\n * The allowed oauth token issuers.\n */\nOAuth2Client.ISSUERS_ = ['accounts.google.com', 'https://accounts.google.com'];\nexports.OAuth2Client = OAuth2Client;\n//# sourceMappingURL=oauth2client.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAK,UAAUC,OAAO,EAAEC,UAAU,EAAEC,CAAC,EAAEC,SAAS,EAAE;EACrF,OAAO,KAAKD,CAAC,KAAKA,CAAC,GAAGE,OAAO,CAAC,EAAE,UAAUC,OAAO,EAAEC,MAAM,EAAE;IACvD,SAASC,SAASA,CAACC,KAAK,EAAE;MAAE,IAAI;QAAEC,IAAI,CAACN,SAAS,CAACO,IAAI,CAACF,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC,OAAOG,CAAC,EAAE;QAAEL,MAAM,CAACK,CAAC,CAAC;MAAE;IAAE;IAC1F,SAASC,QAAQA,CAACJ,KAAK,EAAE;MAAE,IAAI;QAAEC,IAAI,CAACN,SAAS,CAAC,OAAO,CAAC,CAACK,KAAK,CAAC,CAAC;MAAE,CAAC,CAAC,OAAOG,CAAC,EAAE;QAAEL,MAAM,CAACK,CAAC,CAAC;MAAE;IAAE;IAC7F,SAASF,IAAIA,CAACI,MAAM,EAAE;MAAEA,MAAM,CAACC,IAAI,GAAGT,OAAO,CAACQ,MAAM,CAACL,KAAK,CAAC,GAAG,IAAIN,CAAC,CAAC,UAAUG,OAAO,EAAE;QAAEA,OAAO,CAACQ,MAAM,CAACL,KAAK,CAAC;MAAE,CAAC,CAAC,CAACO,IAAI,CAACR,SAAS,EAAEK,QAAQ,CAAC;IAAE;IAC9IH,IAAI,CAAC,CAACN,SAAS,GAAGA,SAAS,CAACa,KAAK,CAAChB,OAAO,EAAEC,UAAU,IAAI,EAAE,CAAC,EAAES,IAAI,EAAE,CAAC;EACzE,CAAC,CAAC;AACN,CAAC;AACDO,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEX,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMY,WAAW,GAAGC,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,QAAQ,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAC5C,MAAMG,WAAW,GAAGH,OAAO,CAAC,cAAc,CAAC;AAC3C,MAAMI,QAAQ,GAAGJ,OAAO,CAAC,aAAa,CAAC;AACvC,MAAMK,YAAY,GAAGL,OAAO,CAAC,cAAc,CAAC;AAC5C,MAAMM,aAAa,GAAGN,OAAO,CAAC,eAAe,CAAC;AAC9C,IAAIO,mBAAmB;AACvB,CAAC,UAAUA,mBAAmB,EAAE;EAC5BA,mBAAmB,CAAC,OAAO,CAAC,GAAG,OAAO;EACtCA,mBAAmB,CAAC,MAAM,CAAC,GAAG,MAAM;AACxC,CAAC,EAAEA,mBAAmB,GAAGT,OAAO,CAACS,mBAAmB,KAAKT,OAAO,CAACS,mBAAmB,GAAG,CAAC,CAAC,CAAC,CAAC;AAC3F,IAAIC,iBAAiB;AACrB,CAAC,UAAUA,iBAAiB,EAAE;EAC1BA,iBAAiB,CAAC,KAAK,CAAC,GAAG,KAAK;EAChCA,iBAAiB,CAAC,KAAK,CAAC,GAAG,KAAK;AACpC,CAAC,EAAEA,iBAAiB,GAAGV,OAAO,CAACU,iBAAiB,KAAKV,OAAO,CAACU,iBAAiB,GAAG,CAAC,CAAC,CAAC,CAAC;AACrF,MAAMC,YAAY,SAASJ,YAAY,CAACK,UAAU,CAAC;EAC/CC,WAAWA,CAACC,iBAAiB,EAAEC,YAAY,EAAEC,WAAW,EAAE;IACtD,KAAK,EAAE;IACP,IAAI,CAACC,gBAAgB,GAAG,CAAC,CAAC;IAC1B,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,sBAAsB,GAAGT,iBAAiB,CAACU,GAAG;IACnD,IAAI,CAACC,oBAAoB,GAAG,IAAIC,GAAG,EAAE;IACrC,MAAMC,IAAI,GAAIT,iBAAiB,IAAI,OAAOA,iBAAiB,KAAK,QAAQ,GACpEA,iBAAiB,GACjB;MAAEU,QAAQ,EAAEV,iBAAiB;MAAEC,YAAY;MAAEC;IAAY,CAAC;IAC9D,IAAI,CAACS,SAAS,GAAGF,IAAI,CAACC,QAAQ;IAC9B,IAAI,CAACE,aAAa,GAAGH,IAAI,CAACR,YAAY;IACtC,IAAI,CAACC,WAAW,GAAGO,IAAI,CAACP,WAAW;IACnC,IAAI,CAACW,2BAA2B,GAC5BJ,IAAI,CAACI,2BAA2B,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI;EACzD;EACA;AACJ;AACA;AACA;AACA;EACIC,eAAeA,CAACL,IAAI,GAAG,CAAC,CAAC,EAAE;IACvB,IAAIA,IAAI,CAACM,qBAAqB,IAAI,CAACN,IAAI,CAACO,cAAc,EAAE;MACpD,MAAM,IAAIC,KAAK,CAAC,0EAA0E,CAAC;IAC/F;IACAR,IAAI,CAACS,aAAa,GAAGT,IAAI,CAACS,aAAa,IAAI,MAAM;IACjDT,IAAI,CAACU,SAAS,GAAGV,IAAI,CAACU,SAAS,IAAI,IAAI,CAACR,SAAS;IACjDF,IAAI,CAACW,YAAY,GAAGX,IAAI,CAACW,YAAY,IAAI,IAAI,CAAClB,WAAW;IACzD;IACA,IAAIO,IAAI,CAACY,KAAK,YAAYC,KAAK,EAAE;MAC7Bb,IAAI,CAACY,KAAK,GAAGZ,IAAI,CAACY,KAAK,CAACE,IAAI,CAAC,GAAG,CAAC;IACrC;IACA,MAAMC,OAAO,GAAG3B,YAAY,CAAC4B,4BAA4B;IACzD,OAAOD,OAAO,GAAG,GAAG,GAAGrC,WAAW,CAACuC,SAAS,CAACjB,IAAI,CAAC;EACtD;EACAkB,oBAAoBA,CAAA,EAAG;IACnB;IACA;IACA,MAAM,IAAIV,KAAK,CAAC,gFAAgF,CAAC;EACrG;EACA;AACJ;AACA;AACA;AACA;EACIW,yBAAyBA,CAAA,EAAG;IACxB,OAAO9D,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD;MACA;MACA,MAAM+D,MAAM,GAAGvC,QAAQ,CAACwC,YAAY,EAAE;MACtC,MAAMC,YAAY,GAAGF,MAAM,CAACG,iBAAiB,CAAC,EAAE,CAAC;MACjD;MACA;MACA;MACA,MAAMC,YAAY,GAAGF,YAAY,CAACG,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;MAC5F;MACA,MAAMC,sBAAsB,GAAG,MAAMN,MAAM,CAACO,kBAAkB,CAACH,YAAY,CAAC;MAC5E;MACA,MAAMI,aAAa,GAAGF,sBAAsB,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CACrDJ,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;MACxB,OAAO;QAAED,YAAY;QAAEI;MAAc,CAAC;IAC1C,CAAC,CAAC;EACN;EACAE,QAAQA,CAACC,aAAa,EAAEC,QAAQ,EAAE;IAC9B,MAAMC,OAAO,GAAI,OAAOF,aAAa,KAAK,QAAQ,GAC9C;MAAEG,IAAI,EAAEH;IAAc,CAAC,GACvBA,aAAa;IACjB,IAAIC,QAAQ,EAAE;MACV,IAAI,CAACG,aAAa,CAACF,OAAO,CAAC,CAAC5D,IAAI,CAAC+D,CAAC,IAAIJ,QAAQ,CAAC,IAAI,EAAEI,CAAC,CAACC,MAAM,EAAED,CAAC,CAACE,GAAG,CAAC,EAAErE,CAAC,IAAI+D,QAAQ,CAAC/D,CAAC,EAAE,IAAI,EAAEA,CAAC,CAACsE,QAAQ,CAAC,CAAC;IAC9G,CAAC,MACI;MACD,OAAO,IAAI,CAACJ,aAAa,CAACF,OAAO,CAAC;IACtC;EACJ;EACAE,aAAaA,CAACF,OAAO,EAAE;IACnB,OAAO5E,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAMmF,GAAG,GAAGpD,YAAY,CAACqD,wBAAwB;MACjD,MAAMC,MAAM,GAAG;QACXR,IAAI,EAAED,OAAO,CAACC,IAAI;QAClBxB,SAAS,EAAEuB,OAAO,CAACvB,SAAS,IAAI,IAAI,CAACR,SAAS;QAC9CyC,aAAa,EAAE,IAAI,CAACxC,aAAa;QACjCQ,YAAY,EAAEsB,OAAO,CAACtB,YAAY,IAAI,IAAI,CAAClB,WAAW;QACtDmD,UAAU,EAAE,oBAAoB;QAChCC,aAAa,EAAEZ,OAAO,CAACT;MAC3B,CAAC;MACD,MAAMc,GAAG,GAAG,MAAM,IAAI,CAACQ,WAAW,CAACC,OAAO,CAAC;QACvCC,MAAM,EAAE,MAAM;QACdR,GAAG;QACHS,IAAI,EAAEvE,WAAW,CAACuC,SAAS,CAACyB,MAAM,CAAC;QACnCQ,OAAO,EAAE;UAAE,cAAc,EAAE;QAAoC;MACnE,CAAC,CAAC;MACF,MAAMb,MAAM,GAAGC,GAAG,CAACW,IAAI;MACvB,IAAIX,GAAG,CAACW,IAAI,IAAIX,GAAG,CAACW,IAAI,CAACE,UAAU,EAAE;QACjCd,MAAM,CAACe,WAAW,GACZ,IAAIC,IAAI,EAAE,CAAEC,OAAO,EAAE,GAAIhB,GAAG,CAACW,IAAI,CAACE,UAAU,GAAG,IAAM;QAC3D,OAAOd,MAAM,CAACc,UAAU;MAC5B;MACA,IAAI,CAACI,IAAI,CAAC,QAAQ,EAAElB,MAAM,CAAC;MAC3B,OAAO;QAAEA,MAAM;QAAEC;MAAI,CAAC;IAC1B,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;EACIkB,YAAYA,CAACA,YAAY,EAAE;IACvB,OAAOnG,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAI,CAACmG,YAAY,EAAE;QACf,OAAO,IAAI,CAACC,mBAAmB,CAACD,YAAY,CAAC;MACjD;MACA;MACA;MACA,IAAI,IAAI,CAAC1D,oBAAoB,CAAC4D,GAAG,CAACF,YAAY,CAAC,EAAE;QAC7C,OAAO,IAAI,CAAC1D,oBAAoB,CAAC6D,GAAG,CAACH,YAAY,CAAC;MACtD;MACA,MAAMI,CAAC,GAAG,IAAI,CAACH,mBAAmB,CAACD,YAAY,CAAC,CAC3CnF,IAAI,CAAC+D,CAAC,IAAI;QACX,IAAI,CAACtC,oBAAoB,CAAC+D,MAAM,CAACL,YAAY,CAAC;QAC9C,OAAOpB,CAAC;MACZ,CAAC,EAAEnE,CAAC,IAAI;QACJ,IAAI,CAAC6B,oBAAoB,CAAC+D,MAAM,CAACL,YAAY,CAAC;QAC9C,MAAMvF,CAAC;MACX,CAAC,CAAC;MACF,IAAI,CAAC6B,oBAAoB,CAACgE,GAAG,CAACN,YAAY,EAAEI,CAAC,CAAC;MAC9C,OAAOA,CAAC;IACZ,CAAC,CAAC;EACN;EACAH,mBAAmBA,CAACD,YAAY,EAAE;IAC9B,OAAOnG,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAMmF,GAAG,GAAGpD,YAAY,CAACqD,wBAAwB;MACjD,MAAMQ,IAAI,GAAG;QACTc,aAAa,EAAEP,YAAY;QAC3B9C,SAAS,EAAE,IAAI,CAACR,SAAS;QACzByC,aAAa,EAAE,IAAI,CAACxC,aAAa;QACjCyC,UAAU,EAAE;MAChB,CAAC;MACD;MACA,MAAMN,GAAG,GAAG,MAAM,IAAI,CAACQ,WAAW,CAACC,OAAO,CAAC;QACvCC,MAAM,EAAE,MAAM;QACdR,GAAG;QACHS,IAAI,EAAEvE,WAAW,CAACuC,SAAS,CAACgC,IAAI,CAAC;QACjCC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAoC;MACnE,CAAC,CAAC;MACF,MAAMb,MAAM,GAAGC,GAAG,CAACW,IAAI;MACvB;MACA,IAAIX,GAAG,CAACW,IAAI,IAAIX,GAAG,CAACW,IAAI,CAACE,UAAU,EAAE;QACjCd,MAAM,CAACe,WAAW,GACZ,IAAIC,IAAI,EAAE,CAAEC,OAAO,EAAE,GAAIhB,GAAG,CAACW,IAAI,CAACE,UAAU,GAAG,IAAM;QAC3D,OAAOd,MAAM,CAACc,UAAU;MAC5B;MACA,IAAI,CAACI,IAAI,CAAC,QAAQ,EAAElB,MAAM,CAAC;MAC3B,OAAO;QAAEA,MAAM;QAAEC;MAAI,CAAC;IAC1B,CAAC,CAAC;EACN;EACA0B,kBAAkBA,CAAChC,QAAQ,EAAE;IACzBjD,QAAQ,CAACkF,IAAI,CAAClF,QAAQ,CAACmF,+BAA+B,CAAC;IACvD,IAAIlC,QAAQ,EAAE;MACV,IAAI,CAACmC,uBAAuB,EAAE,CAAC9F,IAAI,CAAC+D,CAAC,IAAIJ,QAAQ,CAAC,IAAI,EAAEI,CAAC,CAACgC,WAAW,EAAEhC,CAAC,CAACE,GAAG,CAAC,EAAEN,QAAQ,CAAC;IAC5F,CAAC,MACI;MACD,OAAO,IAAI,CAACmC,uBAAuB,EAAE;IACzC;EACJ;EACAA,uBAAuBA,CAAA,EAAG;IACtB,OAAO9G,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAI,CAAC,IAAI,CAAC+G,WAAW,CAACL,aAAa,EAAE;QACjC,MAAM,IAAIvD,KAAK,CAAC,0BAA0B,CAAC;MAC/C;MACA,MAAM4B,CAAC,GAAG,MAAM,IAAI,CAACoB,YAAY,CAAC,IAAI,CAACY,WAAW,CAACL,aAAa,CAAC;MACjE,MAAM1B,MAAM,GAAGD,CAAC,CAACC,MAAM;MACvBA,MAAM,CAAC0B,aAAa,GAAG,IAAI,CAACK,WAAW,CAACL,aAAa;MACrD,IAAI,CAACK,WAAW,GAAG/B,MAAM;MACzB,OAAO;QAAE+B,WAAW,EAAE,IAAI,CAACA,WAAW;QAAE9B,GAAG,EAAEF,CAAC,CAACE;MAAI,CAAC;IACxD,CAAC,CAAC;EACN;EACA+B,cAAcA,CAACrC,QAAQ,EAAE;IACrB,IAAIA,QAAQ,EAAE;MACV,IAAI,CAACsC,mBAAmB,EAAE,CAACjG,IAAI,CAAC+D,CAAC,IAAIJ,QAAQ,CAAC,IAAI,EAAEI,CAAC,CAACmC,KAAK,EAAEnC,CAAC,CAACE,GAAG,CAAC,EAAEN,QAAQ,CAAC;IAClF,CAAC,MACI;MACD,OAAO,IAAI,CAACsC,mBAAmB,EAAE;IACrC;EACJ;EACAA,mBAAmBA,CAAA,EAAG;IAClB,OAAOjH,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAMmH,aAAa,GAAG,CAAC,IAAI,CAACJ,WAAW,CAACK,YAAY,IAAI,IAAI,CAACC,eAAe,EAAE;MAC9E,IAAIF,aAAa,EAAE;QACf,IAAI,CAAC,IAAI,CAACJ,WAAW,CAACL,aAAa,EAAE;UACjC,MAAM,IAAIvD,KAAK,CAAC,0BAA0B,CAAC;QAC/C;QACA,MAAM4B,CAAC,GAAG,MAAM,IAAI,CAAC+B,uBAAuB,EAAE;QAC9C,IAAI,CAAC/B,CAAC,CAACgC,WAAW,IAAKhC,CAAC,CAACgC,WAAW,IAAI,CAAChC,CAAC,CAACgC,WAAW,CAACK,YAAa,EAAE;UAClE,MAAM,IAAIjE,KAAK,CAAC,iCAAiC,CAAC;QACtD;QACA,OAAO;UAAE+D,KAAK,EAAEnC,CAAC,CAACgC,WAAW,CAACK,YAAY;UAAEnC,GAAG,EAAEF,CAAC,CAACE;QAAI,CAAC;MAC5D,CAAC,MACI;QACD,OAAO;UAAEiC,KAAK,EAAE,IAAI,CAACH,WAAW,CAACK;QAAa,CAAC;MACnD;IACJ,CAAC,CAAC;EACN;EACAE,kBAAkBA,CAACnC,GAAG,EAAER,QAAQ,EAAE;IAC9BjD,QAAQ,CAACkF,IAAI,CAAClF,QAAQ,CAAC6F,qCAAqC,CAAC;IAC7D,IAAI5C,QAAQ,EAAE;MACV,IAAI,CAAC6C,uBAAuB,CAACrC,GAAG,CAAC,CAACnE,IAAI,CAAC+D,CAAC,IAAIJ,QAAQ,CAAC,IAAI,EAAEI,CAAC,CAACc,OAAO,EAAEd,CAAC,CAACE,GAAG,CAAC,EAAEN,QAAQ,CAAC;IAC3F,CAAC,MACI;MACD,OAAO,IAAI,CAAC6C,uBAAuB,EAAE;IACzC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,iBAAiBA,CAACtC,GAAG,EAAE;IACnB,OAAOnF,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAMiF,GAAG,GAAG,MAAM,IAAI,CAACuC,uBAAuB,CAACrC,GAAG,CAAC;MACnD,OAAOF,GAAG,CAACY,OAAO;IACtB,CAAC,CAAC;EACN;EACA2B,uBAAuBA,CAACrC,GAAG,EAAE;IACzB,OAAOnF,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM0H,SAAS,GAAG,IAAI,CAACX,WAAW;MAClC,IAAI,CAACW,SAAS,CAACN,YAAY,IAAI,CAACM,SAAS,CAAChB,aAAa,IAAI,CAAC,IAAI,CAACiB,MAAM,EAAE;QACrE,MAAM,IAAIxE,KAAK,CAAC,6CAA6C,CAAC;MAClE;MACA,IAAIuE,SAAS,CAACN,YAAY,IAAI,CAAC,IAAI,CAACC,eAAe,EAAE,EAAE;QACnDK,SAAS,CAACE,UAAU,GAAGF,SAAS,CAACE,UAAU,IAAI,QAAQ;QACvD,MAAM/B,OAAO,GAAG;UACZgC,aAAa,EAAEH,SAAS,CAACE,UAAU,GAAG,GAAG,GAAGF,SAAS,CAACN;QAC1D,CAAC;QACD,OAAO;UAAEvB;QAAQ,CAAC;MACtB;MACA,IAAI,IAAI,CAAC8B,MAAM,EAAE;QACb,OAAO;UAAE9B,OAAO,EAAE,CAAC;QAAE,CAAC;MAC1B;MACA,IAAId,CAAC,GAAG,IAAI;MACZ,IAAIC,MAAM,GAAG,IAAI;MACjB,IAAI;QACAD,CAAC,GAAG,MAAM,IAAI,CAACoB,YAAY,CAACuB,SAAS,CAAChB,aAAa,CAAC;QACpD1B,MAAM,GAAGD,CAAC,CAACC,MAAM;MACrB,CAAC,CACD,OAAO8C,GAAG,EAAE;QACR,MAAMlH,CAAC,GAAGkH,GAAG;QACb,IAAIlH,CAAC,CAACsE,QAAQ,KACTtE,CAAC,CAACsE,QAAQ,CAAC6C,MAAM,KAAK,GAAG,IAAInH,CAAC,CAACsE,QAAQ,CAAC6C,MAAM,KAAK,GAAG,CAAC,EAAE;UAC1DnH,CAAC,CAACoH,OAAO,GAAG,iCAAiC;QACjD;QACA,MAAMpH,CAAC;MACX;MACA,MAAMmG,WAAW,GAAG,IAAI,CAACA,WAAW;MACpCA,WAAW,CAACa,UAAU,GAAGb,WAAW,CAACa,UAAU,IAAI,QAAQ;MAC3D5C,MAAM,CAAC0B,aAAa,GAAGK,WAAW,CAACL,aAAa;MAChD,IAAI,CAACK,WAAW,GAAG/B,MAAM;MACzB,MAAMa,OAAO,GAAG;QACZgC,aAAa,EAAEd,WAAW,CAACa,UAAU,GAAG,GAAG,GAAG5C,MAAM,CAACoC;MACzD,CAAC;MACD,OAAO;QAAEvB,OAAO;QAAEZ,GAAG,EAAEF,CAAC,CAACE;MAAI,CAAC;IAClC,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;EACI,OAAOgD,iBAAiBA,CAACf,KAAK,EAAE;IAC5B,MAAMgB,UAAU,GAAG7G,WAAW,CAACuC,SAAS,CAAC;MAAEsD;IAAM,CAAC,CAAC;IACnD,OAAQ,GAAEnF,YAAY,CAACoG,yBAA0B,IAAGD,UAAW,EAAC;EACpE;EACAE,WAAWA,CAAClB,KAAK,EAAEvC,QAAQ,EAAE;IACzB,MAAMhC,IAAI,GAAG;MACTwC,GAAG,EAAEpD,YAAY,CAACkG,iBAAiB,CAACf,KAAK,CAAC;MAC1CvB,MAAM,EAAE;IACZ,CAAC;IACD,IAAIhB,QAAQ,EAAE;MACV,IAAI,CAACc,WAAW,CAACC,OAAO,CAAC/C,IAAI,CAAC,CAAC3B,IAAI,CAAC+D,CAAC,IAAIJ,QAAQ,CAAC,IAAI,EAAEI,CAAC,CAAC,EAAEJ,QAAQ,CAAC;IACzE,CAAC,MACI;MACD,OAAO,IAAI,CAACc,WAAW,CAACC,OAAO,CAAC/C,IAAI,CAAC;IACzC;EACJ;EACA0F,iBAAiBA,CAAC1D,QAAQ,EAAE;IACxB,IAAIA,QAAQ,EAAE;MACV,IAAI,CAAC2D,sBAAsB,EAAE,CAACtH,IAAI,CAACiE,GAAG,IAAIN,QAAQ,CAAC,IAAI,EAAEM,GAAG,CAAC,EAAEN,QAAQ,CAAC;IAC5E,CAAC,MACI;MACD,OAAO,IAAI,CAAC2D,sBAAsB,EAAE;IACxC;EACJ;EACAA,sBAAsBA,CAAA,EAAG;IACrB,OAAOtI,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAMkH,KAAK,GAAG,IAAI,CAACH,WAAW,CAACK,YAAY;MAC3C,IAAI,CAACL,WAAW,GAAG,CAAC,CAAC;MACrB,IAAIG,KAAK,EAAE;QACP,OAAO,IAAI,CAACkB,WAAW,CAAClB,KAAK,CAAC;MAClC,CAAC,MACI;QACD,MAAM,IAAI/D,KAAK,CAAC,4BAA4B,CAAC;MACjD;IACJ,CAAC,CAAC;EACN;EACAuC,OAAOA,CAAC/C,IAAI,EAAEgC,QAAQ,EAAE;IACpB,IAAIA,QAAQ,EAAE;MACV,IAAI,CAAC4D,YAAY,CAAC5F,IAAI,CAAC,CAAC3B,IAAI,CAAC+D,CAAC,IAAIJ,QAAQ,CAAC,IAAI,EAAEI,CAAC,CAAC,EAAEnE,CAAC,IAAI;QACtD,OAAO+D,QAAQ,CAAC/D,CAAC,EAAEA,CAAC,CAACsE,QAAQ,CAAC;MAClC,CAAC,CAAC;IACN,CAAC,MACI;MACD,OAAO,IAAI,CAACqD,YAAY,CAAC5F,IAAI,CAAC;IAClC;EACJ;EACA4F,YAAYA,CAAC5F,IAAI,EAAE6F,KAAK,GAAG,KAAK,EAAE;IAC9B,OAAOxI,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAIyI,EAAE;MACN,IAAI;QACA,MAAM1D,CAAC,GAAG,MAAM,IAAI,CAACyC,uBAAuB,CAAC7E,IAAI,CAACwC,GAAG,CAAC;QACtD,IAAIJ,CAAC,CAACc,OAAO,IAAId,CAAC,CAACc,OAAO,CAACgC,aAAa,EAAE;UACtClF,IAAI,CAACkD,OAAO,GAAGlD,IAAI,CAACkD,OAAO,IAAI,CAAC,CAAC;UACjClD,IAAI,CAACkD,OAAO,CAACgC,aAAa,GAAG9C,CAAC,CAACc,OAAO,CAACgC,aAAa;QACxD;QACA,IAAI,IAAI,CAACF,MAAM,EAAE;UACbhF,IAAI,CAAC+F,MAAM,GAAGxH,MAAM,CAACyH,MAAM,CAAChG,IAAI,CAAC+F,MAAM,IAAI,CAAC,CAAC,EAAE;YAAEE,GAAG,EAAE,IAAI,CAACjB;UAAO,CAAC,CAAC;QACxE;QACAc,EAAE,GAAG,MAAM,IAAI,CAAChD,WAAW,CAACC,OAAO,CAAC/C,IAAI,CAAC;MAC7C,CAAC,CACD,OAAO/B,CAAC,EAAE;QACN,MAAMqE,GAAG,GAAGrE,CAAC,CAACsE,QAAQ;QACtB,IAAID,GAAG,EAAE;UACL,MAAM4D,UAAU,GAAG5D,GAAG,CAAC8C,MAAM;UAC7B;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA,MAAMe,iBAAiB,GAAG,IAAI,CAAC/B,WAAW,IACtC,IAAI,CAACA,WAAW,CAACK,YAAY,IAAI,IAAI,CAACL,WAAW,CAACL,aAAa,IAC/D,CAAC,IAAI,CAACK,WAAW,CAAChB,WAAW;UACjC,MAAMgD,gBAAgB,GAAG9D,GAAG,CAAC+D,MAAM,CAACpD,IAAI,YAAYrE,MAAM,CAAC0H,QAAQ;UACnE,MAAMC,SAAS,GAAGL,UAAU,KAAK,GAAG,IAAIA,UAAU,KAAK,GAAG;UAC1D,IAAI,CAACL,KAAK,IAAIU,SAAS,IAAI,CAACH,gBAAgB,IAAID,iBAAiB,EAAE;YAC/D,MAAM,IAAI,CAAChC,uBAAuB,EAAE;YACpC,OAAO,IAAI,CAACyB,YAAY,CAAC5F,IAAI,EAAE,IAAI,CAAC;UACxC;QACJ;QACA,MAAM/B,CAAC;MACX;MACA,OAAO6H,EAAE;IACb,CAAC,CAAC;EACN;EACAU,aAAaA,CAACvE,OAAO,EAAED,QAAQ,EAAE;IAC7B;IACA;IACA;IACA,IAAIA,QAAQ,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;MAC5C,MAAM,IAAIxB,KAAK,CAAC,oHAAoH,CAAC;IACzI;IACA,IAAIwB,QAAQ,EAAE;MACV,IAAI,CAACyE,kBAAkB,CAACxE,OAAO,CAAC,CAAC5D,IAAI,CAAC+D,CAAC,IAAIJ,QAAQ,CAAC,IAAI,EAAEI,CAAC,CAAC,EAAEJ,QAAQ,CAAC;IAC3E,CAAC,MACI;MACD,OAAO,IAAI,CAACyE,kBAAkB,CAACxE,OAAO,CAAC;IAC3C;EACJ;EACAwE,kBAAkBA,CAACxE,OAAO,EAAE;IACxB,OAAO5E,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,IAAI,CAAC4E,OAAO,CAACyE,OAAO,EAAE;QAClB,MAAM,IAAIlG,KAAK,CAAC,+CAA+C,CAAC;MACpE;MACA,MAAM+B,QAAQ,GAAG,MAAM,IAAI,CAACoE,4BAA4B,EAAE;MAC1D,MAAMC,KAAK,GAAG,MAAM,IAAI,CAACC,6BAA6B,CAAC5E,OAAO,CAACyE,OAAO,EAAEnE,QAAQ,CAACuE,KAAK,EAAE7E,OAAO,CAAC8E,QAAQ,EAAE3H,YAAY,CAAC4H,QAAQ,EAAE/E,OAAO,CAACgF,SAAS,CAAC;MACnJ,OAAOL,KAAK;IAChB,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIM,YAAYA,CAACC,WAAW,EAAE;IACtB,OAAO9J,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM;QAAE4F;MAAK,CAAC,GAAG,MAAM,IAAI,CAACH,WAAW,CAACC,OAAO,CAAC;QAC5CC,MAAM,EAAE,KAAK;QACbR,GAAG,EAAEpD,YAAY,CAACgI,qBAAqB;QACvCrB,MAAM,EAAE;UAAEtB,YAAY,EAAE0C;QAAY;MACxC,CAAC,CAAC;MACF,MAAME,IAAI,GAAG9I,MAAM,CAACyH,MAAM,CAAC;QACvB5C,WAAW,EAAI,IAAIC,IAAI,EAAE,CAAEC,OAAO,EAAE,GAAIL,IAAI,CAACE,UAAU,GAAG,IAAM;QAChEmE,MAAM,EAAErE,IAAI,CAACrC,KAAK,CAACiB,KAAK,CAAC,GAAG;MAChC,CAAC,EAAEoB,IAAI,CAAC;MACR,OAAOoE,IAAI,CAAClE,UAAU;MACtB,OAAOkE,IAAI,CAACzG,KAAK;MACjB,OAAOyG,IAAI;IACf,CAAC,CAAC;EACN;EACAE,uBAAuBA,CAACvF,QAAQ,EAAE;IAC9B,IAAIA,QAAQ,EAAE;MACV,IAAI,CAAC2E,4BAA4B,EAAE,CAACtI,IAAI,CAAC+D,CAAC,IAAIJ,QAAQ,CAAC,IAAI,EAAEI,CAAC,CAAC0E,KAAK,EAAE1E,CAAC,CAACE,GAAG,CAAC,EAAEN,QAAQ,CAAC;IAC3F,CAAC,MACI;MACD,OAAO,IAAI,CAAC2E,4BAA4B,EAAE;IAC9C;EACJ;EACAA,4BAA4BA,CAAA,EAAG;IAC3B,OAAOtJ,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAMmK,OAAO,GAAI,IAAInE,IAAI,EAAE,CAAEC,OAAO,EAAE;MACtC,MAAMmE,MAAM,GAAG3I,WAAW,CAAC4I,SAAS,EAAE,GAAGvI,iBAAiB,CAACwI,GAAG,GAAGxI,iBAAiB,CAACU,GAAG;MACtF,IAAI,IAAI,CAACF,iBAAiB,IACrB6H,OAAO,GAAG,IAAI,CAAC7H,iBAAiB,CAAC2D,OAAO,EAAG,IAC5C,IAAI,CAAC1D,sBAAsB,KAAK6H,MAAM,EAAE;QACxC,OAAO;UAAEX,KAAK,EAAE,IAAI,CAACpH,gBAAgB;UAAE+H;QAAO,CAAC;MACnD;MACA,IAAInF,GAAG;MACP,IAAIE,GAAG;MACP,QAAQiF,MAAM;QACV,KAAKtI,iBAAiB,CAACU,GAAG;UACtB2C,GAAG,GAAGpD,YAAY,CAACwI,6CAA6C;UAChE;QACJ,KAAKzI,iBAAiB,CAACwI,GAAG;UACtBnF,GAAG,GAAGpD,YAAY,CAACyI,6CAA6C;UAChE;QACJ;UACI,MAAM,IAAIrH,KAAK,CAAE,kCAAiCiH,MAAO,EAAC,CAAC;MAAC;MAEpE,IAAI;QACAnF,GAAG,GAAG,MAAM,IAAI,CAACQ,WAAW,CAACC,OAAO,CAAC;UAAEP;QAAI,CAAC,CAAC;MACjD,CAAC,CACD,OAAOvE,CAAC,EAAE;QACN,MAAM,IAAIuC,KAAK,CAAC,gDAAgD,GAAGvC,CAAC,CAAC;MACzE;MACA,MAAM6J,YAAY,GAAGxF,GAAG,GAAGA,GAAG,CAACY,OAAO,CAAC,eAAe,CAAC,GAAG6E,SAAS;MACnE,IAAIC,QAAQ,GAAG,CAAC,CAAC;MACjB,IAAIF,YAAY,EAAE;QACd,MAAMG,OAAO,GAAG,IAAIC,MAAM,CAAC,kBAAkB,CAAC;QAC9C,MAAMC,WAAW,GAAGF,OAAO,CAACG,IAAI,CAACN,YAAY,CAAC;QAC9C,IAAIK,WAAW,IAAIA,WAAW,CAACE,MAAM,KAAK,CAAC,EAAE;UACzC;UACAL,QAAQ,GAAGM,MAAM,CAACH,WAAW,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;QAC9C;MACJ;;MACA,IAAII,YAAY,GAAG,CAAC,CAAC;MACrB,QAAQd,MAAM;QACV,KAAKtI,iBAAiB,CAACU,GAAG;UACtB0I,YAAY,GAAGjG,GAAG,CAACW,IAAI;UACvB;QACJ,KAAK9D,iBAAiB,CAACwI,GAAG;UACtB,KAAK,MAAM1B,GAAG,IAAI3D,GAAG,CAACW,IAAI,CAACuF,IAAI,EAAE;YAC7BD,YAAY,CAACtC,GAAG,CAACwC,GAAG,CAAC,GAAGxC,GAAG;UAC/B;UACA;QACJ;UACI,MAAM,IAAIzF,KAAK,CAAE,kCAAiCiH,MAAO,EAAC,CAAC;MAAC;MAEpE,MAAMiB,GAAG,GAAG,IAAIrF,IAAI,EAAE;MACtB,IAAI,CAAC1D,iBAAiB,GAClBqI,QAAQ,KAAK,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI3E,IAAI,CAACqF,GAAG,CAACpF,OAAO,EAAE,GAAG0E,QAAQ,CAAC;MAC/D,IAAI,CAACtI,gBAAgB,GAAG6I,YAAY;MACpC,IAAI,CAAC3I,sBAAsB,GAAG6H,MAAM;MACpC,OAAO;QAAEX,KAAK,EAAEyB,YAAY;QAAEd,MAAM;QAAEnF;MAAI,CAAC;IAC/C,CAAC,CAAC;EACN;EACAqG,wBAAwBA,CAAA,EAAG;IACvB;IACA;IACA,MAAM,IAAInI,KAAK,CAAC,wFAAwF,CAAC;EAC7G;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIqG,6BAA6BA,CAAC+B,GAAG,EAAE9B,KAAK,EAAE+B,gBAAgB,EAAEC,OAAO,EAAE7B,SAAS,EAAE;IAC5E,OAAO5J,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,aAAa;MAChD,MAAM+D,MAAM,GAAGvC,QAAQ,CAACwC,YAAY,EAAE;MACtC,IAAI,CAAC4F,SAAS,EAAE;QACZA,SAAS,GAAG7H,YAAY,CAAC2J,wBAAwB;MACrD;MACA,MAAMC,QAAQ,GAAGJ,GAAG,CAAC/G,KAAK,CAAC,GAAG,CAAC;MAC/B,IAAImH,QAAQ,CAACX,MAAM,KAAK,CAAC,EAAE;QACvB,MAAM,IAAI7H,KAAK,CAAC,qCAAqC,GAAGoI,GAAG,CAAC;MAChE;MACA,MAAMK,MAAM,GAAGD,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGA,QAAQ,CAAC,CAAC,CAAC;MAC9C,MAAME,SAAS,GAAGF,QAAQ,CAAC,CAAC,CAAC;MAC7B,IAAIG,QAAQ;MACZ,IAAIC,OAAO;MACX,IAAI;QACAD,QAAQ,GAAGE,IAAI,CAACC,KAAK,CAAClI,MAAM,CAACmI,sBAAsB,CAACP,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;MACrE,CAAC,CACD,OAAO7D,GAAG,EAAE;QACR,MAAM,IAAI3E,KAAK,CAAC,+BAA+B,GAAGwI,QAAQ,CAAC,CAAC,CAAC,CAAC;MAClE;MACA,IAAI,CAACG,QAAQ,EAAE;QACX,MAAM,IAAI3I,KAAK,CAAC,+BAA+B,GAAGwI,QAAQ,CAAC,CAAC,CAAC,CAAC;MAClE;MACA,IAAI;QACAI,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAClI,MAAM,CAACmI,sBAAsB,CAACP,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;MACpE,CAAC,CACD,OAAO7D,GAAG,EAAE;QACR,MAAM,IAAI3E,KAAK,CAAC,8BAA8B,GAAGwI,QAAQ,CAAC,CAAC,CAAC,CAAC;MACjE;MACA,IAAI,CAACI,OAAO,EAAE;QACV,MAAM,IAAI5I,KAAK,CAAC,8BAA8B,GAAGwI,QAAQ,CAAC,CAAC,CAAC,CAAC;MACjE;MACA,IAAI,CAAClC,KAAK,CAAC0C,cAAc,CAACL,QAAQ,CAACV,GAAG,CAAC,EAAE;QACrC;QACA,MAAM,IAAIjI,KAAK,CAAC,6BAA6B,GAAG6I,IAAI,CAACpI,SAAS,CAACkI,QAAQ,CAAC,CAAC;MAC7E;MACA,MAAMM,IAAI,GAAG3C,KAAK,CAACqC,QAAQ,CAACV,GAAG,CAAC;MAChC,MAAMiB,QAAQ,GAAG,MAAMtI,MAAM,CAACuI,MAAM,CAACF,IAAI,EAAER,MAAM,EAAEC,SAAS,CAAC;MAC7D,IAAI,CAACQ,QAAQ,EAAE;QACX,MAAM,IAAIlJ,KAAK,CAAC,2BAA2B,GAAGoI,GAAG,CAAC;MACtD;MACA,IAAI,CAACQ,OAAO,CAACQ,GAAG,EAAE;QACd,MAAM,IAAIpJ,KAAK,CAAC,0BAA0B,GAAG6I,IAAI,CAACpI,SAAS,CAACmI,OAAO,CAAC,CAAC;MACzE;MACA,IAAI,CAACA,OAAO,CAACS,GAAG,EAAE;QACd,MAAM,IAAIrJ,KAAK,CAAC,+BAA+B,GAAG6I,IAAI,CAACpI,SAAS,CAACmI,OAAO,CAAC,CAAC;MAC9E;MACA,MAAMQ,GAAG,GAAGtB,MAAM,CAACc,OAAO,CAACQ,GAAG,CAAC;MAC/B,IAAIE,KAAK,CAACF,GAAG,CAAC,EACV,MAAM,IAAIpJ,KAAK,CAAC,gCAAgC,CAAC;MACrD,MAAMqJ,GAAG,GAAGvB,MAAM,CAACc,OAAO,CAACS,GAAG,CAAC;MAC/B,IAAIC,KAAK,CAACD,GAAG,CAAC,EACV,MAAM,IAAIrJ,KAAK,CAAC,gCAAgC,CAAC;MACrD,MAAMkI,GAAG,GAAG,IAAIrF,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,IAAI;MACvC,IAAIuG,GAAG,IAAInB,GAAG,GAAGzB,SAAS,EAAE;QACxB,MAAM,IAAIzG,KAAK,CAAC,qCAAqC,GAAG6I,IAAI,CAACpI,SAAS,CAACmI,OAAO,CAAC,CAAC;MACpF;MACA,MAAMW,QAAQ,GAAGH,GAAG,GAAGxK,YAAY,CAAC4K,gBAAgB;MACpD,MAAMC,MAAM,GAAGJ,GAAG,GAAGzK,YAAY,CAAC4K,gBAAgB;MAClD,IAAItB,GAAG,GAAGqB,QAAQ,EAAE;QAChB,MAAM,IAAIvJ,KAAK,CAAC,wBAAwB,GAAGkI,GAAG,GAAG,KAAK,GAAGqB,QAAQ,GAAG,IAAI,GACpEV,IAAI,CAACpI,SAAS,CAACmI,OAAO,CAAC,CAAC;MAChC;MACA,IAAIV,GAAG,GAAGuB,MAAM,EAAE;QACd,MAAM,IAAIzJ,KAAK,CAAC,uBAAuB,GAAGkI,GAAG,GAAG,KAAK,GAAGuB,MAAM,GAAG,IAAI,GACjEZ,IAAI,CAACpI,SAAS,CAACmI,OAAO,CAAC,CAAC;MAChC;MACA,IAAIN,OAAO,IAAIA,OAAO,CAACoB,OAAO,CAACd,OAAO,CAACe,GAAG,CAAC,GAAG,CAAC,EAAE;QAC7C,MAAM,IAAI3J,KAAK,CAAC,mCAAmC,GAAGsI,OAAO,GAAG,aAAa,GACzEM,OAAO,CAACe,GAAG,CAAC;MACpB;MACA;MACA,IAAI,OAAOtB,gBAAgB,KAAK,WAAW,IAAIA,gBAAgB,KAAK,IAAI,EAAE;QACtE,MAAMuB,GAAG,GAAGhB,OAAO,CAACgB,GAAG;QACvB,IAAIC,WAAW,GAAG,KAAK;QACvB;QACA;QACA,IAAIxB,gBAAgB,CAACvJ,WAAW,KAAKuB,KAAK,EAAE;UACxCwJ,WAAW,GAAIxB,gBAAgB,CAACqB,OAAO,CAACE,GAAG,CAAC,GAAG,CAAC,CAAE;QACtD,CAAC,MACI;UACDC,WAAW,GAAID,GAAG,KAAKvB,gBAAiB;QAC5C;QACA,IAAI,CAACwB,WAAW,EAAE;UACd,MAAM,IAAI7J,KAAK,CAAC,uDAAuD,CAAC;QAC5E;MACJ;MACA,OAAO,IAAIvB,aAAa,CAACqL,WAAW,CAACnB,QAAQ,EAAEC,OAAO,CAAC;IAC3D,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;EACI1E,eAAeA,CAAA,EAAG;IACd,MAAM6F,UAAU,GAAG,IAAI,CAACnG,WAAW,CAAChB,WAAW;IAC/C,OAAOmH,UAAU,GAAGA,UAAU,IACxB,IAAIlH,IAAI,EAAE,CAAEC,OAAO,EAAE,GAAG,IAAI,CAAClD,2BAA4B,GAC3D,KAAK;EACb;AACJ;AACAhB,YAAY,CAACgI,qBAAqB,GAAG,yCAAyC;AAC9E;AACA;AACA;AACAhI,YAAY,CAAC4B,4BAA4B,GAAG,8CAA8C;AAC1F;AACA;AACA;AACA5B,YAAY,CAACqD,wBAAwB,GAAG,qCAAqC;AAC7E;AACA;AACA;AACArD,YAAY,CAACoG,yBAAyB,GAAG,sCAAsC;AAC/E;AACA;AACA;AACApG,YAAY,CAACwI,6CAA6C,GAAG,4CAA4C;AACzG;AACA;AACA;AACAxI,YAAY,CAACyI,6CAA6C,GAAG,4CAA4C;AACzG;AACA;AACA;AACAzI,YAAY,CAAC4K,gBAAgB,GAAG,GAAG;AACnC;AACA;AACA;AACA5K,YAAY,CAAC2J,wBAAwB,GAAG,KAAK;AAC7C;AACA;AACA;AACA3J,YAAY,CAAC4H,QAAQ,GAAG,CAAC,qBAAqB,EAAE,6BAA6B,CAAC;AAC9EvI,OAAO,CAACW,YAAY,GAAGA,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}