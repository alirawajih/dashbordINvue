{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst messages = require(\"../messages\");\nclass IAMAuth {\n  /**\n   * IAM credentials.\n   *\n   * @param selector the iam authority selector\n   * @param token the token\n   * @constructor\n   */\n  constructor(selector, token) {\n    this.selector = selector;\n    this.token = token;\n    this.selector = selector;\n    this.token = token;\n  }\n  /**\n   * Indicates whether the credential requires scopes to be created by calling\n   * createdScoped before use.\n   * @deprecated\n   * @return always false\n   */\n  createScopedRequired() {\n    // IAM authorization does not use scopes.\n    messages.warn(messages.IAM_CREATE_SCOPED_DEPRECATED);\n    return false;\n  }\n  /**\n   * Pass the selector and token to the metadataFn callback.\n   * @deprecated\n   * @param unused_uri is required of the credentials interface\n   * @param metadataFn a callback invoked with object containing request\n   * metadata.\n   */\n  getRequestMetadata(unusedUri, metadataFn) {\n    messages.warn(messages.IAM_GET_REQUEST_METADATA_DEPRECATED);\n    metadataFn(null, this.getRequestHeaders());\n  }\n  /**\n   * Acquire the HTTP headers required to make an authenticated request.\n   */\n  getRequestHeaders() {\n    return {\n      'x-goog-iam-authority-selector': this.selector,\n      'x-goog-iam-authorization-token': this.token\n    };\n  }\n}\nexports.IAMAuth = IAMAuth;","map":{"version":3,"names":["Object","defineProperty","exports","value","messages","require","IAMAuth","constructor","selector","token","createScopedRequired","warn","IAM_CREATE_SCOPED_DEPRECATED","getRequestMetadata","unusedUri","metadataFn","IAM_GET_REQUEST_METADATA_DEPRECATED","getRequestHeaders"],"sources":["/var/www/html/project/Dash_Vuexy-master/node_modules/google-auth-library/build/src/auth/iam.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2014 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst messages = require(\"../messages\");\nclass IAMAuth {\n    /**\n     * IAM credentials.\n     *\n     * @param selector the iam authority selector\n     * @param token the token\n     * @constructor\n     */\n    constructor(selector, token) {\n        this.selector = selector;\n        this.token = token;\n        this.selector = selector;\n        this.token = token;\n    }\n    /**\n     * Indicates whether the credential requires scopes to be created by calling\n     * createdScoped before use.\n     * @deprecated\n     * @return always false\n     */\n    createScopedRequired() {\n        // IAM authorization does not use scopes.\n        messages.warn(messages.IAM_CREATE_SCOPED_DEPRECATED);\n        return false;\n    }\n    /**\n     * Pass the selector and token to the metadataFn callback.\n     * @deprecated\n     * @param unused_uri is required of the credentials interface\n     * @param metadataFn a callback invoked with object containing request\n     * metadata.\n     */\n    getRequestMetadata(unusedUri, metadataFn) {\n        messages.warn(messages.IAM_GET_REQUEST_METADATA_DEPRECATED);\n        metadataFn(null, this.getRequestHeaders());\n    }\n    /**\n     * Acquire the HTTP headers required to make an authenticated request.\n     */\n    getRequestHeaders() {\n        return {\n            'x-goog-iam-authority-selector': this.selector,\n            'x-goog-iam-authorization-token': this.token\n        };\n    }\n}\nexports.IAMAuth = IAMAuth;\n//# sourceMappingURL=iam.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,QAAQ,GAAGC,OAAO,CAAC,aAAa,CAAC;AACvC,MAAMC,OAAO,CAAC;EACV;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACC,QAAQ,EAAEC,KAAK,EAAE;IACzB,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,KAAK,GAAGA,KAAK;EACtB;EACA;AACJ;AACA;AACA;AACA;AACA;EACIC,oBAAoBA,CAAA,EAAG;IACnB;IACAN,QAAQ,CAACO,IAAI,CAACP,QAAQ,CAACQ,4BAA4B,CAAC;IACpD,OAAO,KAAK;EAChB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,kBAAkBA,CAACC,SAAS,EAAEC,UAAU,EAAE;IACtCX,QAAQ,CAACO,IAAI,CAACP,QAAQ,CAACY,mCAAmC,CAAC;IAC3DD,UAAU,CAAC,IAAI,EAAE,IAAI,CAACE,iBAAiB,EAAE,CAAC;EAC9C;EACA;AACJ;AACA;EACIA,iBAAiBA,CAAA,EAAG;IAChB,OAAO;MACH,+BAA+B,EAAE,IAAI,CAACT,QAAQ;MAC9C,gCAAgC,EAAE,IAAI,CAACC;IAC3C,CAAC;EACL;AACJ;AACAP,OAAO,CAACI,OAAO,GAAGA,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}