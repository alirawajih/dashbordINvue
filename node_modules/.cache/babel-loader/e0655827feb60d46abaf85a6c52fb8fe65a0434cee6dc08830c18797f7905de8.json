{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst gaxios_1 = require(\"gaxios\");\nconst jsonBigint = require('json-bigint');\nexports.HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.BASE_URL = exports.HOST_ADDRESS + exports.BASE_PATH;\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze({\n  [exports.HEADER_NAME]: exports.HEADER_VALUE\n});\n// Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\nfunction validate(options) {\n  Object.keys(options).forEach(key => {\n    switch (key) {\n      case 'params':\n      case 'property':\n      case 'headers':\n        break;\n      case 'qs':\n        throw new Error(`'qs' is not a valid configuration option. Please use 'params' instead.`);\n      default:\n        throw new Error(`'${key}' is not a valid configuration option.`);\n    }\n  });\n}\nfunction metadataAccessor(type, options, noResponseRetries = 3) {\n  return __awaiter(this, void 0, void 0, function* () {\n    options = options || {};\n    if (typeof options === 'string') {\n      options = {\n        property: options\n      };\n    }\n    let property = '';\n    if (typeof options === 'object' && options.property) {\n      property = '/' + options.property;\n    }\n    validate(options);\n    try {\n      const res = yield gaxios_1.request({\n        url: `${exports.BASE_URL}/${type}${property}`,\n        headers: Object.assign({}, exports.HEADERS, options.headers),\n        retryConfig: {\n          noResponseRetries\n        },\n        params: options.params,\n        responseType: 'text'\n      });\n      // NOTE: node.js converts all incoming headers to lower case.\n      if (res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE) {\n        throw new Error(`Invalid response from metadata service: incorrect ${exports.HEADER_NAME} header.`);\n      } else if (!res.data) {\n        throw new Error('Invalid response from the metadata service');\n      }\n      if (typeof res.data === 'string') {\n        try {\n          return jsonBigint.parse(res.data);\n        } catch (_a) {\n          /* ignore */\n        }\n      }\n      return res.data;\n    } catch (e) {\n      if (e.response && e.response.status !== 200) {\n        e.message = `Unsuccessful response status code. ${e.message}`;\n      }\n      throw e;\n    }\n  });\n}\n// tslint:disable-next-line no-any\nfunction instance(options) {\n  return metadataAccessor('instance', options);\n}\nexports.instance = instance;\n// tslint:disable-next-line no-any\nfunction project(options) {\n  return metadataAccessor('project', options);\n}\nexports.project = project;\n/**\n * Determine if the metadata server is currently available.\n */\nfunction isAvailable() {\n  return __awaiter(this, void 0, void 0, function* () {\n    try {\n      // Attempt to read instance metadata. As configured, this will\n      // retry 3 times if there is a valid response, and fail fast\n      // if there is an ETIMEDOUT or ENOTFOUND error.\n      yield metadataAccessor('instance', undefined, 0);\n      return true;\n    } catch (err) {\n      // Failure to resolve the metadata service means that it is not available.\n      if (err.code && (err.code === 'ENOTFOUND' || err.code === 'ENOENT')) {\n        return false;\n      }\n      // Throw unexpected errors.\n      throw err;\n    }\n  });\n}\nexports.isAvailable = isAvailable;","map":{"version":3,"names":["gaxios_1","require","jsonBigint","exports","HOST_ADDRESS","BASE_PATH","BASE_URL","HEADER_NAME","HEADER_VALUE","HEADERS","Object","freeze","validate","options","keys","forEach","key","Error","metadataAccessor","type","noResponseRetries","property","res","request","url","headers","assign","retryConfig","params","responseType","toLowerCase","data","parse","_a","e","response","status","message","instance","project","isAvailable","undefined","err","code"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}