{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst tls_1 = require(\"tls\");\nconst call_credentials_1 = require(\"./call-credentials\");\n// tslint:disable-next-line:no-any\nfunction verifyIsBufferOrNull(obj, friendlyName) {\n  if (obj && !(obj instanceof Buffer)) {\n    throw new TypeError(`${friendlyName}, if provided, must be a Buffer.`);\n  }\n}\n/**\n * A class that contains credentials for communicating over a channel, as well\n * as a set of per-call credentials, which are applied to every method call made\n * over a channel initialized with an instance of this class.\n */\nclass ChannelCredentials {\n  constructor(callCredentials) {\n    this.callCredentials = callCredentials || call_credentials_1.CallCredentials.createEmpty();\n  }\n  /**\n   * Gets the set of per-call credentials associated with this instance.\n   */\n  _getCallCredentials() {\n    return this.callCredentials;\n  }\n  /**\n   * Return a new ChannelCredentials instance with a given set of credentials.\n   * The resulting instance can be used to construct a Channel that communicates\n   * over TLS.\n   * @param rootCerts The root certificate data.\n   * @param privateKey The client certificate private key, if available.\n   * @param certChain The client certificate key chain, if available.\n   */\n  static createSsl(rootCerts, privateKey, certChain, verifyOptions) {\n    verifyIsBufferOrNull(rootCerts, 'Root certificate');\n    verifyIsBufferOrNull(privateKey, 'Private key');\n    verifyIsBufferOrNull(certChain, 'Certificate chain');\n    if (privateKey && !certChain) {\n      throw new Error('Private key must be given with accompanying certificate chain');\n    }\n    if (!privateKey && certChain) {\n      throw new Error('Certificate chain must be given with accompanying private key');\n    }\n    const secureContext = tls_1.createSecureContext({\n      ca: rootCerts || undefined,\n      key: privateKey || undefined,\n      cert: certChain || undefined\n    });\n    const connectionOptions = {\n      secureContext\n    };\n    if (verifyOptions && verifyOptions.checkServerIdentity) {\n      connectionOptions.checkServerIdentity = (host, cert) => {\n        return verifyOptions.checkServerIdentity(host, {\n          raw: cert.raw\n        });\n      };\n    }\n    return new SecureChannelCredentialsImpl(connectionOptions);\n  }\n  /**\n   * Return a new ChannelCredentials instance with no credentials.\n   */\n  static createInsecure() {\n    return new InsecureChannelCredentialsImpl();\n  }\n}\nexports.ChannelCredentials = ChannelCredentials;\nclass InsecureChannelCredentialsImpl extends ChannelCredentials {\n  constructor(callCredentials) {\n    super(callCredentials);\n  }\n  compose(callCredentials) {\n    throw new Error('Cannot compose insecure credentials');\n  }\n  _getConnectionOptions() {\n    return null;\n  }\n  _isSecure() {\n    return false;\n  }\n}\nclass SecureChannelCredentialsImpl extends ChannelCredentials {\n  constructor(connectionOptions, callCredentials) {\n    super(callCredentials);\n    this.connectionOptions = connectionOptions;\n  }\n  compose(callCredentials) {\n    const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n    return new SecureChannelCredentialsImpl(this.connectionOptions, combinedCallCredentials);\n  }\n  _getConnectionOptions() {\n    return this.connectionOptions;\n  }\n  _isSecure() {\n    return true;\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","tls_1","require","call_credentials_1","verifyIsBufferOrNull","obj","friendlyName","Buffer","TypeError","ChannelCredentials","constructor","callCredentials","CallCredentials","createEmpty","_getCallCredentials","createSsl","rootCerts","privateKey","certChain","verifyOptions","Error","secureContext","createSecureContext","ca","undefined","key","cert","connectionOptions","checkServerIdentity","host","raw","SecureChannelCredentialsImpl","createInsecure","InsecureChannelCredentialsImpl","compose","_getConnectionOptions","_isSecure","combinedCallCredentials"],"sources":["/var/www/html/project/Dash_Vuexy-master/node_modules/@grpc/grpc-js/build/src/channel-credentials.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tls_1 = require(\"tls\");\nconst call_credentials_1 = require(\"./call-credentials\");\n// tslint:disable-next-line:no-any\nfunction verifyIsBufferOrNull(obj, friendlyName) {\n    if (obj && !(obj instanceof Buffer)) {\n        throw new TypeError(`${friendlyName}, if provided, must be a Buffer.`);\n    }\n}\n/**\n * A class that contains credentials for communicating over a channel, as well\n * as a set of per-call credentials, which are applied to every method call made\n * over a channel initialized with an instance of this class.\n */\nclass ChannelCredentials {\n    constructor(callCredentials) {\n        this.callCredentials = callCredentials || call_credentials_1.CallCredentials.createEmpty();\n    }\n    /**\n     * Gets the set of per-call credentials associated with this instance.\n     */\n    _getCallCredentials() {\n        return this.callCredentials;\n    }\n    /**\n     * Return a new ChannelCredentials instance with a given set of credentials.\n     * The resulting instance can be used to construct a Channel that communicates\n     * over TLS.\n     * @param rootCerts The root certificate data.\n     * @param privateKey The client certificate private key, if available.\n     * @param certChain The client certificate key chain, if available.\n     */\n    static createSsl(rootCerts, privateKey, certChain, verifyOptions) {\n        verifyIsBufferOrNull(rootCerts, 'Root certificate');\n        verifyIsBufferOrNull(privateKey, 'Private key');\n        verifyIsBufferOrNull(certChain, 'Certificate chain');\n        if (privateKey && !certChain) {\n            throw new Error('Private key must be given with accompanying certificate chain');\n        }\n        if (!privateKey && certChain) {\n            throw new Error('Certificate chain must be given with accompanying private key');\n        }\n        const secureContext = tls_1.createSecureContext({\n            ca: rootCerts || undefined,\n            key: privateKey || undefined,\n            cert: certChain || undefined\n        });\n        const connectionOptions = { secureContext };\n        if (verifyOptions && verifyOptions.checkServerIdentity) {\n            connectionOptions.checkServerIdentity =\n                (host, cert) => {\n                    return verifyOptions.checkServerIdentity(host, { raw: cert.raw });\n                };\n        }\n        return new SecureChannelCredentialsImpl(connectionOptions);\n    }\n    /**\n     * Return a new ChannelCredentials instance with no credentials.\n     */\n    static createInsecure() {\n        return new InsecureChannelCredentialsImpl();\n    }\n}\nexports.ChannelCredentials = ChannelCredentials;\nclass InsecureChannelCredentialsImpl extends ChannelCredentials {\n    constructor(callCredentials) {\n        super(callCredentials);\n    }\n    compose(callCredentials) {\n        throw new Error('Cannot compose insecure credentials');\n    }\n    _getConnectionOptions() {\n        return null;\n    }\n    _isSecure() {\n        return false;\n    }\n}\nclass SecureChannelCredentialsImpl extends ChannelCredentials {\n    constructor(connectionOptions, callCredentials) {\n        super(callCredentials);\n        this.connectionOptions = connectionOptions;\n    }\n    compose(callCredentials) {\n        const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n        return new SecureChannelCredentialsImpl(this.connectionOptions, combinedCallCredentials);\n    }\n    _getConnectionOptions() {\n        return this.connectionOptions;\n    }\n    _isSecure() {\n        return true;\n    }\n}\n//# sourceMappingURL=channel-credentials.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}